{"version":3,"file":"component---src-pages-demo-scroll-3-d-card-index-tsx-d28ec200b52baf80afab.js","mappings":"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","sources":["webpack://byongho-s-til/./src/pages/demo/scroll-3d-card/index.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react'\nimport './style.scss'\n\n// https://velog.io/@moonelysian/scroll-client-offset-%ED%99%9C%EC%9A%A9%ED%95%98%EA%B8%B0\\\n// https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect\n\nconst Scroll3DCardPage: React.FC = () => {\n  return (\n    <Scroll3DCard\n      backgroundText=\"My Bucket List\"\n      cardTexts={[\n        'Sky Diving',\n        'Korean Airline First Class',\n        'Milky Way',\n        'Nobel Prize',\n      ]}\n      primaryColor=\"#e9e6d5\"\n      secondaryColor=\"#2f2c25\"\n    />\n  )\n}\n\nexport default Scroll3DCardPage\n\ntype Props = {\n  backgroundText?: string\n  cardTexts?: string[]\n  primaryColor?: string\n  secondaryColor?: sgring\n}\n\nconst Scroll3DCard: React.FC<Props> = ({\n  backgroundText = 'Type Your Text',\n  cardTexts = ['Text1', 'Text2', 'Text3', 'Text4'],\n  primaryColor = 'beige',\n  secondaryColor = 'black',\n}) => {\n  const containerRef = useRef<HTMLDivElement>(null)\n  const mainContentRef = useRef<HTMLDivElement>(null)\n  const stickyRef = useRef<HTMLDivElement>(null)\n\n  // cardTexts 배열 4개 제한\n  useEffect(() => {\n    const container = containerRef.current\n    const length = cardTexts.length\n\n    // 4개를 초과할 경우 에러 발생\n    if (length > 4) {\n      throw new Error(\n        'cardTexts length is out of range, It should be less than 5'\n      )\n    }\n\n    // 카드 갯수에 따라 동적으로 gap 설정\n    switch (length) {\n      case 1:\n        container.style.setProperty('--card-gap', '0')\n        break\n      case 2:\n        container.style.setProperty('--card-gap', '20%')\n        break\n      case 3:\n        container.style.setProperty('--card-gap', '11%')\n        break\n      case 4:\n        container.style.setProperty('--card-gap', '1.33%')\n        break\n    }\n  }, [cardTexts.length])\n\n  // 메인컬러, 서브컬러 할당\n  useEffect(() => {\n    const container = containerRef.current\n    container.style.setProperty('--primary-color', primaryColor)\n    container.style.setProperty('--secondary-color', secondaryColor)\n  }, [primaryColor, secondaryColor])\n\n  // 메인 함수\n  useEffect(() => {\n    const container = containerRef.current // 가장 바깥의 컨테이너, css 변수를 담는 용도\n    const background = mainContentRef.current\n    const sticky = stickyRef.current\n    const cards = sticky.querySelectorAll('.scroll-3d-card__card')\n    const length = cards.length\n\n    let start = 0 // 애니메이션 시작 시, 스크롤 위치\n    let end = 0 // 애니메이션 끝날 시, 스크롤 위치\n    let step = 0 // 애니메이션 구분 최소 단위\n\n    // 초기화 함수, 화면 리사이즈마다 동작\n    function init() {\n      start = background.offsetTop\n      end = background.offsetTop + background.offsetHeight - sticky.offsetHeight\n      step = (end - start) / (length * 2)\n\n      // 추가한 커스텀 로직: 네비게이션 바의 크기를 CSS에 전달 -> start화면 높이 조정\n      const navbar = document.querySelector('.navbar')\n      const navbarHeight = navbar.offsetHeight\n      container.style.setProperty(\n        '--navbar-height',\n        navbarHeight.toString() + 'px'\n      )\n\n      // 추가한 커스텀 로직: 푸터 바의 크기를 CSS에 전달 -> end화면 높이 조정\n      const footer = document.querySelector('.footer')\n      const footerHeight = footer.offsetHeight\n      container.style.setProperty(\n        '--footer-height',\n        footerHeight.toString() + 'px'\n      )\n    }\n\n    // 애니메이션 함수\n    function animate() {\n      const scrollTop = window.scrollY\n      cards.forEach((card, i) => {\n        const movePoint = start + step * i // 카드 이동 시작 시점, 스크롤 위치\n        const flipPoint = movePoint + step * length // 카드 플립 시작 시점, 스크롤 위치\n        const endPoint = flipPoint + step // 카드 애니메이션 종료 시점, 스크롤 위치\n\n        // 스크롤 위치에 따라 각 카드마다 애니메이션\n        if (scrollTop < movePoint) {\n          card.style.transform = `\n              translateX(100vw) \n              rotateY(180deg)\n            `\n        } else if (scrollTop < flipPoint) {\n          card.style.transform = `\n              translateX(${\n                100 + ((scrollTop - movePoint) / (endPoint - movePoint)) * -100\n              }vw)\n              rotateY(180deg)\n            `\n        } else if (scrollTop < endPoint) {\n          card.style.transform = `\n              translateX(${\n                100 + ((scrollTop - movePoint) / (endPoint - movePoint)) * -100\n              }vw)\n              rotateY(${\n                180 + (-(scrollTop - flipPoint) / (endPoint - flipPoint)) * 180\n              }deg)\n            `\n        } else {\n          card.style.transform = `\n              translateX(0vw) \n              rotateY(0deg)\n            `\n        }\n      })\n    }\n\n    init() // 초기화\n\n    window.addEventListener('scroll', animate)\n    window.addEventListener('resize', init)\n\n    return () => {\n      window.removeEventListener('scroll', animate)\n      window.removeEventListener('resize', init)\n    }\n  }, [])\n\n  return (\n    <div ref={containerRef}>\n      <div className=\"scroll-3d-card__start\">Let's Scroll</div>\n      <div className=\"scroll-3d-card__main-content\" ref={mainContentRef}>\n        <div className=\"scroll-3d-card--sticky\" ref={stickyRef}>\n          {backgroundText}\n          <div className=\"scroll-3d-card__card-frame \">\n            {cardTexts.map((text) => (\n              <div className=\"scroll-3d-card__card\">\n                <div className=\"scroll-3d-card__card--front\">{text}</div>\n                <div className=\"scroll-3d-card__card--back\"></div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n      <div className=\"scroll-3d-card__end\">The End</div>\n    </div>\n  )\n}\n\nclass CardFlipOnScroll {\n  constructor(background, sticky) {\n    this.backgorund = background\n    this.sticky = sticky\n    this.cards = sticky.querySelectorAll('.scroll-3d-card__card')\n    this.length = this.cards.length\n\n    this.start = 0 // 애니메이션 시작 시, 스크롤 위치\n    this.end = 0 // 애니메이션 끝날 시, 스크롤  위치\n    this.step = 0 // 애니메이션 구분 최소 단위\n  }\n\n  // 초기화 함수\n  init() {\n    this.start = this.background.offsetTop\n    this.end =\n      this.background.offsetTop +\n      this.background.offsetHeight -\n      this.sticky.offsetHeight * 1.2\n    this.step = (this.end - this.start) / (this.length * 2)\n  }\n\n  // 애니메이션 함수\n  animate() {\n    this.cards.forEach((card, i) => {\n      const movePoint = this.start + this.step * i\n      const flipPoint = movePoint + this.step * this.length\n      const endPoint = flipPoint + this.step\n\n      if (scrollTop < movePoint) {\n        card.style.transform = `\n            translateX(100vw) \n            rotateY(180deg)\n          `\n      } else if (scrollTop < flipPoint) {\n        card.style.transform = `\n            translateX(${\n              100 + ((scrollTop - movePoint) / (endPoint - movePoint)) * -100\n            }vw)\n            rotateY(180deg)\n          `\n      } else if (scrollTop < endPoint) {\n        card.style.transform = `\n            translateX(${\n              100 + ((scrollTop - movePoint) / (endPoint - movePoint)) * -100\n            }vw)\n            rotateY(${\n              180 + (-(scrollTop - flipPoint) / (endPoint - flipPoint)) * 180\n            }deg)\n          `\n      } else {\n        card.style.transform = `\n            translateX(0vw) \n            rotateY(0deg)\n          `\n      }\n    })\n  }\n}\n"],"names":["Scroll3DCardPage","React","Scroll3DCard","backgroundText","cardTexts","primaryColor","secondaryColor","_ref","containerRef","useRef","mainContentRef","stickyRef","useEffect","container","current","length","Error","style","setProperty","background","sticky","cards","querySelectorAll","start","end","step","init","offsetTop","offsetHeight","navbarHeight","document","querySelector","toString","footerHeight","animate","scrollTop","window","scrollY","forEach","card","i","movePoint","flipPoint","endPoint","transform","addEventListener","removeEventListener","ref","className","map","text"],"sourceRoot":""}