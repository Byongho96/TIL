{"version":3,"file":"component---src-pages-posts-tsx-28b8332d6e78d9481e9e.js","mappings":"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","sources":["webpack://byongho-s-til/./src/components/post-item/index.tsx","webpack://byongho-s-til/./src/components/post-item/style.module.scss","webpack://byongho-s-til/./src/components/typing/index.tsx","webpack://byongho-s-til/./src/components/typing/style.module.scss","webpack://byongho-s-til/./src/hooks/use-infinite-scroll.tsx","webpack://byongho-s-til/./src/pages/posts.tsx","webpack://byongho-s-til/./src/pages/posts.module.scss"],"sourcesContent":["import * as React from 'react'\nimport * as styles from './style.module.scss'\nimport { navigate } from 'gatsby'\n\nconst PostItem: React.FC = ({ node }) => {\n  const { id, parent, frontmatter, excerpt } = node\n  const { name, relativePath } = parent\n  const { title, createdAt } = frontmatter\n\n  const handleClick = () => {\n    navigate(`/posts/${relativePath}`)\n  }\n\n  return (\n    <div className={styles.container} onClick={handleClick}>\n      <div className={styles.flex}>\n        <h3 className={styles.title}>{title || name}</h3>\n        <p className={styles.date}>{createdAt}</p>\n      </div>\n      <p className={styles.excerpt}>{excerpt}</p>\n    </div>\n  )\n}\n\nexport default PostItem\n","// extracted by mini-css-extract-plugin\nexport var container = \"style-module--container--514a1\";\nexport var date = \"style-module--date--7e16c\";\nexport var excerpt = \"style-module--excerpt--5fd4c\";\nexport var flex = \"style-module--flex--37bbb\";\nexport var title = \"style-module--title--dce33\";","import React, { useEffect, useRef } from 'react'\nimport * as styles from './style.module.scss'\n\ntype Props = {\n  phrases: string[]\n  speed: number\n  pause?: number\n  isInfinite?: boolean\n}\n\nconst Typing: React.FC<Props> = ({\n  phrases,\n  speed,\n  pause = 2000,\n  isInfinite = false,\n}) => {\n  const typingRef = useRef(null)\n\n  useEffect(() => {\n    let phraseIdx = 0\n    let stringIdx = 0\n    const textElement = typingRef.current\n\n    const typing = () => {\n      const phrase = phrases[phraseIdx]\n      // 1. 문자가 아직 끝나지 않은 경우\n      if (stringIdx < phrase.length) {\n        textElement.textContent += phrase[stringIdx++]\n        return\n      }\n\n      // 2. 끝난 현재 문구가 마지막 문구가 아닌 경우\n      if (phraseIdx < phrases.length - 1) {\n        stringIdx = 0\n        phraseIdx++\n        retypeAfter(pause)\n        return\n      }\n\n      // 3. 마지막 문구인데 무한 반복인 경우\n      if (isInfinite) {\n        stringIdx = 0\n        phraseIdx = 0\n        retypeAfter(pause)\n        return\n      }\n\n      // 4.종료\n      clearInterval(interval)\n    }\n\n    // 다시 타이핑하는 함수\n    const retypeAfter = (pause) => {\n      clearInterval(interval)\n      setTimeout(() => {\n        textElement.textContent = ''\n        interval = setInterval(typing, 1000 / speed)\n      }, pause)\n    }\n\n    let interval = setInterval(typing, 1000 / speed)\n\n    return () => {\n      clearInterval(interval)\n    }\n  }, [])\n  return <span ref={typingRef} className={styles.typing}></span>\n}\n\nexport default Typing\n","// extracted by mini-css-extract-plugin\nexport var blink = \"style-module--blink--38e4a\";\nexport var typing = \"style-module--typing--4294b\";","import { useEffect, RefObject } from 'react'\n\n/*\n무한스크롤 커스텀 훅\n특정 DOM요소를 ref로 받은 뒤,\n해당 요소의 마지막으로 스크롤이 닿았을 때, loadMore 함수(api 요청하는 비동기 함수) 실행\n*/\n\ntype InfiniteScrollProps = {\n  ref: RefObject<HTMLElement> // 무한스크롤이 동작할 DOM 엘리먼트를 ref로 받음\n  isEnd: boolean // 더이상 로드할 데이터가 없을 때, true로 설정\n  loadMore: () => void // 컨텐츠를 로드할 함수\n}\n\nfunction useInfiniteScroll({\n  ref,\n  isEnd,\n  loadMore,\n}: InfiniteScrollProps): InfiniteScrollReturns {\n  // 스크롤 이벤트 감지 함수\n  const handleScroll = () => {\n    const element = ref.current ? ref.current : document.documentElement\n    const THRESHOLD = 5\n\n    const { scrollTop, scrollHeight, clientHeight } = element // 엘리먼트의 스크롤 정보\n    if (scrollHeight - scrollTop - clientHeight > THRESHOLD) return\n\n    loadMore()\n  }\n\n  useEffect(() => {\n    const element = ref.current // 무한스크롤이 동작할 DOM 엘리먼트\n\n    if (isEnd) return //element가 null일 경우, 함수 종료\n\n    window.addEventListener('scroll', handleScroll) // element에 스크롤 이베트 감지함수 부착\n    // cleanup 함수\n    return () => {\n      window.removeEventListener('scroll', handleScroll)\n    }\n  }, [ref, isEnd, handleScroll])\n}\n\nexport default useInfiniteScroll\n","import React, { useState, useMemo, useRef } from 'react'\nimport * as styles from './posts.module.scss'\nimport type { HeadFC, PageProps } from 'gatsby'\nimport { graphql } from 'gatsby'\nimport PostItem from '@components/post-item'\nimport ToTheTop from '@components/to-the-top'\nimport Typing from '@components/typing'\nimport useInfiniteScroll from '@hooks/use-infinite-scroll'\nimport CategoryLayout from '@layouts/category-layout'\n\nconst PostPage: React.FC<PageProps> = ({ data }) => {\n  const [lastIdx, setLastIdx] = useState(5)\n  const infiniteRef = useRef<HTMLElement>(null)\n\n  const shownData = useMemo(() => {\n    return data.allMarkdownRemark.nodes.slice(0, lastIdx + 1)\n  }, [lastIdx])\n\n  const isEnd = useMemo(() => {\n    return lastIdx >= data.allMarkdownRemark.nodes.length - 1\n  }, [lastIdx])\n\n  const loadMore = () => {\n    setLastIdx((prev) => prev + 5)\n  }\n\n  useInfiniteScroll({ ref: infiniteRef, isEnd, loadMore })\n\n  return (\n    <CategoryLayout>\n      <div className={styles.container}>\n        <h1 className={styles.postGroup}>\n          <Typing phrases={['All the Posts']} speed=\"8\" />\n        </h1>\n        <div className={styles.postList}>\n          {shownData.map((node) => (\n            <PostItem key={node.id} node={node} />\n          ))}\n        </div>\n      </div>\n      <ToTheTop />\n    </CategoryLayout>\n  )\n}\n{\n  /* <h1 id='typing' className={styles.postGroup}>All the Posts</h1> */\n}\n\nexport const query = graphql`\n  query {\n    allMarkdownRemark(\n      filter: {\n        frontmatter: { isCompleted: { eq: true } }\n        fileAbsolutePath: { regex: \"/^(?!.*README).*posts.*$/\" }\n      }\n      sort: [\n        { frontmatter: { createdAt: DESC } }\n        { frontmatter: { title: DESC } }\n      ]\n    ) {\n      nodes {\n        id\n        parent {\n          ... on File {\n            id\n            name\n            relativePath\n          }\n        }\n        frontmatter {\n          title\n          createdAt\n          updatedAt\n        }\n        excerpt\n      }\n    }\n  }\n`\n\nexport default PostPage\n\nexport const Head: HeadFC = () => <title>Post Page</title>\n","// extracted by mini-css-extract-plugin\nexport var container = \"posts-module--container--db763\";\nexport var postGroup = \"posts-module--post-group--6038b\";\nexport var postList = \"posts-module--post-list--656a8\";"],"names":["_ref","node","id","parent","frontmatter","excerpt","name","relativePath","title","createdAt","React","className","onClick","handleClick","navigate","phrases","speed","pause","isInfinite","typingRef","useRef","useEffect","phraseIdx","stringIdx","textElement","current","typing","phrase","length","retypeAfter","clearInterval","interval","textContent","setTimeout","setInterval","ref","isEnd","loadMore","handleScroll","element","document","documentElement","scrollTop","scrollHeight","clientHeight","window","addEventListener","removeEventListener","data","lastIdx","setLastIdx","useState","infiniteRef","shownData","useMemo","allMarkdownRemark","nodes","slice","useInfiniteScroll","prev","CategoryLayout","Typing","map","PostItem","key","ToTheTop","Head"],"sourceRoot":""}