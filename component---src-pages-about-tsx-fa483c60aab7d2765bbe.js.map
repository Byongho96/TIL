{"version":3,"file":"component---src-pages-about-tsx-fa483c60aab7d2765bbe.js","mappings":"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","sources":["webpack://byongho-s-til/./src/components/type-animation/index.tsx","webpack://byongho-s-til/./src/components/about-blog/index.tsx","webpack://byongho-s-til/./src/components/about-me/index.tsx","webpack://byongho-s-til/./src/components/taping/index.tsx","webpack://byongho-s-til/./src/pages/about.tsx","webpack://byongho-s-til/./src/assets/svgs/github.svg","webpack://byongho-s-til/./src/assets/svgs/gmail.svg","webpack://byongho-s-til/./src/assets/svgs/linkedin.svg"],"sourcesContent":["import React, { useRef, useEffect } from 'react'\nimport './style.scss'\n\ntype Props = {\n  phrases: string[] // 순서대로 타이핑 할 문구 리스트\n  speed?: number // 타이핑 속도\n  style?: object // 인라인 스타일 객체\n  pause?: number // 한 개의 텍스트가 완성되고, 다음 텍스트가 타이핑 되기 전 대기시간\n  isInfinite?: boolean // 타이핑 무한 반복 여부\n}\n\nconst TypeAnimation: React.FC<Props> = ({\n  phrases,\n  speed = 5,\n  style = {},\n  pause = 2000, // 기본 대기 시간 2초\n  isInfinite = false,\n}) => {\n  const textElementRef = useRef<HTMLParagraphElement>(null)\n\n  useEffect(() => {\n    const textElement = textElementRef.current // 타이핑을 입력한 타겟 Element\n\n    if (!(textElement instanceof HTMLParagraphElement)) return\n\n    textElement.textContent = ''\n\n    let phraseIdx = 0 // 현재 타이핑하는 문구의 인덱스\n    let charIdx = 0 // 현재 타이핑하는 글자 인덱스\n    let interval: number = null // setInterval을 담을 변수\n\n    // 2. 타이핑 메인 함수\n    const typeText = function () {\n      textElement.style.setProperty('--cursor-opacity', 1) // 타이핑 하는 동안은 커서 깜빡이지 않도록\n      const currentPhrase = phrases[phraseIdx] // 현재 타이핑하는 문구\n\n      // 현재 문구 타이핑이 안 끝났을 경우\n      if (charIdx < currentPhrase.length) {\n        textElement.textContent += currentPhrase[charIdx++] // innerText 대신 textContent 사용해야 공백을 담을 수 있음\n        return\n      }\n      // 현재 문구가 마지막 문구가 아닐 경우\n      if (phraseIdx < phrases.length - 1) {\n        phraseIdx++ // 다음 문구로 이동\n        charIdx = 0 // 첫 번째 글자로 이동\n        retypeAfterPause()\n        return\n      }\n      // 무한 반복이 설정되어 있을 경우\n      if (isInfinite) {\n        phraseIdx = 0 // 처음 문구로 이동\n        charIdx = 0 // 첫 번재 글자로 이동\n        retypeAfterPause()\n        return\n      }\n      // 타이핑 종료\n      textElement.style.setProperty('--cursor-opacity', 0) // 타이핑 종료 후 커서 깜빡이도록\n      interval && clearInterval(interval)\n    }\n\n    // 3. 일시 정지 후, 문구 초기화한 뒤 타이핑 재시작하는 함수\n    const retypeAfterPause = function () {\n      textElement.style.setProperty('--cursor-opacity', 0) // 이리 정지하는 동안 커서 깜빡이도록\n      interval && clearInterval(interval) // 기존 setInterval 제거\n\n      // pause 이 후, setInterval 재시작\n      setTimeout(() => {\n        textElement.innerText = '' // 문구 초기화\n        interval = setInterval(typeText, 1000 / speed)\n      }, pause)\n    }\n\n    // 1. setInterval로 타이핑 시작\n    interval = setInterval(typeText, 1000 / speed)\n\n    // clear 함수\n    return () => {\n      interval && clearInterval(interval)\n    }\n  }, [phrases, speed, pause, isInfinite])\n\n  return <p ref={textElementRef} className=\"type-animation\" style={style}></p>\n}\n\nexport default TypeAnimation\n","import React from 'react'\nimport './style.scss'\nimport { StaticImage } from 'gatsby-plugin-image'\nimport TypeAnimation from '@components/type-animation'\n\nconst AboutBlog: React.FC = () => {\n  return (\n    <article className=\"about-blog\">\n      <section className=\"about-blog__header\">\n        <h1 className=\"about-blog__header__title\">About Blog</h1>\n        <a\n          href=\"/TIL/posts/Gatsby/\"\n          className=\"about-blog__header__typing\"\n          tabIndex={-1}\n        >\n          <TypeAnimation phrases={['블로그 제작기 Click Here!']} />\n        </a>\n      </section>\n      <section className=\"about-blog__content\">\n        <h2>기획 배경</h2>\n        <div>\n          <p>\n            프로그래밍을 본격적으로 배우기 시작하면서 TIL 마크다운 문서를\n            작성하기 시작했다. 공부한 것을 기록하는 문화라니 개발자들은 참으로\n            바람직하기도 하다. 한 해 동안의 글을 작성하고 보니 어느새 양이\n            상당히 늘어나 있었다. 마냥 레포지토리에 묵혀 두기도 아까워서, 공부도\n            할 겸 직접 블로그를 제작해보기로 했다.\n          </p>\n        </div>\n      </section>\n      <section className=\"about-blog__content\">\n        <h2>쓰인 기술</h2>\n        <h3>Gatsby</h3>\n        <div>\n          <p>\n            사용할 프레임워크를 조사하는 과정에서 Gatsby와 Jekyll이 가장\n            대표적인 정적 사이트 생성기(SSG)로 추천되었다. Jeykyll은 오랜 역사를\n            가지고 있었으나 Liquid와 Ruby라는 생소한 언어를 사용하는 반면,\n            Gatsby는 비교적 최근에 만들어져 React와 함께 빠르게 성장하고 있었다.\n            이러한 점들로 이미 Gatsby가 더 매력적으로 다가왔는데, Gatsby의\n            튜토리얼이 '마크다운 파일로 블로그 만들기'라는 점에서 마음을 굳혔다.\n          </p>\n        </div>\n        <h3>GraphQL</h3>\n        <div>\n          <p>\n            Gatsby를 선택하니까 GraphQL이라는 기술이 자매상품처럼 함께\n            재공되었다. Gatsby의{' '}\n            <a\n              href=\"https://www.gatsbyjs.com/plugins/gatsby-source-filesystem/\"\n              title=\"gatsby source file system 플러그인\"\n            >\n              파일 시스템 플러그인\n            </a>\n            이 GraphQL과 함께 동작하여 로컬 파일에 대한 GraphQL 노드를 자동으로\n            생성했다. 이 덕분에 손쉽게 블로그를 만들 수 있었지만, 아아직도\n            GraphQL이 정확히 어떤 것인지는 설명하기가 어렵다. 이 다음에 백엔드\n            프레임워크에 GraphQL을 적용할 기회가 생긴다면, 그때서야 더 명확하게\n            감을 잡을 수 있을 것 같다.\n          </p>\n        </div>\n        <h3>Sass & CSS BEM</h3>\n        <div>\n          <p>\n            CSS 스타일링으로는 Sass와 CSS BEM 네이밍 규칙을 사용했다. 모든 UI를\n            직접 구현하면서 CSS 실력을 향상시키고 싶었기 떼문이다. 이를 통해\n            레이아웃이나 애니메이션 활용 능력을 한층 더 성장시킬 수 있었다. 다만\n            BEM 규칙은 이번에 처음 적용하면서 다소 중구난방된 점이 없지 않다.\n          </p>\n        </div>\n      </section>\n      <section className=\"about-blog__content\">\n        <h2>블로그 특징</h2>\n        <h3>반응형 UI</h3>\n        <StaticImage src=\"../../assets/images/mockup.png\" alt=\"profile image\" />\n        <div>\n          <p>\n            4가지 기기에 따라 다르게 동작하는 반응형 UI로 구현했다. 실제\n            반응형을 구현하는 과정은 '이게 맞나?'싶을 정도로 조금 노가다스러운\n            면이 있었다. 단순히 폰트 크기를 조절하는 것 뿐만 아니라, 필요에 따라\n            레이아웃 배치를 변경하고 자바스크립트 코드를 추가해야 했다. 그러나\n            이번 프로젝트를 계기로, 다읍 프로젝트는 반응형 UI를 설계하는\n            단계부터 더 효율적으로 구현할 수 있을 것 같다.\n          </p>\n        </div>\n        <h3>메인 컬러 커스텀</h3>\n        <div>\n          <p>\n            네비게이션바에 있는 빨간색 정사각형을 클릭해서 메인 컬러를 커스텀할\n            수 있다. 이 메인 컬러는 CSS 변수로 공유되기 때문에 여러 컴포넌트의\n            색깔이 함게 변경된다. 원래는 Supreme과 유사한 느낌을 주기 위해\n            빨간색을 메인 컬러로 선택했지만, 정작 나도 눈이 아파서 하늘색으로\n            변경해서 사용하고 있다.😅\n          </p>\n        </div>\n        <h3>검색 기능</h3>\n        <div>\n          <p>\n            fuse.js를 기반으로 만들어진 gatsby-plugin-fusejs 플러그인을 사용해서\n            검색 기능을 구현했다. fuse.js의 가장 큰 특징은 fuzzy searching을\n            지원한다는 것이다. fuzzy searching이란 사용자가 정확한 철자를\n            입력하지 않아도 관련성이 있는 항목을 찾아내는 검색 기술을 말한다.\n            라이브러리 내부적으로 Bitap 알고리즘을 적용했다고 하는데, 기술에\n            대한 아주 간략한 설명을{' '}\n            <a\n              href=\"https://www.fusejs.io/concepts/scoring-theory.html\"\n              title=\"fues.js 공식문서 scoring theory\"\n            >\n              여기\n            </a>\n            에서 확인할 수 있다.\n          </p>\n        </div>\n        <h3>댓글 및 좋아요</h3>\n        <div>\n          <p>\n            <a href=\"https://giscus.app/\" title=\"giscus 공식 페이지\">\n              giscus\n            </a>\n            라는 Github API 기반의 라이브러리를 사용해서 댓글 기능을 구현했다.\n            서버가 없기 때문에 댓글 기능을 적용하지 못할 줄 알았는데, 개발자들은\n            어떤 상황에서도 창의적인 해결책을 찾아내는 것 같다. giscus\n            라이브러리는 Github 레포지토리의 discussions 탭과 연동되어 동작한다.\n          </p>\n        </div>\n        <h3>웹 접근성</h3>\n        <div>\n          <p>\n            웹 표준을 공부하면서 웹 접근성의 중요성을 깨닫게 되었다.\n            라이트하우스의 수치를 맞추는 것은 그저 빙산의 일각에 불과했다.\n            스크린 리더를 설치해서 직접 청각 보조자료를 확인하고, 키보드\n            접근성을 높이기 위해 HTML 코드 순서를 조정하거나 포커스 트랩을\n            구현하는 등의 작업을 했다.\n          </p>\n        </div>\n      </section>\n      <section className=\"about-blog__content\">\n        <h2>개발 후기</h2>\n        <div>\n          <p>\n            이번 프로젝트의 가장 큰 수확은 렌더링 방식의 차이를 이해한 것이다.\n            React가 기본적으로 CSR 기반의 SPA 프로젝트라는 것을 알고는 있었지만,\n            비교 대상이 없었기 때문에 그냥 아는 수준에 머물렀다. 이번에 Gatsby를\n            사용하면서 React와 미묘한 차이를 계속해서 경험했고, 그 차이의 원인이\n            렌더링 방식에 있음을 깨달았다. 그 결과로 SSG 뿐만 아니라 CSR과 SSR에\n            대해서도 더 깊이 이해하게 된 시간이었다.\n          </p>\n          <p>\n            또 다른 수확은 애니메이션 구현 능력이 한 단계 상승했다는 점이다.\n            기본적인 CSS 애니메이션 뿐만 아니라 JavsScript와 canvas 애니메이션을\n            활용하는 능력도 향상되었다. (아무도 몰랐겠지만{' '}\n            <a href=\"https://byongho96.github.io/TIL/404\" title=\"404 페이지\">\n              404 페이지\n            </a>\n            에 캔버스 애니메이션이 적용되어 있다.) 이전까지는 애니메이션을\n            추가하는 것이 부담스러운 작업이었지만, 지금은 오히려 어떻게 구현할지\n            자꾸 생각하면서 기대하게 된다.\n          </p>\n        </div>\n      </section>\n    </article>\n  )\n}\n\nexport default AboutBlog\n","import React, { useContext } from 'react'\nimport './style.scss'\nimport GithubIcon from '@assets/svgs/github.svg'\nimport GmailIcon from '@assets/svgs/gmail.svg'\nimport LinkedinIcon from '@assets/svgs/linkedin.svg'\nimport ProfileImage from '@components/profile-image'\nimport TypeAnimation from '@components/type-animation'\nimport { ThemeContext } from '@contexts/theme-context'\n\nconst AboutMe: React.FC = () => {\n  const { theme } = useContext(ThemeContext)\n\n  return (\n    <article className=\"about-me\">\n      <h1 className=\"about-me__title\">About Me</h1>\n      <div className=\"about-me__content\">\n        <div className=\"about-me__content__image\">\n          <ProfileImage />\n          <nav className=\"about-me__content__image__links\">\n            <a href=\"https://github.com/Byongho96/\" aria-label=\"작성자의 깃헙\">\n              <GithubIcon />\n            </a>\n            <a\n              href=\"https://www.linkedin.com/in/byongho-lee-b445ba22a\"\n              aria-label=\"작성자의 링크드인\"\n            >\n              <LinkedinIcon />\n            </a>\n            <a\n              href=\"mailto:unlike96@gmail.com\"\n              aria-label=\"작성자에게 구글 메일 전송\"\n            >\n              <GmailIcon />\n            </a>\n          </nav>\n        </div>\n        <div className=\"about-me__content__typing\">\n          <TypeAnimation phrases={['상상을 구현하는 개발자']} />\n        </div>\n        <div className=\"about-me__content__writing\">\n          <p>\n            프로그래밍이란 본질적으로 상상을 구현내는 과정이 아닐까 싶다. 여여러\n            사람의 상상과 아이디어가 모여 체계적으로 구성되면, 비로소 새로운\n            서비스로 탄생하는 것 같다.\n          </p>\n          <p>\n            기술의 발전은 계속해서 프로그래밍의 한계를 확장하고 있다. 나도\n            이러한 기술적 이점에 합류하여 더 자유로게 상상을 현실로 구현해내고\n            싶다.\n          </p>\n        </div>\n      </div>\n    </article>\n  )\n}\n\nexport default AboutMe\n","import React, { useEffect, useRef } from 'react'\nimport './style.scss'\n\ntype props = {\n  color: 'black' | 'white'\n  phrase: string\n  direction?: 'right' | 'left'\n  rotationDeg?: number\n  speed?: number\n}\n\nconst Taping: React.FC = ({\n  color,\n  phrase,\n  direction = 'right',\n  rotationDeg = 0,\n  speed = 1,\n}: props) => {\n  const tapeRef = useRef<HTMLDivElement>(null)\n  const textRef = useRef<HTMLSpanElement>(null)\n  const position = useRef(0)\n\n  useEffect(() => {\n    const tapeElement = tapeRef.current\n    const textElement = textRef.current\n\n    if (\n      !(tapeElement instanceof HTMLDivElement) ||\n      !(textElement instanceof HTMLSpanElement)\n    )\n      return\n\n    // 텍스트가 흐르는 방향을 설정\n    let textDirection = 1\n    if (direction === 'right') {\n      tapeElement.style.justifyContent = 'flex-end'\n    } else {\n      tapeElement.style.justifyContent = 'flex-start'\n      textDirection = -1\n    }\n\n    // 테이프 각도 회전\n    tapeElement.style.setProperty('--rotate-deg', `${rotationDeg}deg`)\n\n    // 텍스트를 이동 시키는 함수\n    const moveText = () => {\n      position.current += speed\n      if (position.current > textElement.scrollWidth / 2) {\n        textElement.style.transform = `translateX(0)`\n        position.current = 0\n      }\n      textElement.style.transform = `translateX(${\n        textDirection * position.current\n      }px)`\n    }\n\n    let animationId: number = null\n    // 애니메이션 실행 함수\n    const animate = () => {\n      moveText()\n      animationId = window.requestAnimationFrame(animate) // 희한하게 정의되기 전에 쓰네?\n    }\n\n    // 애니메이션 실행\n    animate()\n\n    return () => {\n      // 애니메이션 clear\n      window.cancelAnimationFrame(animationId)\n    }\n  }, [speed, direction, rotationDeg])\n\n  return (\n    <div ref={tapeRef} className={`tape ${color}`}>\n      <span ref={textRef} className=\"tape__text\">\n        {(phrase + '\\u00a0\\u00a0\\u00a0\\u00a0').repeat(20)}\n      </span>\n    </div>\n  )\n}\n\nexport default Taping\n","import * as React from 'react'\nimport './about.scss'\nimport AboutBlog from '@components/about-blog'\nimport AboutMe from '@components/about-me'\nimport SEO from '@components/seo'\nimport Taping from '@components/taping'\nimport type { PageProps } from 'gatsby'\n\nconst AboutPage: React.FC<PageProps> = () => {\n  return (\n    <div className=\"about--layout\">\n      <div className=\"about__article\">\n        <AboutMe />\n      </div>\n      <Taping\n        color=\"white\"\n        phrase=\"Lorem ipsum\"\n        rotationDeg={5}\n        direction=\"right\"\n      />\n      <Taping\n        color=\"black\"\n        phrase=\"dolor sit amet\"\n        rotationDeg={-9}\n        direction=\"left\"\n      />\n      <div className=\"about__article\">\n        <AboutBlog />\n      </div>\n      <Taping\n        color=\"white\"\n        phrase=\"carpe diem\"\n        rotationDeg={6}\n        direction=\"right\"\n      />\n    </div>\n  )\n}\n\nexport default AboutPage\n\nexport const Head = () => <SEO title=\"TIL About Page\" pathname=\"/about\" />\n","var React = require('react');\n\nfunction Github (props) {\n    return React.createElement(\"svg\",props,React.createElement(\"path\",{\"d\":\"M10 0C8.68678 0 7.38642 0.258658 6.17317 0.761205C4.95991 1.26375 3.85752 2.00035 2.92893 2.92893C1.05357 4.8043 0 7.34784 0 10C0 14.42 2.87 18.17 6.84 19.5C7.34 19.58 7.5 19.27 7.5 19V17.31C4.73 17.91 4.14 15.97 4.14 15.97C3.68 14.81 3.03 14.5 3.03 14.5C2.12 13.88 3.1 13.9 3.1 13.9C4.1 13.97 4.63 14.93 4.63 14.93C5.5 16.45 6.97 16 7.54 15.76C7.63 15.11 7.89 14.67 8.17 14.42C5.95 14.17 3.62 13.31 3.62 9.5C3.62 8.39 4 7.5 4.65 6.79C4.55 6.54 4.2 5.5 4.75 4.15C4.75 4.15 5.59 3.88 7.5 5.17C8.29 4.95 9.15 4.84 10 4.84C10.85 4.84 11.71 4.95 12.5 5.17C14.41 3.88 15.25 4.15 15.25 4.15C15.8 5.5 15.45 6.54 15.35 6.79C16 7.5 16.38 8.39 16.38 9.5C16.38 13.32 14.04 14.16 11.81 14.41C12.17 14.72 12.5 15.33 12.5 16.26V19C12.5 19.27 12.66 19.59 13.17 19.5C17.14 18.16 20 14.42 20 10C20 8.68678 19.7413 7.38642 19.2388 6.17317C18.7362 4.95991 17.9997 3.85752 17.0711 2.92893C16.1425 2.00035 15.0401 1.26375 13.8268 0.761205C12.6136 0.258658 11.3132 0 10 0Z\",\"fill\":\"black\"}));\n}\n\nGithub.defaultProps = {\"width\":\"20\",\"height\":\"20\",\"viewBox\":\"0 0 20 20\",\"fill\":\"none\"};\n\nmodule.exports = Github;\n\nGithub.default = Github;\n","var React = require('react');\n\nfunction Gmail (props) {\n    return React.createElement(\"svg\",props,React.createElement(\"path\",{\"d\":\"M24 3.45709V17.3661C24 18.2701 23.268 19.0021 22.364 19.0021H18.545V9.73009L12 14.6401L5.455 9.73009V19.0031H1.636C1.42107 19.0031 1.20825 18.9607 1.0097 18.8785C0.811145 18.7962 0.63075 18.6756 0.47882 18.5236C0.32689 18.3715 0.206404 18.1911 0.124246 17.9925C0.0420884 17.7939 -0.000131068 17.581 3.05652e-07 17.3661V3.45709C3.05652e-07 1.43409 2.309 0.27909 3.927 1.49309L5.455 2.64009L12 7.54809L18.545 2.63809L20.073 1.49309C21.69 0.280089 24 1.43409 24 3.45709Z\",\"fill\":\"black\"}));\n}\n\nGmail.defaultProps = {\"width\":\"24\",\"height\":\"20\",\"viewBox\":\"0 0 24 20\",\"fill\":\"none\"};\n\nmodule.exports = Gmail;\n\nGmail.default = Gmail;\n","var React = require('react');\n\nfunction Linkedin (props) {\n    return React.createElement(\"svg\",props,React.createElement(\"path\",{\"d\":\"M16 0C16.5304 0 17.0391 0.210714 17.4142 0.585786C17.7893 0.960859 18 1.46957 18 2V16C18 16.5304 17.7893 17.0391 17.4142 17.4142C17.0391 17.7893 16.5304 18 16 18H2C1.46957 18 0.960859 17.7893 0.585786 17.4142C0.210714 17.0391 0 16.5304 0 16V2C0 1.46957 0.210714 0.960859 0.585786 0.585786C0.960859 0.210714 1.46957 0 2 0H16ZM15.5 15.5V10.2C15.5 9.33539 15.1565 8.5062 14.5452 7.89483C13.9338 7.28346 13.1046 6.94 12.24 6.94C11.39 6.94 10.4 7.46 9.92 8.24V7.13H7.13V15.5H9.92V10.57C9.92 9.8 10.54 9.17 11.31 9.17C11.6813 9.17 12.0374 9.3175 12.2999 9.58005C12.5625 9.8426 12.71 10.1987 12.71 10.57V15.5H15.5ZM3.88 5.56C4.32556 5.56 4.75288 5.383 5.06794 5.06794C5.383 4.75288 5.56 4.32556 5.56 3.88C5.56 2.95 4.81 2.19 3.88 2.19C3.43178 2.19 3.00193 2.36805 2.68499 2.68499C2.36805 3.00193 2.19 3.43178 2.19 3.88C2.19 4.81 2.95 5.56 3.88 5.56ZM5.27 15.5V7.13H2.5V15.5H5.27Z\",\"fill\":\"black\"}));\n}\n\nLinkedin.defaultProps = {\"width\":\"18\",\"height\":\"18\",\"viewBox\":\"0 0 18 18\",\"fill\":\"none\"};\n\nmodule.exports = Linkedin;\n\nLinkedin.default = Linkedin;\n"],"names":["_ref","phrases","speed","style","pause","isInfinite","textElementRef","useRef","useEffect","textElement","current","HTMLParagraphElement","textContent","phraseIdx","charIdx","interval","typeText","setProperty","currentPhrase","length","retypeAfterPause","clearInterval","setTimeout","innerText","setInterval","React","ref","className","AboutBlog","href","tabIndex","TypeAnimation","title","StaticImage","src","alt","AboutMe","theme","useContext","ThemeContext","ProfileImage","GithubIcon","LinkedinIcon","GmailIcon","color","phrase","direction","rotationDeg","tapeRef","textRef","position","tapeElement","HTMLDivElement","HTMLSpanElement","textDirection","justifyContent","animationId","animate","scrollWidth","transform","window","requestAnimationFrame","cancelAnimationFrame","repeat","AboutPage","Taping","Head","SEO","pathname","Github","props","createElement","defaultProps","module","exports","default","Gmail","Linkedin"],"sourceRoot":""}