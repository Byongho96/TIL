{"version":3,"file":"component---src-pages-ssr-tsx-757f2d58c2a5a8e80345.js","mappings":"8KAwFA,MA7EuCA,IAMhC,IANiC,QACtCC,EAAO,MACPC,EAAQ,EAAC,MACTC,EAAQ,CAAC,EAAC,MACVC,EAAQ,IAAI,WACZC,GAAa,GACd,EACC,MAAMC,GAAiBC,EAAAA,EAAAA,QAAwB,MA6D/C,OA3DAC,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAcH,EAAeI,QAEnC,IAAKD,EAAa,OAElB,IAAIE,EAAY,EACZC,EAAU,EACVC,EAAW,KAGf,SAASC,IACPL,EAAYN,MAAMY,YAAY,mBAAoB,GAClD,MAAMC,EAAgBf,EAAQU,GAG9B,GAAIC,EAAUI,EAAcC,OAC1BR,EAAYS,aAAeF,EAAcJ,SAD3C,CAKA,GAAID,EAAYV,EAAQgB,OAAS,EAI/B,OAHAN,IACAC,EAAU,OACVO,IAIF,GAAId,EAIF,OAHAM,EAAY,EACZC,EAAU,OACVO,IAIFV,EAAYN,MAAMY,YAAY,mBAAoB,GAClDF,GAAYO,cAAcP,EAjB1B,CAkBF,CAGA,SAASM,IACPV,EAAYN,MAAMY,YAAY,mBAAoB,GAClDF,GAAYO,cAAcP,GAG1BQ,YAAW,KACTZ,EAAYa,UAAY,GACxBT,EAAWU,YAAYT,EAAU,IAAOZ,EAAM,GAC7CE,EACL,CAMA,OAHAS,EAAWU,YAAYT,EAAU,IAAOZ,GAGjC,KACLW,GAAYO,cAAcP,EAAS,CACpC,GACA,CAACZ,EAASC,EAAOE,EAAOC,IAGzBmB,EAAAA,cAAAA,OAAAA,CACEC,IAAKnB,EACLoB,UAAU,sBACVvB,MAAOA,GACD,EC1DZ,MAvB0BwB,IAEtBH,EAAAA,cAAAA,MAAAA,CACErB,MAAO,CACLyB,QAAS,OACTC,WAAY,SACZC,eAAgB,WAElBN,EAAAA,cAACO,EAAa,CACZ9B,QAAS,CAAC,iBAAkB,uBAAwB,gBACpDC,MAAO,EACPC,MAAO,CACL6B,MAAO,OACPC,SAAU,OACVC,WAAY,QAEd9B,MAAO,IACPC,YAAY,I","sources":["webpack://byongho-s-til/./src/components/type-animation/index.tsx","webpack://byongho-s-til/./src/pages/ssr.tsx"],"sourcesContent":["import React, { useRef, useEffect } from 'react'\nimport './style.scss'\n\ntype Props = {\n  phrases: string[] // 순서대로 타이핑 할 문구 리스트\n  speed?: number // 타이핑 속도\n  style?: object // 인라인 스타일 객체\n  pause?: number // 한 개의 텍스트가 완성되고, 다음 텍스트가 타이핑 되기 전 대기시간\n  isInfinite?: boolean // 타이핑 무한 반복 여부\n}\n\nconst TypeAnimation: React.FC<Props> = ({\n  phrases,\n  speed = 5,\n  style = {},\n  pause = 2000, // 기본 대기 시간 2초\n  isInfinite = false,\n}) => {\n  const textElementRef = useRef<HTMLSpanElement>(null)\n\n  useEffect(() => {\n    const textElement = textElementRef.current // 타이핑을 입력한 타겟 Element\n\n    if (!textElement) return\n\n    let phraseIdx = 0 // 현재 타이핑하는 문구의 인덱스\n    let charIdx = 0 // 현재 타이핑하는 글자 인덱스\n    let interval = null // setInterval을 담을 변수\n\n    // 2. 타이핑 메인 함수\n    function typeText() {\n      textElement.style.setProperty('--cursor-opacity', 1) // 타이핑 하는 동안은 커서 깜빡이지 않도록\n      const currentPhrase = phrases[phraseIdx] // 현재 타이핑하는 문구\n\n      // 현재 문구 타이핑이 안 끝났을 경우\n      if (charIdx < currentPhrase.length) {\n        textElement.textContent += currentPhrase[charIdx++] // innerText 대신 textContent 사용해야 공백을 담을 수 있음\n        return\n      }\n      // 현재 문구가 마지막 문구가 아닐 경우\n      if (phraseIdx < phrases.length - 1) {\n        phraseIdx++ // 다음 문구로 이동\n        charIdx = 0 // 첫 번째 글자로 이동\n        retypeAfterPause()\n        return\n      }\n      // 무한 반복이 설정되어 있을 경우\n      if (isInfinite) {\n        phraseIdx = 0 // 처음 문구로 이동\n        charIdx = 0 // 첫 번재 글자로 이동\n        retypeAfterPause()\n        return\n      }\n      // 타이핑 종료\n      textElement.style.setProperty('--cursor-opacity', 0) // 타이핑 종료 후 커서 깜빡이도록\n      interval && clearInterval(interval)\n    }\n\n    // 3. 일시 정지 후, 문구 초기화한 뒤 타이핑 재시작하는 함수\n    function retypeAfterPause() {\n      textElement.style.setProperty('--cursor-opacity', 0) // 이리 정지하는 동안 커서 깜빡이도록\n      interval && clearInterval(interval) // 기존 setInterval 제거\n\n      // pause 이 후, setInterval 재시작\n      setTimeout(() => {\n        textElement.innerText = '' // 문구 초기화\n        interval = setInterval(typeText, 1000 / speed)\n      }, pause)\n    }\n\n    // 1. setInterval로 타이핑 시작\n    interval = setInterval(typeText, 1000 / speed)\n\n    // clear 함수\n    return () => {\n      interval && clearInterval(interval)\n    }\n  }, [phrases, speed, pause, isInfinite])\n\n  return (\n    <span\n      ref={textElementRef}\n      className=\"type-animation-text\"\n      style={style}\n    ></span>\n  )\n}\n\nexport default TypeAnimation\n","import * as React from 'react'\nimport TypeAnimation from '@components/type-animation'\n\nconst SsrPage: React.FC = () => {\n  return (\n    <div\n      style={{\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}>\n      <TypeAnimation\n        phrases={['I love chicken', 'Do you like chicken?', 'Of course!!!']}\n        speed={7}\n        style={{\n          color: 'gray',\n          fontSize: '4rem',\n          fontWeight: 'bold',\n        }}\n        pause={2000}\n        isInfinite={true}\n      />\n    </div>\n  )\n}\n\nexport default SsrPage\n"],"names":["_ref","phrases","speed","style","pause","isInfinite","textElementRef","useRef","useEffect","textElement","current","phraseIdx","charIdx","interval","typeText","setProperty","currentPhrase","length","textContent","retypeAfterPause","clearInterval","setTimeout","innerText","setInterval","React","ref","className","SsrPage","display","alignItems","justifyContent","TypeAnimation","color","fontSize","fontWeight"],"sourceRoot":""}