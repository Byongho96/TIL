{"version":3,"file":"component---src-pages-about-tsx-eadd70adbd9e43adec8d.js","mappings":"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","sources":["webpack://byongho-s-til/./src/components/seo/index.tsx","webpack://byongho-s-til/./src/components/type-animation/index.tsx","webpack://byongho-s-til/./src/components/taping/index.tsx","webpack://byongho-s-til/./src/components/about-me/index.tsx","webpack://byongho-s-til/./src/pages/about.tsx"],"sourcesContent":["import React from 'react'\nimport { useSiteMetadata } from '@hooks/use-site-metadata'\n\nconst SEO = ({ title, description, pathname, children }) => {\n  const {\n    title: defaultTitle,\n    description: defaultDescription,\n    image,\n    siteUrl,\n  } = useSiteMetadata()\n\n  const seo = {\n    title: title || defaultTitle,\n    description: description || defaultDescription,\n    image: `${siteUrl}${image}`,\n    url: `${siteUrl}${pathname || ``}`,\n  }\n\n  return (\n    <>\n      <title>{seo.title}</title>\n      <meta name=\"description\" content={seo.description} />\n      <meta name=\"image\" content={seo.image} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta property=\"og:url\" content={seo.url} />\n      <meta property=\"og:title\" content={seo.title} />\n      <meta property=\"og:description\" content={seo.description} />\n      <meta property=\"og:site_name\" content={defaultTitle} />\n      <meta property=\"og:locale\" content=\"ko_KR\" />\n      <meta property=\"og:image\" content={seo.image} />\n      <meta property=\"og:image:width\" content=\"1200\" />\n      <meta property=\"og:image:height\" content=\"630\" />\n      {children}\n    </>\n  )\n}\n\nexport default SEO\n","import React, { useRef, useEffect } from 'react'\nimport './style.scss'\n\ntype Props = {\n  phrases: string[] // 순서대로 타이핑 할 문구 리스트\n  speed?: number // 타이핑 속도\n  style?: object // 인라인 스타일 객체\n  pause?: number // 한 개의 텍스트가 완성되고, 다음 텍스트가 타이핑 되기 전 대기시간\n  isInfinite?: boolean // 타이핑 무한 반복 여부\n}\n\nconst TypeAnimation: React.FC<Props> = ({\n  phrases,\n  speed = 5,\n  style = {},\n  pause = 2000, // 기본 대기 시간 2초\n  isInfinite = false,\n}) => {\n  const textElementRef = useRef<HTMLSpanElement>(null)\n\n  useEffect(() => {\n    const textElement = textElementRef.current // 타이핑을 입력한 타겟 Element\n\n    if (!textElement) return\n\n    textElement.textContent = ''\n\n    let phraseIdx = 0 // 현재 타이핑하는 문구의 인덱스\n    let charIdx = 0 // 현재 타이핑하는 글자 인덱스\n    let interval = null // setInterval을 담을 변수\n\n    // 2. 타이핑 메인 함수\n    function typeText() {\n      textElement.style.setProperty('--cursor-opacity', 1) // 타이핑 하는 동안은 커서 깜빡이지 않도록\n      const currentPhrase = phrases[phraseIdx] // 현재 타이핑하는 문구\n\n      // 현재 문구 타이핑이 안 끝났을 경우\n      if (charIdx < currentPhrase.length) {\n        textElement.textContent += currentPhrase[charIdx++] // innerText 대신 textContent 사용해야 공백을 담을 수 있음\n        return\n      }\n      // 현재 문구가 마지막 문구가 아닐 경우\n      if (phraseIdx < phrases.length - 1) {\n        phraseIdx++ // 다음 문구로 이동\n        charIdx = 0 // 첫 번째 글자로 이동\n        retypeAfterPause()\n        return\n      }\n      // 무한 반복이 설정되어 있을 경우\n      if (isInfinite) {\n        phraseIdx = 0 // 처음 문구로 이동\n        charIdx = 0 // 첫 번재 글자로 이동\n        retypeAfterPause()\n        return\n      }\n      // 타이핑 종료\n      textElement.style.setProperty('--cursor-opacity', 0) // 타이핑 종료 후 커서 깜빡이도록\n      interval && clearInterval(interval)\n    }\n\n    // 3. 일시 정지 후, 문구 초기화한 뒤 타이핑 재시작하는 함수\n    function retypeAfterPause() {\n      textElement.style.setProperty('--cursor-opacity', 0) // 이리 정지하는 동안 커서 깜빡이도록\n      interval && clearInterval(interval) // 기존 setInterval 제거\n\n      // pause 이 후, setInterval 재시작\n      setTimeout(() => {\n        textElement.innerText = '' // 문구 초기화\n        interval = setInterval(typeText, 1000 / speed)\n      }, pause)\n    }\n\n    // 1. setInterval로 타이핑 시작\n    interval = setInterval(typeText, 1000 / speed)\n\n    // clear 함수\n    return () => {\n      interval && clearInterval(interval)\n    }\n  }, [phrases, speed, pause, isInfinite])\n\n  return (\n    <span ref={textElementRef} className=\"type-animation\" style={style}></span>\n  )\n}\n\nexport default TypeAnimation\n","import React, { useEffect, useRef } from 'react'\nimport './style.scss'\n\ntype props = {\n  color: 'black' | 'white'\n  phrase: string\n  direction?: 'right' | 'left'\n  rotationDeg?: number\n  speed?: number\n}\n\nconst Taping: React.FC = ({\n  color,\n  phrase,\n  direction = 'right',\n  rotationDeg = 0,\n  speed = 1,\n}: props) => {\n  const tapeRef = useRef(null)\n  const textRef = useRef(null)\n  const position = useRef(0)\n\n  useEffect(() => {\n    const tapeElement = tapeRef.current\n    const textElement = textRef.current\n\n    // 텍스트가 흐르는 방향을 설정\n    let textDirection = 1\n    if (direction === 'right') {\n      tapeElement.style.justifyContent = 'flex-end'\n    } else {\n      tapeElement.style.justifyContent = 'flex-start'\n      textDirection = -1\n    }\n\n    // 테이프 각도 회전\n    tapeElement.style.setProperty('--rotate-deg', `${rotationDeg}deg`)\n\n    // 텍스트를 이동 시키는 함수\n    const moveText = () => {\n      position.current += speed\n      if (position.current > textElement.scrollWidth / 2) {\n        textElement.style.transform = `translateX(0)`\n        position.current = 0\n      }\n      textElement.style.transform = `translateX(${\n        textDirection * position.current\n      }px)`\n    }\n\n    let animationId = null\n    // 애니메이션 실행 함수\n    const animate = () => {\n      moveText()\n      animationId = window.requestAnimationFrame(animate) // 희한하게 정의되기 전에 쓰네?\n    }\n\n    // 애니메이션 실행\n    animate()\n\n    return () => {\n      // 애니메이션 clear\n      window.cancelAnimationFrame(animationId)\n    }\n  }, [speed, direction, rotationDeg])\n\n  return (\n    <div ref={tapeRef} className={`tape ${color}`}>\n      <p ref={textRef} className=\"tape__text\">\n        {(phrase + '\\u00a0\\u00a0\\u00a0\\u00a0').repeat(20)}\n      </p>\n    </div>\n  )\n}\n\nexport default Taping\n","import React from 'react'\nimport './style.scss'\nimport Taping from '@components/taping'\nimport { ThemeContext } from '@contexts/theme-context'\n\nconst AboutMe: React.FC = () => {\n  const { theme } = React.useContext(ThemeContext)\n  return (\n    <div className=\"about-me\">\n      <Taping color=\"white\" phrase=\"coming soon\" rotationDeg={10} />\n      <Taping\n        color=\"black\"\n        phrase=\"Lorem ipsum\"\n        rotationDeg={-15}\n        direction=\"left\"\n      />\n      <Taping color=\"white\" phrase=\"coming soon\" rotationDeg={5} />\n      <p className={`about-me__text ${theme}`}>About Me</p>\n    </div>\n  )\n}\n\nexport default AboutMe\n","import * as React from 'react'\nimport './about.scss'\nimport type { PageProps } from 'gatsby'\nimport AboutMe from '@components/about-me'\nimport SEO from '@components/seo'\nimport TypeAnimation from '@components/type-animation'\n\nconst AboutPage: React.FC<PageProps> = () => {\n  return (\n    <div className=\"about--layout\">\n      <div className=\"about__typing\">\n        <TypeAnimation\n          phrases={[\"Hi, I'm Front Dev. Byongho!\", \"I'm Working on this Blog.\"]}\n          speed={7}\n          pause={2000}\n          isInfinite={true}\n        />\n      </div>\n      <AboutMe />\n    </div>\n  )\n}\n\nexport default AboutPage\n\nexport const Head = () => <SEO title=\"About Page\" pathname=\"/about\" />\n"],"names":["_ref","title","description","pathname","children","defaultTitle","defaultDescription","image","siteUrl","useSiteMetadata","seo","url","React","name","content","property","phrases","speed","style","pause","isInfinite","textElementRef","useRef","useEffect","textElement","current","textContent","phraseIdx","charIdx","interval","typeText","setProperty","currentPhrase","length","retypeAfterPause","clearInterval","setTimeout","innerText","setInterval","ref","className","color","phrase","direction","rotationDeg","tapeRef","textRef","position","tapeElement","textDirection","justifyContent","animationId","animate","scrollWidth","transform","window","requestAnimationFrame","cancelAnimationFrame","repeat","AboutMe","theme","ThemeContext","Taping","AboutPage","TypeAnimation","Head","SEO"],"sourceRoot":""}