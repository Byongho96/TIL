{"version":3,"file":"component---src-pages-posts-tsx-a82127f400f5093497c8.js","mappings":"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","sources":["webpack://byongho-s-til/./src/components/post-item/index.tsx","webpack://byongho-s-til/./src/components/post-item/style.module.scss","webpack://byongho-s-til/./src/components/typing/index.tsx","webpack://byongho-s-til/./src/components/typing/style.module.scss","webpack://byongho-s-til/./src/hooks/use-infinite-scroll.tsx","webpack://byongho-s-til/./src/pages/posts.tsx","webpack://byongho-s-til/./src/pages/posts.module.scss"],"sourcesContent":["import * as React from 'react'\r\nimport { navigate } from 'gatsby'\r\nimport * as styles from './style.module.scss'\r\n\r\nconst PostItem: React.FC = ({ node }) => {\r\n  const { id, parent, frontmatter, excerpt } = node\r\n  const { name, relativePath } = parent\r\n  const { title, createdAt } = frontmatter\r\n\r\n  const handleClick = () => {\r\n    navigate(`/posts/${relativePath}`)\r\n  }\r\n\r\n  return (\r\n    <div className={styles.container} onClick={handleClick}>\r\n      <div className={styles.flex}>\r\n        <h3 className={styles.title}>{title || name}</h3>\r\n        <p className={styles.date}>{createdAt}</p>\r\n      </div>\r\n      <p className={styles.excerpt}>{excerpt}</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PostItem\r\n","// extracted by mini-css-extract-plugin\nexport var container = \"style-module--container--514a1\";\nexport var date = \"style-module--date--7e16c\";\nexport var excerpt = \"style-module--excerpt--5fd4c\";\nexport var flex = \"style-module--flex--37bbb\";\nexport var title = \"style-module--title--dce33\";","import React, { useEffect, useRef } from 'react'\r\nimport * as styles from './style.module.scss'\r\nimport UpIcon from '@assets/svgs/up.svg'\r\n\r\ntype Props = {\r\n  phrases: string[]\r\n  speed: number\r\n  pause?: number\r\n  isInfinite?: boolean\r\n}\r\n\r\nconst Typing: React.FC<Props> = ({\r\n  phrases,\r\n  speed,\r\n  pause = 2000,\r\n  isInfinite = false,\r\n}) => {\r\n  const typingRef = useRef(null)\r\n\r\n  useEffect(() => {\r\n    let phraseIdx = 0\r\n    let stringIdx = 0\r\n    const textElement = typingRef.current\r\n\r\n    const typing = () => {\r\n      let phrase = phrases[phraseIdx]\r\n      // 1. 문자가 아직 끝나지 않은 경우\r\n      if (stringIdx < phrase.length) {\r\n        textElement.textContent += phrase[stringIdx++]\r\n        return\r\n      }\r\n\r\n      // 2. 끝난 현재 문구가 마지막 문구가 아닌 경우\r\n      if (phraseIdx < phrases.length - 1) {\r\n        stringIdx = 0\r\n        phraseIdx++\r\n        retypeAfter(pause)\r\n        return\r\n      }\r\n\r\n      // 3. 마지막 문구인데 무한 반복인 경우\r\n      if (isInfinite) {\r\n        stringIdx = 0\r\n        phraseIdx = 0\r\n        retypeAfter(pause)\r\n        return\r\n      }\r\n\r\n      // 4.종료\r\n      clearInterval(interval)\r\n    }\r\n\r\n    // 다시 타이핑하는 함수\r\n    const retypeAfter = (pause) => {\r\n      clearInterval(interval)\r\n      setTimeout(() => {\r\n        textElement.textContent = ''\r\n        interval = setInterval(typing, 1000 / speed)\r\n      }, pause)\r\n    }\r\n\r\n    let interval = setInterval(typing, 1000 / speed)\r\n\r\n    return () => {\r\n      clearInterval(interval)\r\n    }\r\n  }, [])\r\n  return <span ref={typingRef} className={styles.typing}></span>\r\n}\r\n\r\nexport default Typing\r\n","// extracted by mini-css-extract-plugin\nexport var blink = \"style-module--blink--38e4a\";\nexport var typing = \"style-module--typing--4294b\";","import { useState, useEffect, RefObject } from 'react'\r\n\r\n/*\r\n무한스크롤 커스텀 훅\r\n특정 DOM요소를 ref로 받은 뒤,\r\n해당 요소의 마지막으로 스크롤이 닿았을 때, loadMore 함수(api 요청하는 비동기 함수) 실행\r\n*/\r\n\r\ntype InfiniteScrollProps = {\r\n  ref: RefObject<HTMLElement> // 무한스크롤이 동작할 DOM 엘리먼트를 ref로 받음\r\n  isEnd: boolean // 더이상 로드할 데이터가 없을 때, true로 설정\r\n  loadMore: () => void // 컨텐츠를 로드할 함수\r\n}\r\n\r\nfunction useInfiniteScroll({\r\n  ref,\r\n  isEnd,\r\n  loadMore,\r\n}: InfiniteScrollProps): InfiniteScrollReturns {\r\n  // 스크롤 이벤트 감지 함수\r\n  const handleScroll = () => {\r\n    const element = ref.current ? ref.current : document.documentElement\r\n    const THRESHOLD = 5\r\n\r\n    const { scrollTop, scrollHeight, clientHeight } = element // 엘리먼트의 스크롤 정보\r\n    if (scrollHeight - scrollTop - clientHeight > THRESHOLD) return\r\n    console.log(element, scrollTop, scrollHeight, clientHeight)\r\n\r\n    loadMore()\r\n  }\r\n\r\n  useEffect(() => {\r\n    const element = ref.current // 무한스크롤이 동작할 DOM 엘리먼트\r\n\r\n    if (isEnd) return //element가 null일 경우, 함수 종료\r\n\r\n    window.addEventListener('scroll', handleScroll) // element에 스크롤 이베트 감지함수 부착\r\n    // cleanup 함수\r\n    return () => {\r\n      window.removeEventListener('scroll', handleScroll)\r\n    }\r\n  }, [ref, isEnd, handleScroll])\r\n}\r\n\r\nexport default useInfiniteScroll\r\n","import React, { useState, useEffect, useMemo, useRef } from 'react'\r\nimport type { HeadFC, PageProps } from 'gatsby'\r\nimport NavigationLayout from '@layouts/navigation-layout'\r\nimport CategoryLayout from '@layouts/category-layout'\r\nimport { allMarkdownsQuery } from '@queries/index'\r\nimport { graphql } from 'gatsby'\r\nimport PostItem from '@components/post-item'\r\nimport * as styles from './posts.module.scss'\r\nimport ToTheTop from '@components/to-the-top'\r\nimport Typing from '@components/typing'\r\nimport useInfiniteScroll from '@hooks/use-infinite-scroll'\r\n\r\nconst PostPage: React.FC<PageProps> = ({ data }) => {\r\n  const [lastIdx, setLastIdx] = useState(5)\r\n  const infiniteRef = useRef<HTMLElement>(null)\r\n\r\n  const shownData = useMemo(() => {\r\n    return data.allMarkdownRemark.nodes.slice(0, lastIdx + 1)\r\n  }, [lastIdx])\r\n\r\n  const isEnd = useMemo(() => {\r\n    return lastIdx >= data.allMarkdownRemark.nodes.length - 1\r\n  }, [lastIdx])\r\n\r\n  const loadMore = () => {\r\n    setLastIdx((prev) => prev + 5)\r\n  }\r\n\r\n  useInfiniteScroll({ ref: infiniteRef, isEnd, loadMore })\r\n\r\n  return (\r\n    <CategoryLayout>\r\n      <div className={styles.container}>\r\n        <h1 className={styles.postGroup}>\r\n          <Typing phrases={['All the Posts']} speed=\"8\" />\r\n        </h1>\r\n        <div className={styles.postList}>\r\n          {shownData.map((node) => (\r\n            <PostItem key={node.id} node={node} />\r\n          ))}\r\n        </div>\r\n      </div>\r\n      <ToTheTop />\r\n    </CategoryLayout>\r\n  )\r\n}\r\n{\r\n  /* <h1 id='typing' className={styles.postGroup}>All the Posts</h1> */\r\n}\r\n\r\nexport const query = graphql`\r\n  query {\r\n    allMarkdownRemark(\r\n      filter: {\r\n        frontmatter: { isCompleted: { eq: true } }\r\n        fileAbsolutePath: { regex: \"/^(?!.*README).*posts.*$/\" }\r\n      }\r\n      sort: { frontmatter: { createdAt: DESC } }\r\n    ) {\r\n      nodes {\r\n        id\r\n        parent {\r\n          ... on File {\r\n            id\r\n            name\r\n            relativePath\r\n          }\r\n        }\r\n        frontmatter {\r\n          title\r\n          createdAt\r\n          updatedAt\r\n        }\r\n        excerpt\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport default PostPage\r\n\r\nexport const Head: HeadFC = () => <title>Post Page</title>\r\n","// extracted by mini-css-extract-plugin\nexport var container = \"posts-module--container--db763\";\nexport var postGroup = \"posts-module--post-group--6038b\";\nexport var postList = \"posts-module--post-list--656a8\";"],"names":["_ref","node","id","parent","frontmatter","excerpt","name","relativePath","title","createdAt","React","className","onClick","navigate","phrases","speed","pause","isInfinite","typingRef","useRef","useEffect","phraseIdx","stringIdx","textElement","current","typing","phrase","length","retypeAfter","clearInterval","interval","textContent","setTimeout","setInterval","ref","isEnd","loadMore","handleScroll","element","document","documentElement","scrollTop","scrollHeight","clientHeight","console","log","window","addEventListener","removeEventListener","data","lastIdx","setLastIdx","useState","infiniteRef","shownData","useMemo","allMarkdownRemark","nodes","slice","useInfiniteScroll","prev","CategoryLayout","Typing","map","PostItem","key","ToTheTop","Head"],"sourceRoot":""}