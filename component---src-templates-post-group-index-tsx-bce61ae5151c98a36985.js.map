{"version":3,"file":"component---src-templates-post-group-index-tsx-bce61ae5151c98a36985.js","mappings":"2IA6CA,IA5BkCA,IAAe,IAAd,KAAEC,GAAM,EACzC,MAAM,QAAEC,EAAO,KAAEC,EAAI,aAAEC,EAAY,MAAEC,EAAK,UAAEC,EAAS,KAAEC,EAAI,KAAEC,GAASP,EAEtE,OACEQ,EAAAA,cAACC,EAAAA,KAAI,CAACC,UAAU,kBAAkBC,GAAIJ,EAAM,aAAeH,EAAK,QAC9DI,EAAAA,cAAAA,UAAAA,CAASE,UAAU,aACjBF,EAAAA,cAAAA,MAAAA,CAAKE,UAAU,mBACbF,EAAAA,cAAAA,KAAAA,CAAIE,UAAU,oBAAoBN,GAASF,GAC3CM,EAAAA,cAAAA,OAAAA,CAAME,UAAU,kBAAkBE,SAAUP,GACzCA,IAGJC,EACCE,EAAAA,cAAAA,KAAAA,CAAIE,UAAU,sBAAsB,cAAY,QAC7CJ,EAAKO,KAAKC,GACTN,EAAAA,cAAAA,KAAAA,CAAIO,IAAKD,EAAK,cAAY,QACxBN,EAAAA,cAAAA,MAAAA,CAAKE,UAAU,kBAAkBI,OAKvCN,EAAAA,cAAAA,IAAAA,CAAGE,UAAU,sBAAsBT,IAGlC,C,qECfX,IAtB2Be,IAUvBR,EAAAA,cAAAA,SAAAA,CACEE,UAAU,aACVO,QAVgBC,KAClBC,OAAOC,SAAS,CACdC,IAAK,EACLC,SAAU,UACV,EAOA,aAAW,cAEXd,EAAAA,cAACe,IAAM,MACPf,EAAAA,cAAAA,OAAAA,CAAMgB,MAAO,CAAE,MAAO,KACtBhB,EAAAA,cAAAA,OAAAA,CAAMgB,MAAO,CAAE,MAAO,K,iDC+D5B,IAzEuCzB,IAMhC,IANiC,QACtC0B,EAAO,MACPC,EAAQ,EAAC,MACTF,EAAQ,CAAC,EAAC,MACVG,EAAQ,IAAI,WACZC,GAAa,GACd,EACC,MAAMC,GAAiBC,EAAAA,EAAAA,QAA6B,MA+DpD,OA7DAC,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAcH,EAAeI,QAEnC,KAAMD,aAAuBE,sBAAuB,OAEpDF,EAAYG,YAAc,GAE1B,IAAIC,EAAY,EACZC,EAAU,EACVC,EAAmB,KAGvB,MAAMC,EAAW,WACfP,EAAYR,MAAMgB,YAAY,mBAAoB,GAClD,MAAMC,EAAgBhB,EAAQW,GAG9B,GAAIC,EAAUI,EAAcC,OAC1BV,EAAYG,aAAeM,EAAcJ,SAD3C,CAKA,GAAID,EAAYX,EAAQiB,OAAS,EAI/B,OAHAN,IACAC,EAAU,OACVM,IAIF,GAAIf,EAIF,OAHAQ,EAAY,EACZC,EAAU,OACVM,IAIFX,EAAYR,MAAMgB,YAAY,mBAAoB,GAClDF,GAAYM,cAAcN,EAjB1B,CAkBF,EAGMK,EAAmB,WACvBX,EAAYR,MAAMgB,YAAY,mBAAoB,GAClDF,GAAYM,cAAcN,GAG1BO,YAAW,KACTb,EAAYc,UAAY,GACxBR,EAAWS,YAAYR,EAAU,IAAOb,EAAM,GAC7CC,EACL,EAMA,OAHAW,EAAWS,YAAYR,EAAU,IAAOb,GAGjC,KACLY,GAAYM,cAAcN,EAAS,CACpC,GACA,CAACb,EAASC,EAAOC,EAAOC,IAEpBpB,EAAAA,cAAAA,IAAAA,CAAGwC,IAAKnB,EAAgBnB,UAAU,iBAAiBc,MAAOA,GAAW,C,4FC7EvE,MAAMyB,EAAa,SAAUC,EAAeC,GACjD,MAAMC,EAAQF,EAAEhD,KAAKmD,cACfC,EAAQH,EAAEjD,KAAKmD,cACrB,OAAID,EAAQE,GACF,EAENF,EAAQE,EACH,EAIF,CACT,ECoCA,MA1CkCvD,IAA+B,IAA9B,gBAAEwD,EAAkB,IAAI,EACzD,MAAM,WAAEC,EAAU,WAAEC,GCmCaC,MAKjC,MAAMC,GAAOC,EAAAA,EAAAA,gBAAc,YA6BrBJ,EAAaG,EAAKE,kBAAkBC,MAAMpB,OAG1Ce,EAA6B,GA6DnC,OA5DAE,EAAKE,kBAAkBC,MAAMC,SAAS/D,IAEpC,MAAM,GAAEgE,EAAE,OAAEC,EAAM,YAAEC,EAAW,OAAEC,GAAWnE,GACtC,KAAEE,EAAI,aAAEC,GAAiB8D,GACzB,MAAE7D,GAAU8D,GACZ,KAAE3D,GAAS4D,EAGXC,EAAYjE,EAAakE,MAAM,KAG/BC,EAAmBF,EAAU,GACnC,IAAIG,EAAed,EAAWe,MAC3BC,GAAaA,EAASvE,OAASoE,IAElC,GAAKC,EAYHA,EAAaG,KAAO,MAZH,CAEjB,MAAMC,EAAc,CAClBzE,KAAMoE,EACNI,IAAK,EACLE,MAAO,GACPC,cAAe,IAEjBpB,EAAWqB,KAAKH,GAChBJ,EAAeI,CACjB,CAMA,IAAII,EAAiBR,EACrBH,EAAUY,MAAM,GAAI,GAAGjB,SAASkB,IAC9B,IAAIC,EAAcH,EAAeF,cAAcL,MAC5CC,GAAaA,EAASvE,OAAS+E,IAElC,GAAKC,EAaHA,EAAYR,KAAO,MAbH,CAEhB,MAAMC,EAAc,CAClBzE,KAAM+E,EACNP,IAAK,EACLE,MAAO,GACPC,cAAe,IAEjBE,EAAeF,cAAcC,KAAKH,GAClCI,EAAeF,cAAcM,KAAKlC,GAClCiC,EAAcP,CAChB,CAIAI,EAAiBG,CAAW,IAI9BH,EAAeH,MAAME,KAAK,CAAEd,KAAI5D,QAAOF,OAAMK,OAAMJ,gBAAe,IAGpEsD,EAAW0B,KAAKlC,GAET,CAAEO,aAAYC,aAAY,EDrIEC,GAEnC,OACElD,EAAAA,cAAAA,MAAAA,CAAKE,UAAU,WACbF,EAAAA,cAACC,EAAAA,KAAI,CACHE,GAAE,UACF,aAAW,UAAQ,SACV6C,EAAU,KACrBhD,EAAAA,cAAAA,KAAAA,CAAIE,UAAU,4BAEX+C,EAAW5C,KAAK4D,GACfjE,EAAAA,cAAAA,KAAAA,CAAIO,IAAK0D,EAASvE,MAChBM,EAAAA,cAACC,EAAAA,KAAI,CACHE,GAAE,UAAY8D,EAASvE,KACvB,aAAeuE,EAASvE,KAAI,WAE3BuE,EAASvE,MAEZM,EAAAA,cAAAA,KAAAA,CAAIE,UAAU,2BAEX+D,EAASI,cAAchE,KAAK4D,GAC3BjE,EAAAA,cAAAA,KAAAA,CAAIO,IAAK0D,EAASvE,MAChBM,EAAAA,cAACC,EAAAA,KAAI,CACHE,GAAE,UAAY8D,EAASvE,KACvBQ,UACE6C,IAAoBkB,EAASvE,KAAO,WAAa,GAEnD,aAAeuE,EAASvE,KAAI,WAE3BuE,EAASvE,cAQpB,E,UE+CV,MArFwCH,IAAoC,IAAnC,gBAAEwD,EAAe,SAAE6B,GAAU,EACpE,MAAMC,GAAWvD,EAAAA,EAAAA,QAAoB,MAG/BwD,GAAgBC,EAAAA,EAAAA,cAAaC,IACjC,MAAMC,EAAQJ,EAASpD,QACvB,IAAKwD,EAAO,OAEZ,MAAMC,EAAoBD,EAAME,iBAAiB,kBAC3CC,EAAeH,EAAMI,cAAc,SAEnCC,EAAWJ,EAAkB,GAC7BK,EAAUL,EAAkBA,EAAkBhD,OAAS,GAE3C,QAAd8C,EAAMzE,IACJiF,SAASC,gBAAkBF,GAAYP,EAAMU,SAItCF,SAASC,gBAAkBH,GAAYN,EAAMU,WAEtDH,EAAQI,QACRX,EAAMY,mBALNN,EAASK,QACTX,EAAMY,kBAMe,WAAdZ,EAAMzE,MACf6E,EAAaS,SAAU,EACzB,GACC,IA+BH,OAnBAtE,EAAAA,EAAAA,YAAU,KACR,MAAM0D,EAAQJ,EAASpD,QACvB,IAAKwD,EAAO,OAEZ,MAAMG,EAAeH,EAAMI,cAAc,SACzC,IAAKD,EAAc,OAEnB,MAAMN,EAAgB,SAAyBE,GAC3B,UAAdA,EAAMzE,MACR6E,EAAaS,SAAWT,EAAaS,QAEzC,EAGA,OADAT,EAAaU,iBAAiB,UAAWhB,GAClC,KACLM,EAAaW,oBAAoB,UAAWjB,EAAc,CAC3D,GACA,IAGD9E,EAAAA,cAAAA,MAAAA,CAAKE,UAAU,mBACZ0E,EACD5E,EAAAA,cAAAA,QAAAA,CAAOwC,IAAKqC,GACV7E,EAAAA,cAAAA,QAAAA,CACEwD,GAAG,wBACHwC,KAAK,WACLC,SAnCa,SAAyBjB,GACxCA,EAAMkB,OAAOL,QACfL,SAASM,iBAAiB,UAAWhB,GAErCU,SAASO,oBAAoB,UAAWjB,EAE5C,IA+BM9E,EAAAA,cAAAA,QAAAA,CAAOmG,QAAQ,wBAAwB,aAAW,YAAW,SAG7DnG,EAAAA,cAAAA,QAAAA,CAAOmG,QAAQ,wBAAwB,aAAW,YAAW,KAG7DnG,EAAAA,cAAAA,MAAAA,CAAKE,UAAU,8BACfF,EAAAA,cAAAA,MAAAA,CAAKE,UAAU,4BACbF,EAAAA,cAAAA,MAAAA,CAAKE,UAAU,qCACbF,EAAAA,cAACoG,EAAAA,EAAY,OAEfpG,EAAAA,cAACqG,EAAQ,CAACtD,gBAAiBA,MAG3B,C,4ICwBV,UAxEuExD,IAGjE,IAHkE,YACtE+G,EAAW,KACXnD,GACD,EACC,MAAMiB,EAAQjB,EAAKE,kBAAkBC,MAAMjD,KAAKkG,IAAI,CAClDC,KAAM,CACJhD,GAAI+C,EAAK/C,GACT/D,QAAS8G,EAAK9G,QACdC,KAAM6G,EAAK9C,OAAO/D,KAClBC,aAAc4G,EAAK9C,OAAO9D,aAC1BC,MAAO2G,EAAK7C,YAAY9D,MACxBC,UAAW0G,EAAK7C,YAAY7D,UAC5BC,KAAMyG,EAAK7C,YAAY5D,KACvBC,KAAMwG,EAAK5C,OAAO5D,UAItB,OACEC,EAAAA,cAACyG,EAAAA,EAAc,CAAC1D,gBAAiBuD,EAAY5G,MAC3CM,EAAAA,cAAAA,OAAAA,CAAME,UAAU,sBACdF,EAAAA,cAAAA,MAAAA,CAAKE,UAAU,6BACbF,EAAAA,cAAC0G,EAAAA,EAAa,CAACzF,QAAS,CAACqF,EAAY5G,SAEvCM,EAAAA,cAAAA,KAAAA,CAAIE,UAAU,yBACXkE,EAAM/D,KAAKb,GACVQ,EAAAA,cAAAA,KAAAA,CAAIO,IAAKf,EAAKgH,KAAKhD,IACjBxD,EAAAA,cAAC2G,EAAAA,EAAQ,CAACnH,KAAMA,EAAKgH,YAK7BxG,EAAAA,cAACQ,EAAAA,EAAQ,MACM,EA0Cd,MAAMoG,EAAOC,IAAA,IAAC,YACnBP,EAAW,SACXQ,GACsC,SACtC9G,EAAAA,cAAC+G,EAAAA,EAAG,CACFnH,MAAO0G,EAAY5G,KACnBsH,YAAW,eAAiBV,EAAY5G,KACxCuH,SAAUH,EAASG,UACnB,C,uBC7HJ,IAAIjH,EAAQ,EAAQ,MAEpB,SAASkH,EAAIC,GACT,OAAOnH,EAAMoH,cAAc,MAAMD,EAAM,CAACnH,EAAMoH,cAAc,OAAO,CAAC,GAAK,cAAc,MAAQ,CAAC,SAAW,aAAa,UAAY,iBAAiB,EAAI,IAAI,EAAI,IAAI,MAAQ,KAAK,OAAS,KAAK,IAAM,GAAG,CAACpH,EAAMoH,cAAc,OAAO,CAAC,EAAI,4GAA4G,OAAS,QAAQ,YAAc,IAAI,IAAM,IAAIpH,EAAMoH,cAAc,OAAO,CAAC,EAAI,4GAA4G,KAAO,QAAQ,OAAS,QAAQ,YAAc,IAAI,eAAiB,QAAQ,IAAM,IAAIpH,EAAMoH,cAAc,OAAO,CAAC,EAAI,qBAAqB,OAAS,QAAQ,YAAc,IAAI,cAAgB,QAAQ,eAAiB,QAAQ,IAAM,MAAMpH,EAAMoH,cAAc,IAAI,CAAC,KAAO,oBAAoB,IAAM,GAAGpH,EAAMoH,cAAc,OAAO,CAAC,EAAI,kBAAkB,KAAO,YACn3B,CAEAF,EAAGG,aAAe,CAAC,MAAQ,KAAK,OAAS,KAAK,QAAU,YAAY,KAAO,QAE3EC,EAAOC,QAAUL,EAEjBA,EAAGM,QAAUN,C","sources":["webpack://byongho-s-til/./src/components/post-item/index.tsx","webpack://byongho-s-til/./src/components/to-the-top/index.tsx","webpack://byongho-s-til/./src/components/type-animation/index.tsx","webpack://byongho-s-til/./src/utils/sortByTypes.ts","webpack://byongho-s-til/./src/components/category/index.tsx","webpack://byongho-s-til/./src/hooks/use-categorized-posts.tsx","webpack://byongho-s-til/./src/layouts/category-layout/index.tsx","webpack://byongho-s-til/./src/templates/post-group/index.tsx","webpack://byongho-s-til/./src/assets/svgs/up.svg"],"sourcesContent":["import * as React from 'react'\nimport './style.scss'\nimport { Link } from 'gatsby'\n\ninterface Props {\n  post: {\n    id: string\n    excerpt: string\n    name: string\n    relativePath: string\n    title: string\n    createdAt: string\n    tags: string[]\n    slug: string\n  }\n}\n\nconst PostItem: React.FC<Props> = ({ post }) => {\n  const { excerpt, name, relativePath, title, createdAt, tags, slug } = post\n\n  return (\n    <Link className=\"post-item--link\" to={slug} aria-label={`${title} 포스트`}>\n      <article className=\"post-item\">\n        <div className=\"post-item--flex\">\n          <h1 className=\"post-item__title\">{title || name}</h1>\n          <time className=\"post-item__date\" dateTime={createdAt}>\n            {createdAt}\n          </time>\n        </div>\n        {tags ? (\n          <ul className=\"post-item__tag-list\" aria-hidden=\"true\">\n            {tags.map((tag) => (\n              <li key={tag} aria-hidden=\"true\">\n                <div className=\"post-item__tag\">{tag}</div>\n              </li>\n            ))}\n          </ul>\n        ) : (\n          <p className=\"post-item__excerpt\">{excerpt}</p>\n        )}\n      </article>\n    </Link>\n  )\n}\n\nexport default PostItem\n","import React from 'react'\nimport './style.scss'\nimport UpIcon from '@assets/svgs/up.svg'\n\nconst ToTheTop: React.FC = () => {\n  // 클릭 시, 페이지 최상단으로 이동\n  const handleClick = () => {\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth', // 동작 안함\n    })\n  }\n\n  return (\n    <button\n      className=\"to-the-top\"\n      onClick={handleClick}\n      aria-label=\"페이지 최상단 이동\"\n    >\n      <UpIcon />\n      <span style={{ '--i': 0 }} />\n      <span style={{ '--i': 1 }} />\n    </button>\n  )\n}\n\nexport default ToTheTop\n","import React, { useRef, useEffect } from 'react'\nimport './style.scss'\n\ntype Props = {\n  phrases: string[] // 순서대로 타이핑 할 문구 리스트\n  speed?: number // 타이핑 속도\n  style?: object // 인라인 스타일 객체\n  pause?: number // 한 개의 텍스트가 완성되고, 다음 텍스트가 타이핑 되기 전 대기시간\n  isInfinite?: boolean // 타이핑 무한 반복 여부\n}\n\nconst TypeAnimation: React.FC<Props> = ({\n  phrases,\n  speed = 5,\n  style = {},\n  pause = 2000, // 기본 대기 시간 2초\n  isInfinite = false,\n}) => {\n  const textElementRef = useRef<HTMLParagraphElement>(null)\n\n  useEffect(() => {\n    const textElement = textElementRef.current // 타이핑을 입력한 타겟 Element\n\n    if (!(textElement instanceof HTMLParagraphElement)) return\n\n    textElement.textContent = ''\n\n    let phraseIdx = 0 // 현재 타이핑하는 문구의 인덱스\n    let charIdx = 0 // 현재 타이핑하는 글자 인덱스\n    let interval: number = null // setInterval을 담을 변수\n\n    // 2. 타이핑 메인 함수\n    const typeText = function () {\n      textElement.style.setProperty('--cursor-opacity', 1) // 타이핑 하는 동안은 커서 깜빡이지 않도록\n      const currentPhrase = phrases[phraseIdx] // 현재 타이핑하는 문구\n\n      // 현재 문구 타이핑이 안 끝났을 경우\n      if (charIdx < currentPhrase.length) {\n        textElement.textContent += currentPhrase[charIdx++] // innerText 대신 textContent 사용해야 공백을 담을 수 있음\n        return\n      }\n      // 현재 문구가 마지막 문구가 아닐 경우\n      if (phraseIdx < phrases.length - 1) {\n        phraseIdx++ // 다음 문구로 이동\n        charIdx = 0 // 첫 번째 글자로 이동\n        retypeAfterPause()\n        return\n      }\n      // 무한 반복이 설정되어 있을 경우\n      if (isInfinite) {\n        phraseIdx = 0 // 처음 문구로 이동\n        charIdx = 0 // 첫 번재 글자로 이동\n        retypeAfterPause()\n        return\n      }\n      // 타이핑 종료\n      textElement.style.setProperty('--cursor-opacity', 0) // 타이핑 종료 후 커서 깜빡이도록\n      interval && clearInterval(interval)\n    }\n\n    // 3. 일시 정지 후, 문구 초기화한 뒤 타이핑 재시작하는 함수\n    const retypeAfterPause = function () {\n      textElement.style.setProperty('--cursor-opacity', 0) // 이리 정지하는 동안 커서 깜빡이도록\n      interval && clearInterval(interval) // 기존 setInterval 제거\n\n      // pause 이 후, setInterval 재시작\n      setTimeout(() => {\n        textElement.innerText = '' // 문구 초기화\n        interval = setInterval(typeText, 1000 / speed)\n      }, pause)\n    }\n\n    // 1. setInterval로 타이핑 시작\n    interval = setInterval(typeText, 1000 / speed)\n\n    // clear 함수\n    return () => {\n      interval && clearInterval(interval)\n    }\n  }, [phrases, speed, pause, isInfinite])\n\n  return <p ref={textElementRef} className=\"type-animation\" style={style}></p>\n}\n\nexport default TypeAnimation\n","interface NameObject {\n  name: string\n}\n\nexport const sortByName = function (a: NameObject, b: NameObject) {\n  const nameA = a.name.toUpperCase() // ignore upper and lowercase\n  const nameB = b.name.toUpperCase() // ignore upper and lowercase\n  if (nameA < nameB) {\n    return -1\n  }\n  if (nameA > nameB) {\n    return 1\n  }\n\n  // names must be equal\n  return 0\n}\n\ninterface TitleObject {\n  title: string\n}\n\nexport const sortByTitle = function (a: TitleObject, b: TitleObject) {\n  const titleA = a.title.toUpperCase() // ignore upper and lowercase\n  const titleB = b.title.toUpperCase() // ignore upper and lowercase\n  if (titleA < titleB) {\n    return -1\n  }\n  if (titleA > titleB) {\n    return 1\n  }\n\n  // names must be equal\n  return 0\n}\n","import React from 'react'\nimport './style.scss'\nimport { Link } from 'gatsby'\nimport { useCategorizedPosts } from '@hooks/use-categorized-posts'\n\ninterface Props {\n  defaultCategory?: string // 기본으로 선택된 카테고리\n}\n\n// 최대 3단계 카테고리까지만(루트 카테고리 포함) 지원\nconst Category: React.FC<Props> = ({ defaultCategory = '' }) => {\n  const { totalPosts, categories } = useCategorizedPosts()\n\n  return (\n    <nav className=\"sidebar\">\n      <Link\n        to={`/posts/`}\n        aria-label=\"전체 게시글\"\n      >{`전체 글 (${totalPosts})`}</Link>\n      <ul className=\"sidebar__root-categories\">\n        {/* 루트 카테고리 */}\n        {categories.map((category) => (\n          <li key={category.name}>\n            <Link\n              to={`/posts/${category.name}`}\n              aria-label={`${category.name} 관련 게시글`}\n            >\n              {category.name}\n            </Link>\n            <ul className=\"sidebar__sub-categories\">\n              {/* 서브 카테고리 1 */}\n              {category.subCategories.map((category) => (\n                <li key={category.name}>\n                  <Link\n                    to={`/posts/${category.name}`}\n                    className={\n                      defaultCategory === category.name ? 'selected' : ''\n                    }\n                    aria-label={`${category.name} 관련 게시글`}\n                  >\n                    {category.name}\n                  </Link>\n                </li>\n              ))}\n            </ul>\n          </li>\n        ))}\n      </ul>\n    </nav>\n  )\n}\n\nexport default Category\n","import { graphql, useStaticQuery } from 'gatsby'\nimport { sortByName } from '@utils/sortByTypes'\n\ntype MarkdownRemarkNode = {\n  id: string\n  parent: {\n    id: string\n    name: string\n    relativePath: string\n  }\n  frontmatter: {\n    title: string\n  }\n  fields: {\n    slug: string\n  }\n}\n\ntype DataProps = {\n  allMarkdownRemark: {\n    nodes: MarkdownRemarkNode[]\n  }\n}\n\n// 마크다운 파일 정보\nexport type PostType = {\n  id: string\n  title: string\n  name: string\n  slug: string\n  relativePath: string\n}\n\n// 카테고리(디렉토리) 정보\nexport type CategoryType = {\n  name: string\n  posts: PostType[]\n  num: number\n  subCategories: CategoryType[]\n}\n\nexport interface CategorizedPosts {\n  totalPosts: number // 전체 포스트 수\n  categories: CategoryType[] // 카테고리(디렉토리) 정보 배열\n}\n\nexport const useCategorizedPosts = (): CategorizedPosts => {\n  // 마크다운 파일 수집\n  // 조건 1. isCompleted: true\n  // 조건 2. README.md 제외\n  // 조건 3. posts 디렉토리 하위\n  const data = useStaticQuery<DataProps>(graphql`\n    query CategorizedPostsQuery {\n      allMarkdownRemark(\n        filter: {\n          frontmatter: { isCompleted: { eq: true } }\n          fileAbsolutePath: { regex: \"/^(?!.*README).*posts.*$/\" }\n        }\n        sort: { frontmatter: { title: ASC } }\n      ) {\n        nodes {\n          id\n          parent {\n            ... on File {\n              id\n              name\n              relativePath\n            }\n          }\n          frontmatter {\n            title\n          }\n          fields {\n            slug\n          }\n        }\n      }\n    }\n  `)\n\n  const totalPosts = data.allMarkdownRemark.nodes.length // 전체 포스트 수\n\n  // 마크다운 파일 순회하며 카테고리 분류\n  const categories: CategoryType[] = []\n  data.allMarkdownRemark.nodes.forEach((post) => {\n    // 데이터 분해\n    const { id, parent, frontmatter, fields } = post\n    const { name, relativePath } = parent\n    const { title } = frontmatter\n    const { slug } = fields\n\n    // 카테고리 분류를 위해 상대 경로를 배열로 변환\n    const pathArray = relativePath.split('/')\n\n    // 루트 카테고리 분류\n    const rootCategoryName = pathArray[0]\n    let rootCategory = categories.find(\n      (category) => category.name === rootCategoryName\n    )\n    if (!rootCategory) {\n      // 루트 카테고리가 없을 경우, 새로 생성\n      const newCategory = {\n        name: rootCategoryName,\n        num: 1,\n        posts: [],\n        subCategories: [],\n      }\n      categories.push(newCategory)\n      rootCategory = newCategory\n    } else {\n      // 루트 카테고리가 있을 경우, 갯수만 업데이트\n      rootCategory.num += 1\n    }\n\n    // 서브 카테고리 분류\n    let parentCategory = rootCategory // 상대 경로 배열을 순회하며, 부모 디렉토리 재할당\n    pathArray.slice(1, -1).forEach((subCategoryName) => {\n      let subCategory = parentCategory.subCategories.find(\n        (category) => category.name === subCategoryName\n      )\n      if (!subCategory) {\n        // 서브 카테고리가 없을 경우, 새로 생성\n        const newCategory = {\n          name: subCategoryName,\n          num: 1,\n          posts: [],\n          subCategories: [],\n        }\n        parentCategory.subCategories.push(newCategory)\n        parentCategory.subCategories.sort(sortByName) // 서브 카테고리 이름 순 정렬\n        subCategory = newCategory\n      } else {\n        // 서브 카테고리가 있을 경우, 새로 생성\n        subCategory.num += 1\n      }\n      parentCategory = subCategory\n    })\n\n    // 포스트 삽입\n    parentCategory.posts.push({ id, title, name, slug, relativePath })\n  })\n\n  categories.sort(sortByName) // 최상단 카테고리 이름 순 정렬\n\n  return { totalPosts, categories }\n}\n","import React, { useCallback, useEffect, useRef } from 'react'\nimport './style.scss'\nimport Category from '@components/category'\nimport ProfileImage from '@components/profile-image'\n\ninterface Props {\n  defaultCategory: string\n  childern: React.ReactNode\n}\n\nconst CategoryLayout: React.FC<Props> = ({ defaultCategory, children }) => {\n  const asideRef = useRef<HTMLElement>(null)\n\n  // 포커스 트랩 메인 함수\n  const handleKeyDown = useCallback((event: KeyboardEvent) => {\n    const aside = asideRef.current\n    if (!aside) return\n\n    const focusableElements = aside.querySelectorAll(`input, a[href]`)\n    const inputElement = aside.querySelector(`input`)\n\n    const firstEle = focusableElements[0]\n    const lastEle = focusableElements[focusableElements.length - 1]\n\n    if (event.key === 'Tab') {\n      if (document.activeElement === lastEle && !event.shiftKey) {\n        // eslint-disable-next-line\n        firstEle.focus()\n        event.preventDefault()\n      } else if (document.activeElement === firstEle && event.shiftKey) {\n        // eslint-disable-next-line\n        lastEle.focus()\n        event.preventDefault()\n      }\n    } else if (event.key === 'Escape') {\n      inputElement.checked = false\n    }\n  }, [])\n\n  // 카테고리 모달창 on/off에 따라 포커스 트랩 토글\n  const handleChange = function toggleFocusTrap(event: InputEvent) {\n    if (event.target.checked) {\n      document.addEventListener('keydown', handleKeyDown)\n    } else {\n      document.removeEventListener('keydown', handleKeyDown)\n    }\n  }\n\n  // input(type=\"checkbox\") Enter키로 토글 가능\n  useEffect(() => {\n    const aside = asideRef.current\n    if (!aside) return\n\n    const inputElement = aside.querySelector(`input`)\n    if (!inputElement) return\n\n    const handleKeyDown = function toggleWithEnter(event: KeyboardEvent) {\n      if (event.key === 'Enter') {\n        inputElement.checked = !inputElement.checked\n      }\n    }\n\n    inputElement.addEventListener('keydown', handleKeyDown)\n    return () => {\n      inputElement.removeEventListener('keydown', handleKeyDown)\n    }\n  }, [])\n\n  return (\n    <div className=\"category-layout\">\n      {children}\n      <aside ref={asideRef}>\n        <input\n          id=\"category-layout-modal\"\n          type=\"checkbox\"\n          onChange={handleChange}\n        />\n        <label htmlFor=\"category-layout-modal\" aria-label=\"카테고리바 열기\">\n          POSTS\n        </label>\n        <label htmlFor=\"category-layout-modal\" aria-label=\"카테고리바 닫기\">\n          X\n        </label>\n        <div className=\"category-layout__modal-bg\" />\n        <div className=\"category-layout__sidebar\">\n          <div className=\"category-layout__sidebar__profile\">\n            <ProfileImage />\n          </div>\n          <Category defaultCategory={defaultCategory} />\n        </div>\n      </aside>\n    </div>\n  )\n}\n\nexport default CategoryLayout\n","import React from 'react'\nimport './style.scss'\nimport { graphql } from 'gatsby'\nimport PostItem from '@components/post-item'\nimport SEO from '@components/seo'\nimport ToTheTop from '@components/to-the-top'\nimport TypeAnimation from '@components/type-animation'\nimport CategoryLayout from '@layouts/category-layout'\nimport type { PageProps, HeadProps } from 'gatsby'\n\ntype MarkdownRemarkNode = {\n  id: string\n  excerpt: string\n  parent: {\n    id: string\n    name: string\n    relativePath: string\n  }\n  frontmatter: {\n    title: string\n    createdAt: string\n    updatedAt: string\n    tags: string[]\n  }\n  fields: {\n    slug: string\n  }\n}\n\ntype DataProps = {\n  allMarkdownRemark: {\n    nodes: MarkdownRemarkNode[]\n  }\n}\n\ntype PageContextType = {\n  pagePath: string\n  postPathRegex: string\n  id: string\n  name: string\n  relativePath: string\n}\n\nconst PostGroupPage: React.FC<PageProps<DataProps, PageContextType>> = ({\n  pageContext,\n  data,\n}) => {\n  const posts = data.allMarkdownRemark.nodes.map((node) => ({\n    item: {\n      id: node.id,\n      excerpt: node.excerpt,\n      name: node.parent.name,\n      relativePath: node.parent.relativePath,\n      title: node.frontmatter.title,\n      createdAt: node.frontmatter.createdAt,\n      tags: node.frontmatter.tags, // 수정: 'tiags'가 아닌 'tags'로 수정\n      slug: node.fields.slug,\n    },\n  }))\n\n  return (\n    <CategoryLayout defaultCategory={pageContext.name}>\n      <main className=\"post-group--layout\">\n        <div className=\"post-group__category-name\">\n          <TypeAnimation phrases={[pageContext.name]} />\n        </div>\n        <ul className=\"post-group__post-list\">\n          {posts.map((post) => (\n            <li key={post.item.id}>\n              <PostItem post={post.item} />\n            </li>\n          ))}\n        </ul>\n      </main>\n      <ToTheTop />\n    </CategoryLayout>\n  )\n}\n\nexport const query = graphql`\n  query ($postPathRegex: String!) {\n    allMarkdownRemark(\n      filter: {\n        frontmatter: { isCompleted: { eq: true } }\n        fileAbsolutePath: { regex: $postPathRegex }\n      }\n      sort: [\n        { frontmatter: { createdAt: DESC } }\n        { frontmatter: { title: DESC } }\n      ]\n    ) {\n      nodes {\n        id\n        excerpt\n        parent {\n          ... on File {\n            id\n            name\n            relativePath\n          }\n        }\n        frontmatter {\n          title\n          createdAt\n          updatedAt\n          tags\n        }\n        fields {\n          slug\n        }\n      }\n    }\n  }\n`\n\nexport default PostGroupPage\n\nexport const Head = ({\n  pageContext,\n  location,\n}: HeadProps<undefined, PageContextType>) => (\n  <SEO\n    title={pageContext.name}\n    description={`Posts about ${pageContext.name}`}\n    pathname={location.pathname}\n  />\n)\n","var React = require('react');\n\nfunction Up (props) {\n    return React.createElement(\"svg\",props,[React.createElement(\"mask\",{\"id\":\"mask0_12_75\",\"style\":{\"maskType\":\"luminance\"},\"maskUnits\":\"userSpaceOnUse\",\"x\":\"2\",\"y\":\"2\",\"width\":\"44\",\"height\":\"44\",\"key\":0},[React.createElement(\"path\",{\"d\":\"M24 44C35.046 44 44 35.046 44 24C44 12.954 35.046 4 24 4C12.954 4 4 12.954 4 24C4 35.046 12.954 44 24 44Z\",\"stroke\":\"white\",\"strokeWidth\":\"4\",\"key\":0}),React.createElement(\"path\",{\"d\":\"M24 44C35.046 44 44 35.046 44 24C44 12.954 35.046 4 24 4C12.954 4 4 12.954 4 24C4 35.046 12.954 44 24 44Z\",\"fill\":\"white\",\"stroke\":\"white\",\"strokeWidth\":\"4\",\"strokeLinejoin\":\"round\",\"key\":1}),React.createElement(\"path\",{\"d\":\"M33 27L24 18L15 27\",\"stroke\":\"black\",\"strokeWidth\":\"4\",\"strokeLinecap\":\"round\",\"strokeLinejoin\":\"round\",\"key\":2})]),React.createElement(\"g\",{\"mask\":\"url(#mask0_12_75)\",\"key\":1},React.createElement(\"path\",{\"d\":\"M0 0H48V48H0V0Z\",\"fill\":\"black\"}))]);\n}\n\nUp.defaultProps = {\"width\":\"48\",\"height\":\"48\",\"viewBox\":\"0 0 48 48\",\"fill\":\"none\"};\n\nmodule.exports = Up;\n\nUp.default = Up;\n"],"names":["_ref","post","excerpt","name","relativePath","title","createdAt","tags","slug","React","Link","className","to","dateTime","map","tag","key","ToTheTop","onClick","handleClick","window","scrollTo","top","behavior","UpIcon","style","phrases","speed","pause","isInfinite","textElementRef","useRef","useEffect","textElement","current","HTMLParagraphElement","textContent","phraseIdx","charIdx","interval","typeText","setProperty","currentPhrase","length","retypeAfterPause","clearInterval","setTimeout","innerText","setInterval","ref","sortByName","a","b","nameA","toUpperCase","nameB","defaultCategory","totalPosts","categories","useCategorizedPosts","data","useStaticQuery","allMarkdownRemark","nodes","forEach","id","parent","frontmatter","fields","pathArray","split","rootCategoryName","rootCategory","find","category","num","newCategory","posts","subCategories","push","parentCategory","slice","subCategoryName","subCategory","sort","children","asideRef","handleKeyDown","useCallback","event","aside","focusableElements","querySelectorAll","inputElement","querySelector","firstEle","lastEle","document","activeElement","shiftKey","focus","preventDefault","checked","addEventListener","removeEventListener","type","onChange","target","htmlFor","ProfileImage","Category","pageContext","node","item","CategoryLayout","TypeAnimation","PostItem","Head","_ref2","location","SEO","description","pathname","Up","props","createElement","defaultProps","module","exports","default"],"sourceRoot":""}