{"version":3,"file":"component---src-pages-demo-type-animation-index-tsx-f1bf791df1b8ee9e6e2a.js","mappings":"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","sources":["webpack://byongho-s-til/./src/components/seo/index.tsx","webpack://byongho-s-til/./src/pages/demo/type-animation/index.tsx"],"sourcesContent":["import React from 'react'\nimport { useSiteMetadata } from '@hooks/use-site-metadata'\n\ninterface Props {\n  title: string\n  description: string\n  pathname: string\n  children: React.ReactNode\n}\n\ntype SeoType = {\n  title: string\n  description: string\n  image: string\n  url: string\n}\n\nconst SEO: React.FC<Props> = ({ title, description, pathname, children }) => {\n  const {\n    title: defaultTitle,\n    description: defaultDescription,\n    image,\n    siteUrl,\n  } = useSiteMetadata()\n\n  const seo: SeoType = {\n    title: title || defaultTitle,\n    description: description || defaultDescription,\n    image: `${siteUrl}${image}`,\n    url: `${siteUrl}${pathname || ``}`,\n  }\n\n  return (\n    <>\n      <title>{seo.title}</title>\n      <meta name=\"description\" content={seo.description} />\n      <meta name=\"image\" content={seo.image} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta property=\"og:url\" content={seo.url} />\n      <meta property=\"og:title\" content={seo.title} />\n      <meta property=\"og:description\" content={seo.description} />\n      <meta property=\"og:site_name\" content={defaultTitle} />\n      <meta property=\"og:locale\" content=\"ko_KR\" />\n      <meta property=\"og:image\" content={seo.image} />\n      <meta property=\"og:image:width\" content=\"1200\" />\n      <meta property=\"og:image:height\" content=\"630\" />\n      {children}\n    </>\n  )\n}\n\nexport default SEO\n","import React, { useRef, useEffect } from 'react'\nimport './style.scss'\nimport SEO from '@components/seo'\nimport type { HeadProps } from 'gatsby'\n\nconst TypeAnimationPage: React.FC = () => {\n  return (\n    <div className=\"type-animation--layout \">\n      <TypeAnimation\n        phrases={['I love chicken', 'Do you like chicken?', 'Of course!!!']}\n        speed={7}\n        style={{\n          color: 'gray',\n          fontSize: '8vw',\n          fontWeight: 'bold',\n          textAlign: 'center',\n        }}\n        pause={2000}\n        isInfinite={true}\n      />\n    </div>\n  )\n}\n\nexport default TypeAnimationPage\n\nexport const Head = ({ location }: HeadProps) => (\n  <SEO\n    title=\"타이핑 애니메이션\"\n    decription=\"타이핑 애니메이션 예시 화면을 확인해볼 수 있습니다.\"\n    pathname={location.pathname}\n  />\n)\n\ntype Props = {\n  phrases: string[] // 순서대로 타이핑 할 문구 리스트\n  speed?: number // 타이핑 속도\n  style?: object // 인라인 스타일 객체\n  pause?: number // 한 개의 텍스트가 완성되고, 다음 텍스트가 타이핑 되기 전 대기시간\n  isInfinite?: boolean // 타이핑 무한 반복 여부\n}\n\nconst TypeAnimation: React.FC<Props> = ({\n  phrases,\n  speed = 5,\n  style = {},\n  pause = 2000, // 기본 대기 시간 2초\n  isInfinite = false,\n}) => {\n  const textElementRef = useRef<HTMLParagraphElement>(null)\n\n  useEffect(() => {\n    const textElement = textElementRef.current\n    if (!(textElement instanceof HTMLParagraphElement)) return\n\n    textElement.textContent = ''\n\n    let phraseIdx = 0 // 현재 타이핑하는 문구의 인덱스\n    let charIdx = 0 // 현재 타이핑하는 글자 인덱스\n    let interval: number = null // setInterval을 담을 변수\n\n    // 타이핑 메인 함수\n    const typeText = function () {\n      textElement.style.setProperty('--cursor-opacity', 1) // 타이핑 하는 동안은 커서 깜빡이지 않도록\n      const currentPhrase = phrases[phraseIdx] // 현재 타이핑하는 문구\n\n      // Case1: 현재 문구 타이핑이 안 끝났을 경우\n      if (charIdx < currentPhrase.length) {\n        textElement.textContent += currentPhrase[charIdx++] // innerText 대신 textContent 사용해야 공백을 담을 수 있음\n        return\n      }\n      // Case2: 현재 문구가 마지막 문구가 아닐 경우\n      if (phraseIdx < phrases.length - 1) {\n        phraseIdx++ // 다음 문구로 이동\n        charIdx = 0 // 첫 번째 글자로 이동\n        retypeAfterPause()\n        return\n      }\n      // Case3: 무한 반복이 설정되어 있을 경우\n      if (isInfinite) {\n        phraseIdx = 0 // 처음 문구로 이동\n        charIdx = 0 // 첫 번재 글자로 이동\n        retypeAfterPause()\n        return\n      }\n      // Case4: 타이핑 종료\n      textElement.style.setProperty('--cursor-opacity', 0) // 타이핑 종료 후 커서 깜빡이도록\n      clearInterval(interval)\n    }\n\n    // 일시 정지 후, 문구 초기화한 뒤 타이핑 재시작하는 함수\n    const retypeAfterPause = function () {\n      textElement.style.setProperty('--cursor-opacity', 0) // 이리 정지하는 동안 커서 깜빡이도록\n      clearInterval(interval) // 기존 setInterval 제거\n\n      // pause 이 후, setInterval 재시작\n      setTimeout(() => {\n        textElement.innerText = '' // 문구 초기화\n        interval = setInterval(typeText, 1000 / speed)\n      }, pause)\n    }\n\n    interval = setInterval(typeText, 1000 / speed)\n\n    return () => {\n      // clean-up 함수\n      clearInterval(interval)\n    }\n  }, [phrases, speed, pause, isInfinite])\n\n  return <p ref={textElementRef} className=\"type-animation\" style={style}></p>\n}\n"],"names":["_ref","title","description","pathname","children","defaultTitle","defaultDescription","image","siteUrl","useSiteMetadata","seo","url","React","name","content","property","TypeAnimationPage","className","TypeAnimation","phrases","speed","style","color","fontSize","fontWeight","textAlign","pause","isInfinite","Head","location","SEO","decription","_ref2","textElementRef","useRef","useEffect","textElement","current","HTMLParagraphElement","textContent","phraseIdx","charIdx","interval","typeText","setProperty","currentPhrase","length","retypeAfterPause","clearInterval","setTimeout","innerText","setInterval","ref"],"sourceRoot":""}