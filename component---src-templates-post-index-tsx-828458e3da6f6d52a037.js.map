{"version":3,"file":"component---src-templates-post-index-tsx-828458e3da6f6d52a037.js","mappings":"wLACWA,EAAS,8BC0CpB,MAxC+BC,IAAc,IAAb,IAAEC,GAAK,EAgCrC,OA/BAC,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAW,IAAIC,sBAClBC,IACCA,EAAQC,SAASC,IACf,MAAMC,EAAKC,UAAUF,EAAMG,OAAOC,aAAa,OACzCC,EAAgBC,SAASC,cAAc,iBAAiBN,EAAE,MAC5DI,IACEL,EAAMQ,kBAAoB,EAC5BH,EAAcI,UAAUC,IAAIC,GAE5BN,EAAcI,UAAUG,OAAOD,GAEnC,GACA,GAEJ,CAAEE,WAAW,kBAWf,OARAP,SACGQ,iBACC,8EAEDf,SAASgB,IACRnB,EAASoB,QAAQD,EAAQ,IAGtB,KACLnB,EAASqB,YAAY,CACtB,GACA,IAGDC,EAAAA,cAAAA,MAAAA,CACEC,UAAS,+BACTC,wBAAyB,CAAEC,OAAQ3B,IACnC,E,SCrBN,MAb6BD,IAAsB,IAArB,YAAE6B,GAAa,EAC3C,MAAM,OAAEC,IAAWC,EAAAA,EAAAA,KACnB,OACEN,EAAAA,cAAAA,MAAAA,CAAKC,UCNc,kCDOjBD,EAAAA,cAAAA,KAAAA,CAAIC,UCJS,8BDIiBG,EAAYG,OAC1CP,EAAAA,cAAAA,MAAAA,CAAKC,UCNO,6BDOVD,EAAAA,cAAAA,IAAAA,CAAGC,UCRO,6BDQkBG,EAAYI,WACxCR,EAAAA,cAAAA,IAAAA,CAAGC,UCXS,+BDWkBI,IAE5B,E,UEXV,MAeMI,EAAyCT,EAAAA,MAC7CzB,IAAiC,IAAhC,MAAEmC,EAAQ,gBAAgB,EACzB,MAAMC,GAAWC,EAAAA,EAAAA,WAA0B,MA8B3C,OA3BAnC,EAAAA,EAAAA,YAAU,KACR,MAAMoC,EAAeF,EAASG,QACxBC,EAAa3B,SAAS4B,cAAc,UAEpCC,EAAa,CACjBC,IAAK,gCACLC,KAAM,gBACN,aAAc,WACdT,QACAU,MAAO,iBACPC,YAAa,YACbC,MAAO,SAUT,OAPAC,OAAO3C,QAAQqC,GAAYpC,SAAQ2C,IAAmB,IAAjBC,EAAKC,GAAM,EAC9CX,EAAWY,aAAaF,EAAKC,EAAM,IAGrCb,EAAae,YAAYb,GAGlB,KACLF,EAAagB,YAAYhB,EAAaiB,WAAW,CAClD,GACA,CAACpB,IAGGV,EAAAA,cAAAA,MAAAA,CAAKjB,GAAG,aAAagD,IAAKpB,GAAY,IAIjD,Q,UCGA,MA5CsCpC,IAA2B,IAA1B,YAAEyD,EAAW,KAAEC,GAAM,EAC1D,MAAM,MAAEvB,IAAUwB,EAAAA,EAAAA,YAAWC,EAAAA,IAE7B,OACEnC,EAAAA,cAACoC,EAAAA,EAAc,CAACC,iBAAkBL,EAAYM,OAAOC,mBACnDvC,EAAAA,cAAAA,MAAAA,CAAKC,UCjBY,kCDkBfD,EAAAA,cAACwC,EAAU,CAACpC,YAAa6B,EAAKQ,eAAerC,cAC7CJ,EAAAA,cAAAA,MAAAA,CAAKC,UChBK,6BDiBRD,EAAAA,cAAAA,MAAAA,CAAKC,UClBY,uCDmBfD,EAAAA,cAAAA,MAAAA,CACEC,UAAS,iBAAmBS,EAAnB,iCACTR,wBAAyB,CAAEC,OAAQ8B,EAAKQ,eAAeC,QAEzD1C,EAAAA,cAACS,EAAU,CACTC,MAAiB,SAAVA,EAAmB,cAAgB,kBAG9CV,EAAAA,cAAAA,MAAAA,CAAKC,UCzBE,4BD0BLD,EAAAA,cAAC2C,EAAY,CAACnE,IAAKyD,EAAKQ,eAAeG,qBAI7C5C,EAAAA,cAAC6C,EAAAA,EAAQ,MACM,C","sources":["webpack://byongho-s-til/./src/components/table-content/style.module.scss","webpack://byongho-s-til/./src/components/table-content/index.tsx","webpack://byongho-s-til/./src/components/post-header/index.tsx","webpack://byongho-s-til/./src/components/post-header/style.module.scss","webpack://byongho-s-til/./src/components/utterances/index.tsx","webpack://byongho-s-til/./src/templates/post/index.tsx","webpack://byongho-s-til/./src/templates/post/style.module.scss"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport var active = \"style-module--active--d7665\";\nexport var toc = \"style-module--toc--d478a\";","import React, { useEffect } from 'react'\r\nimport * as styles from './style.module.scss'\r\n\r\nconst TableContent: React.FC = ({ toc }) => {\r\n  useEffect(() => {\r\n    const observer = new IntersectionObserver(\r\n      (entries) => {\r\n        entries.forEach((entry) => {\r\n          const id = encodeURI(entry.target.getAttribute('id')) // 한글 url 인코딩\r\n          const targetContent = document.querySelector(`.toc a[href=\"#${id}\"]`) // toc에서 해당 id를 가진 태그 선택\r\n          if (targetContent) {\r\n            if (entry.intersectionRatio > 0) {\r\n              targetContent.classList.add(styles.active)\r\n            } else {\r\n              targetContent.classList.remove(styles.active)\r\n            }\r\n          }\r\n        })\r\n      },\r\n      { rootMargin: `0% 0% -85% 0%` } // 관측 영역: TOP, RIGHT, BOTTOM, LEFT\r\n    )\r\n    // 트래킹하고 싶은 태그들 선택\r\n    document\r\n      .querySelectorAll(\r\n        '.markdown-body h1, .markdown-body h2, .markdown-body h3, .markdown-body h4'\r\n      )\r\n      .forEach((section) => {\r\n        observer.observe(section)\r\n      })\r\n\r\n    return () => {\r\n      observer.disconnect()\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <div\r\n      className={`toc ${styles.toc}`}\r\n      dangerouslySetInnerHTML={{ __html: toc }}\r\n    />\r\n  )\r\n}\r\n\r\nexport default TableContent\r\n","import * as React from 'react'\r\nimport { Link } from 'gatsby'\r\nimport * as styles from './style.module.scss'\r\nimport { useSiteMetadata } from '@hooks/use-site-metadata'\r\n\r\nconst PostHeader: React.FC = ({ frontmatter }) => {\r\n  const { author } = useSiteMetadata()\r\n  return (\r\n    <div className={styles.container}>\r\n      <h2 className={styles.title}>{frontmatter.title}</h2>\r\n      <div className={styles.info}>\r\n        <p className={styles.date}>{frontmatter.createdAt}</p>\r\n        <p className={styles.author}>{author}</p>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PostHeader\r\n","// extracted by mini-css-extract-plugin\nexport var author = \"style-module--author--4220d\";\nexport var container = \"style-module--container--3de1a\";\nexport var date = \"style-module--date--fa48c\";\nexport var info = \"style-module--info--0c9e4\";\nexport var title = \"style-module--title--9700c\";","import React, { createRef, useEffect } from 'react'\r\nimport './style.scss'\r\n\r\nconst src = 'https://utteranc.es/client.js'\r\n\r\nexport interface IUtterancesProps {\r\n  theme?:\r\n    | 'github-light'\r\n    | 'github-dark'\r\n    | 'preferred-color-scheme'\r\n    | 'github-dark-orange'\r\n    | 'icy-dark'\r\n    | 'dark-blue'\r\n    | 'photon-dark'\r\n    | 'boxy-light'\r\n    | 'gruvbox-dark'\r\n}\r\n\r\nconst Utterances: React.FC<IUtterancesProps> = React.memo(\r\n  ({ theme = 'github-light' }) => {\r\n    const utterRef = createRef<HTMLDivElement>(null)\r\n\r\n    // utternace를 적용하기 위한 script를 html에 성생\r\n    useEffect(() => {\r\n      const utterElement = utterRef.current // return문에서 접근하기 위해 미리 const로 할당\r\n      const utterances = document.createElement('script')\r\n\r\n      const attributes = {\r\n        src: 'https://utteranc.es/client.js',\r\n        repo: 'byongho96/TIL',\r\n        'issue-term': 'pathname',\r\n        theme,\r\n        label: '✨💬 comments ✨',\r\n        crossOrigin: 'anonymous',\r\n        async: 'false',\r\n      }\r\n\r\n      Object.entries(attributes).forEach(([key, value]) => {\r\n        utterances.setAttribute(key, value)\r\n      })\r\n\r\n      utterElement.appendChild(utterances)\r\n\r\n      // theme이 변경되면 utterRㄷf의 child를 삭제하고 다시 생성\r\n      return () => {\r\n        utterElement.removeChild(utterElement.firstChild)\r\n      }\r\n    }, [theme])\r\n\r\n    // 반환할 element\r\n    return <div id=\"utterances\" ref={utterRef} />\r\n  }\r\n)\r\n\r\nexport default Utterances\r\n","import React, { useContext } from 'react'\r\nimport type { HeadFC, PageProps } from 'gatsby'\r\nimport NavigationLayout from '@layouts/navigation-layout'\r\nimport CategoryLayout from '@layouts/category-layout'\r\nimport { allMarkdownsQuery } from '@queries/index'\r\nimport { graphql } from 'gatsby'\r\nimport TableContent from '@components/table-content'\r\nimport PostHeader from '@components/post-header'\r\nimport * as styles from './style.module.scss'\r\nimport ToTheTop from '@components/to-the-top'\r\nimport Utterances from '@components/utterances'\r\nimport { ThemeContext } from '@contexts/theme-context'\r\n\r\nconst PostPage: React.FC<PageProps> = ({ pageContext, data }) => {\r\n  const { theme } = useContext(ThemeContext)\r\n\r\n  return (\r\n    <CategoryLayout selectedCategory={pageContext.parent.relativeDirectory}>\r\n      <div className={styles.container}>\r\n        <PostHeader frontmatter={data.markdownRemark.frontmatter} />\r\n        <div className={styles.post}>\r\n          <div className={styles.markdownUtter}>\r\n            <div\r\n              className={`markdown-body ${theme} ${styles.markdown}`}\r\n              dangerouslySetInnerHTML={{ __html: data.markdownRemark.html }}\r\n            />\r\n            <Utterances\r\n              theme={theme === 'dark' ? 'github-dark' : 'github-light'}\r\n            />\r\n          </div>\r\n          <div className={styles.toc}>\r\n            <TableContent toc={data.markdownRemark.tableOfContents} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <ToTheTop />\r\n    </CategoryLayout>\r\n  )\r\n}\r\n\r\nexport const query = graphql`\r\n  query ($id: String!) {\r\n    markdownRemark(id: { eq: $id }) {\r\n      id\r\n      html\r\n      tableOfContents\r\n      frontmatter {\r\n        createdAt\r\n        isCompleted\r\n        reference\r\n        title\r\n        updatedAt\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport default PostPage\r\n","// extracted by mini-css-extract-plugin\nexport var container = \"style-module--container--ed3ad\";\nexport var markdown = \"style-module--markdown--35262\";\nexport var markdownUtter = \"style-module--markdown-utter--1fb15\";\nexport var post = \"style-module--post--e128e\";\nexport var toc = \"style-module--toc--734f6\";"],"names":["active","_ref","toc","useEffect","observer","IntersectionObserver","entries","forEach","entry","id","encodeURI","target","getAttribute","targetContent","document","querySelector","intersectionRatio","classList","add","styles","remove","rootMargin","querySelectorAll","section","observe","disconnect","React","className","dangerouslySetInnerHTML","__html","frontmatter","author","useSiteMetadata","title","createdAt","Utterances","theme","utterRef","createRef","utterElement","current","utterances","createElement","attributes","src","repo","label","crossOrigin","async","Object","_ref2","key","value","setAttribute","appendChild","removeChild","firstChild","ref","pageContext","data","useContext","ThemeContext","CategoryLayout","selectedCategory","parent","relativeDirectory","PostHeader","markdownRemark","html","TableContent","tableOfContents","ToTheTop"],"sourceRoot":""}