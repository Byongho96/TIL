{"version":3,"file":"component---src-pages-posts-tsx-1f9057fb22f90aca4324.js","mappings":"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","sources":["webpack://byongho-s-til/./src/components/post-item/index.tsx","webpack://byongho-s-til/./src/components/post-item/style.module.scss","webpack://byongho-s-til/./src/components/category/style.module.scss","webpack://byongho-s-til/./src/hooks/use-categorized-posts.tsx","webpack://byongho-s-til/./src/components/category/index.tsx","webpack://byongho-s-til/./src/layouts/category-layout/index.tsx","webpack://byongho-s-til/./src/layouts/category-layout/style.module.scss","webpack://byongho-s-til/./src/components/navigation/style.module.scss","webpack://byongho-s-til/./src/components/navigation/index.tsx","webpack://byongho-s-til/./src/hooks/use-site-metadata.tsx","webpack://byongho-s-til/./src/layouts/navigation-layout/index.tsx","webpack://byongho-s-til/./src/layouts/navigation-layout/style.module.scss","webpack://byongho-s-til/./src/pages/posts.tsx"],"sourcesContent":["import * as React from 'react'\r\nimport { navigate } from 'gatsby'\r\nimport * as styles from './style.module.scss'\r\n\r\nconst PostItem: React.FC = ({ node }) => {\r\n  const { id, parent, frontmatter, excerpt } = node\r\n  const { name, relativePath } = parent\r\n\r\n  const handleClick = () => {\r\n    navigate(`/posts/${relativePath}`)\r\n  }\r\n\r\n  return (\r\n    <div className={styles.container} onClick={handleClick}>\r\n      <h3 className={styles.title}>{frontmatter.title || name}</h3>\r\n      <p className={styles.excerpt}>{excerpt}</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PostItem\r\n","// extracted by mini-css-extract-plugin\nexport var container = \"style-module--container--514a1\";\nexport var excerpt = \"style-module--excerpt--5fd4c\";\nexport var title = \"style-module--title--dce33\";","// extracted by mini-css-extract-plugin\nexport var categories = \"style-module--categories--86b38\";\nexport var category = \"style-module--category--d0bec\";\nexport var container = \"style-module--container--36f8e\";\nexport var post = \"style-module--post--8179a\";\nexport var posts = \"style-module--posts--bdaf4\";","import { graphql, useStaticQuery } from 'gatsby'\r\n\r\n// 'posts' 폴더의 하위 md파일이 곧 포스트임을 가정\r\n// 'posts' 폴더의 하위 디렉토리가 곧 카테고리임을 가정\r\n// 'posts' 폴더의 하위 md파일들을 디렉토리 구조(카테고리)에 따라 가공하여 반환하는 훅\r\n\r\n// 'posts' 하위 md 파일 만을 탐색\r\n// 'README' md 파일 제거\r\n\r\nexport const useCategorizedPosts = () => {\r\n  const data = useStaticQuery(graphql`\r\n    query {\r\n      allMarkdownRemark(\r\n        filter: { fileAbsolutePath: { regex: \"/^(?!.*README).*posts.*$/\" } }\r\n      ) {\r\n        nodes {\r\n          id\r\n          parent {\r\n            ... on File {\r\n              id\r\n              name\r\n              relativePath\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `)\r\n\r\n  // 마크다운 파일을 디렉토리 구조에 따라 카테고리 분류\r\n  /* Exmample\r\n  {\r\n    \"rootCategory1\" : {\r\n      num: 6,\r\n      posts: [{id: \"id1\", name: \"name1\"}]\r\n      subCategories: {\r\n        \"subCategory1\": {\r\n          num: 3,\r\n          posts: [{id: \"id2\", name: \"name2\"}, {id: \"id3\", name: \"name3\"}, {id: \"id4\", name: \"name4\"}],\r\n          subCategories: {},\r\n        },\r\n        \"subCategory2\": {\r\n          num: 2,\r\n          posts: [{id: \"id5\", name: \"name5\"}, {id: \"id6\", name: \"name6\"}],\r\n          subCategories: {},\r\n        },\r\n      }\r\n    },\r\n    ...\r\n  }\r\n  */\r\n  const categories = []\r\n  data.allMarkdownRemark.nodes.forEach((node) => {\r\n    const { id, parent } = node\r\n    const { name, relativePath } = parent\r\n    const pathArray = relativePath.split('/')\r\n\r\n    // 최상단 카테고리 분류\r\n    const rootCategory = pathArray[0]\r\n    let foundCategory = categories.find(\r\n      (category) => category.name === rootCategory\r\n    )\r\n    if (!foundCategory) {\r\n      const newCategory = {\r\n        name: rootCategory,\r\n        num: 1,\r\n        posts: [],\r\n        subCategories: [],\r\n      }\r\n      categories.push(newCategory)\r\n      foundCategory = newCategory\r\n    } else {\r\n      foundCategory.num += 1\r\n    }\r\n\r\n    // 서브 카테고리 분류\r\n    let parentCategory = foundCategory\r\n    pathArray.slice(1, -1).forEach((subCategory) => {\r\n      let foundCategory = parentCategory.subCategories.find(\r\n        (category) => category.name === subCategory\r\n      )\r\n      if (!foundCategory) {\r\n        const newCategory = {\r\n          name: subCategory,\r\n          num: 1,\r\n          posts: [],\r\n          subCategories: [],\r\n        }\r\n        parentCategory.subCategories.push(newCategory)\r\n        foundCategory = newCategory\r\n      } else {\r\n        foundCategory.num += 1\r\n      }\r\n      parentCategory = foundCategory\r\n    })\r\n\r\n    // 포스트 분류\r\n    parentCategory.posts.push({ id, name, relativePath })\r\n    parentCategory.posts.sort((a, b) => {\r\n      const nameA = a.name.toUpperCase() // ignore upper and lowercase\r\n      const nameB = b.name.toUpperCase() // ignore upper and lowercase\r\n      if (nameA < nameB) {\r\n        return -1\r\n      }\r\n      if (nameA > nameB) {\r\n        return 1\r\n      }\r\n\r\n      // names must be equal\r\n      return 0\r\n    })\r\n  })\r\n\r\n  // sort by name\r\n  categories.sort((a, b) => {\r\n    const nameA = a.name.toUpperCase() // ignore upper and lowercase\r\n    const nameB = b.name.toUpperCase() // ignore upper and lowercase\r\n    if (nameA < nameB) {\r\n      return -1\r\n    }\r\n    if (nameA > nameB) {\r\n      return 1\r\n    }\r\n\r\n    // names must be equal\r\n    return 0\r\n  })\r\n\r\n  return categories\r\n}\r\n","import React, { useState } from 'react'\r\nimport { Link } from 'gatsby'\r\nimport * as styles from './style.module.scss'\r\nimport { useCategorizedPosts } from '@hooks/use-categorized-posts'\r\n\r\n// 최대 3단계 카테고리까지만(루트 카테고리 포함) 지원\r\n\r\nconst Category: React.FC = ({ selectedCategory = '' }) => {\r\n  const data = useCategorizedPosts()\r\n  const [clickedCategory, setClickedCategory] = useState(selectedCategory)\r\n\r\n  console.log(data)\r\n\r\n  const handleClickCategory = (name) => {\r\n    setClickedCategory(name)\r\n  }\r\n\r\n  return (\r\n    <ul className={`${styles.container} ${styles.categories}`}>\r\n      {/* 루트 카테고리 */}\r\n      {data.map((category) => (\r\n        <li key={category.name} className={styles.categories}>\r\n          <CategoryName\r\n            name={category.name}\r\n            handleClickCategory={handleClickCategory}\r\n          />\r\n          <ul>\r\n            {/* 서브 카테고리 1 */}\r\n            {category.subCategories.map((subCategory) => (\r\n              <li key={subCategory.name} className={styles.categories}>\r\n                <CategoryName\r\n                  name={subCategory.name}\r\n                  handleClickCategory={handleClickCategory}\r\n                />\r\n                <ul className={styles.categories}>\r\n                  {/* 서브 카테고리 2 */}\r\n                  {subCategory.subCategories.map((subCategory) => (\r\n                    <li key={subCategory.name} className={styles.categories}>\r\n                      <CategoryName\r\n                        name={subCategory.name}\r\n                        handleClickCategory={handleClickCategory}\r\n                      />\r\n                      {/* 서브 카테고리 2 포스트 */}\r\n                      {clickedCategory === subCategory.name && (\r\n                        <Posts posts={subCategory.posts} />\r\n                      )}\r\n                    </li>\r\n                  ))}\r\n                </ul>\r\n                {/* 서브 카테고리 1 포스트 */}\r\n                {clickedCategory === subCategory.name && (\r\n                  <Posts posts={subCategory.posts} />\r\n                )}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n          {/* 루트 카테고리 포스트 */}\r\n          {clickedCategory === category.name && (\r\n            <Posts posts={category.posts} />\r\n          )}\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  )\r\n}\r\n\r\nconst CategoryName: React.FC = ({ name, handleClickCategory }) => {\r\n  return (\r\n    <Link\r\n      to={`/posts/${name}`}\r\n      activeClassName=\"active\"\r\n      className={styles.category}\r\n      onClick={() => {\r\n        handleClickCategory(name)\r\n      }}>\r\n      {name}\r\n    </Link>\r\n  )\r\n}\r\n\r\nconst Posts: React.FC = ({ posts }) => {\r\n  return (\r\n    <ul className={styles.posts}>\r\n      {posts.map((post) => (\r\n        <li key={post.id}>\r\n          <Link\r\n            to={`/posts/${post.relativePath}`}\r\n            activeClassName=\"active\"\r\n            className={styles.post}>\r\n            {post.name}\r\n          </Link>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport default Category\r\n","import * as React from 'react'\r\nimport * as styles from './style.module.scss'\r\nimport Category from '@components/category'\r\n\r\nconst CategoryLayout = ({ selectedCategory, children }) => {\r\n  return (\r\n    <div className={styles.container}>\r\n      <Category selectedCategory={selectedCategory} />\r\n      <div>{children}</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CategoryLayout\r\n","// extracted by mini-css-extract-plugin\nexport var container = \"style-module--container--16db0\";","// extracted by mini-css-extract-plugin\nexport var container = \"style-module--container--bc714\";\nexport var navLinkText = \"style-module--nav-link-text--1f74e\";\nexport var navLinks = \"style-module--nav-links--64532\";","import * as React from 'react'\r\nimport { Link } from 'gatsby'\r\nimport * as styles from './style.module.scss'\r\nimport { useSiteMetadata } from '@hooks/use-site-metadata'\r\n\r\nconst Navigation: React.FC = () => {\r\n  const { owner } = useSiteMetadata()\r\n  return (\r\n    <div className={styles.container}>\r\n      <Link to=\"/\" className={styles.navLinkText}>\r\n        {owner}\r\n      </Link>\r\n      <nav>\r\n        <ul className={styles.navLinks}>\r\n          <li>\r\n            <Link to=\"/\" className={styles.navLinkText}>\r\n              Home\r\n            </Link>\r\n          </li>\r\n          <li>\r\n            <Link to=\"/about\" className={styles.navLinkText}>\r\n              About\r\n            </Link>\r\n          </li>\r\n          <li>\r\n            <Link to=\"/posts\" className={styles.navLinkText}>\r\n              Posts\r\n            </Link>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Navigation\r\n","import { graphql, useStaticQuery } from 'gatsby'\r\n\r\nexport const useSiteMetadata = () => {\r\n  const data = useStaticQuery(graphql`\r\n    query {\r\n      site {\r\n        siteMetadata {\r\n          title\r\n          owner\r\n          description\r\n          siteUrl\r\n        }\r\n      }\r\n    }\r\n  `)\r\n\r\n  return data.site.siteMetadata\r\n}\r\n","import * as React from 'react'\r\nimport * as styles from './style.module.scss'\r\nimport Navigation from '@components/navigation'\r\n\r\nconst NavigationLayout = ({ children }) => {\r\n  return (\r\n    <div className={styles.container}>\r\n      <Navigation />\r\n      {children}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default NavigationLayout\r\n","// extracted by mini-css-extract-plugin\nexport var container = \"style-module--container--24ac7\";","import * as React from 'react'\r\nimport type { HeadFC, PageProps } from 'gatsby'\r\nimport NavigationLayout from '@layouts/navigation-layout'\r\nimport CategoryLayout from '@layouts/category-layout'\r\nimport { allMarkdownsQuery } from '@queries/index'\r\nimport { graphql } from 'gatsby'\r\nimport PostItem from '@components/post-item'\r\n\r\nconst PostPage: React.FC<PageProps> = ({ data }) => {\r\n  return (\r\n    <NavigationLayout>\r\n      <CategoryLayout>\r\n        {data.allMarkdownRemark.nodes.map((node) => (\r\n          <PostItem key={node.id} node={node} />\r\n        ))}\r\n      </CategoryLayout>\r\n    </NavigationLayout>\r\n  )\r\n}\r\n\r\nexport const query = graphql`\r\n  query {\r\n    allMarkdownRemark(\r\n      filter: { fileAbsolutePath: { regex: \"/^(?!.*README).*posts.*$/\" } }\r\n    ) {\r\n      nodes {\r\n        id\r\n        parent {\r\n          ... on File {\r\n            id\r\n            name\r\n            relativePath\r\n          }\r\n        }\r\n        frontmatter {\r\n          title\r\n        }\r\n        excerpt\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport default PostPage\r\n\r\nexport const Head: HeadFC = () => <title>Post Page</title>\r\n"],"names":["_ref","node","id","parent","frontmatter","excerpt","name","relativePath","React","className","onClick","navigate","title","categories","CategoryName","_ref2","handleClickCategory","Link","to","activeClassName","Posts","_ref3","posts","map","post","key","selectedCategory","data","useStaticQuery","allMarkdownRemark","nodes","forEach","pathArray","split","rootCategory","foundCategory","find","category","num","newCategory","subCategories","push","parentCategory","slice","subCategory","sort","a","b","nameA","toUpperCase","nameB","useCategorizedPosts","clickedCategory","setClickedCategory","useState","console","log","styles","children","Category","navLinkText","owner","site","siteMetadata","Navigation","NavigationLayout","CategoryLayout","PostItem","Head"],"sourceRoot":""}