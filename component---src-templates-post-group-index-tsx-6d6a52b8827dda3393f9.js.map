{"version":3,"file":"component---src-templates-post-group-index-tsx-6d6a52b8827dda3393f9.js","mappings":"2IAyCA,IAnBkCA,IAAe,IAAd,KAAEC,GAAM,EACzC,MAAM,OAAEC,EAAM,YAAEC,EAAW,QAAEC,EAAO,OAAEC,GAAWJ,GAC3C,KAAEK,GAASJ,GACX,MAAEK,EAAK,UAAEC,GAAcL,GACvB,KAAEM,GAASJ,EAEjB,OACEK,EAAAA,cAACC,EAAAA,KAAI,CAACC,UAAU,kBAAkBC,GAAIJ,GACpCC,EAAAA,cAAAA,UAAAA,CAASE,UAAU,aACjBF,EAAAA,cAAAA,MAAAA,CAAKE,UAAU,mBACbF,EAAAA,cAAAA,KAAAA,CAAIE,UAAU,oBAAoBL,GAASD,GAC3CI,EAAAA,cAAAA,OAAAA,CAAME,UAAU,mBAAmBJ,IAErCE,EAAAA,cAAAA,IAAAA,CAAGE,UAAU,sBAAsBR,IAEhC,C,oCC+CX,IAzEuCJ,IAMhC,IANiC,QACtCc,EAAO,MACPC,EAAQ,EAAC,MACTC,EAAQ,CAAC,EAAC,MACVC,EAAQ,IAAI,WACZC,GAAa,GACd,EACC,MAAMC,GAAiBC,EAAAA,EAAAA,QAA6B,MA+DpD,OA7DAC,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAcH,EAAeI,QAEnC,KAAMD,aAAuBE,sBAAuB,OAEpDF,EAAYG,YAAc,GAE1B,IAAIC,EAAY,EACZC,EAAU,EACVC,EAAmB,KAGvB,MAAMC,EAAW,WACfP,EAAYN,MAAMc,YAAY,mBAAoB,GAClD,MAAMC,EAAgBjB,EAAQY,GAG9B,GAAIC,EAAUI,EAAcC,OAC1BV,EAAYG,aAAeM,EAAcJ,SAD3C,CAKA,GAAID,EAAYZ,EAAQkB,OAAS,EAI/B,OAHAN,IACAC,EAAU,OACVM,IAIF,GAAIf,EAIF,OAHAQ,EAAY,EACZC,EAAU,OACVM,IAIFX,EAAYN,MAAMc,YAAY,mBAAoB,GAClDF,GAAYM,cAAcN,EAjB1B,CAkBF,EAGMK,EAAmB,WACvBX,EAAYN,MAAMc,YAAY,mBAAoB,GAClDF,GAAYM,cAAcN,GAG1BO,YAAW,KACTb,EAAYc,UAAY,GACxBR,EAAWS,YAAYR,EAAU,IAAOd,EAAM,GAC7CE,EACL,EAMA,OAHAW,EAAWS,YAAYR,EAAU,IAAOd,GAGjC,KACLa,GAAYM,cAAcN,EAAS,CACpC,GACA,CAACd,EAASC,EAAOE,EAAOC,IAEpBR,EAAAA,cAAAA,IAAAA,CAAG4B,IAAKnB,EAAgBP,UAAU,iBAAiBI,MAAOA,GAAW,C,+HCmB9E,UA1DuEhB,IAGjE,IAHkE,YACtEuC,EAAW,KACXC,GACD,EACC,OACE9B,EAAAA,cAAC+B,EAAAA,EAAc,CAACC,gBAAiBH,EAAYjC,MAC3CI,EAAAA,cAAAA,OAAAA,CAAME,UAAU,sBACdF,EAAAA,cAAAA,MAAAA,CAAKE,UAAU,6BACbF,EAAAA,cAACiC,EAAAA,EAAa,CAAC7B,QAAS,CAACyB,EAAYjC,SAEvCI,EAAAA,cAAAA,KAAAA,CAAIE,UAAU,yBACX4B,EAAKI,kBAAkBC,MAAMC,KAAK7C,GACjCS,EAAAA,cAAAA,KAAAA,CAAIqC,IAAK9C,EAAK+C,IACZtC,EAAAA,cAACuC,EAAAA,EAAQ,CAACF,IAAK9C,EAAK+C,GAAI/C,KAAMA,SAKtCS,EAAAA,cAACwC,EAAAA,EAAQ,MACM,EAyCd,MAAMC,EAAOC,IAAA,IAAC,YACnBb,EAAW,SACXc,GACsC,SACtC3C,EAAAA,cAAC4C,EAAAA,EAAG,CACF/C,MAAOgC,EAAYjC,KACnBiD,YAAW,eAAiBhB,EAAYjC,KACxCkD,SAAUH,EAASG,UACnB,C","sources":["webpack://byongho-s-til/./src/components/post-item/index.tsx","webpack://byongho-s-til/./src/components/type-animation/index.tsx","webpack://byongho-s-til/./src/templates/post-group/index.tsx"],"sourcesContent":["import * as React from 'react'\nimport './style.scss'\nimport { Link } from 'gatsby'\n\ninterface Props {\n  node: {\n    id: string\n    excerpt: string\n    parent: {\n      name: string\n      relativePath: string\n    }\n    frontmatter: {\n      title: string\n      createdAt: string\n    }\n    fields: {\n      slug: string\n    }\n  }\n}\n\nconst PostItem: React.FC<Props> = ({ node }) => {\n  const { parent, frontmatter, excerpt, fields } = node\n  const { name } = parent\n  const { title, createdAt } = frontmatter\n  const { slug } = fields\n\n  return (\n    <Link className=\"post-item--link\" to={slug}>\n      <article className=\"post-item\">\n        <div className=\"post-item--flex\">\n          <h1 className=\"post-item__title\">{title || name}</h1>\n          <span className=\"post-item__date\">{createdAt}</span>\n        </div>\n        <p className=\"post-item__excerpt\">{excerpt}</p>\n      </article>\n    </Link>\n  )\n}\n\nexport default PostItem\n","import React, { useRef, useEffect } from 'react'\nimport './style.scss'\n\ntype Props = {\n  phrases: string[] // 순서대로 타이핑 할 문구 리스트\n  speed?: number // 타이핑 속도\n  style?: object // 인라인 스타일 객체\n  pause?: number // 한 개의 텍스트가 완성되고, 다음 텍스트가 타이핑 되기 전 대기시간\n  isInfinite?: boolean // 타이핑 무한 반복 여부\n}\n\nconst TypeAnimation: React.FC<Props> = ({\n  phrases,\n  speed = 5,\n  style = {},\n  pause = 2000, // 기본 대기 시간 2초\n  isInfinite = false,\n}) => {\n  const textElementRef = useRef<HTMLParagraphElement>(null)\n\n  useEffect(() => {\n    const textElement = textElementRef.current // 타이핑을 입력한 타겟 Element\n\n    if (!(textElement instanceof HTMLParagraphElement)) return\n\n    textElement.textContent = ''\n\n    let phraseIdx = 0 // 현재 타이핑하는 문구의 인덱스\n    let charIdx = 0 // 현재 타이핑하는 글자 인덱스\n    let interval: number = null // setInterval을 담을 변수\n\n    // 2. 타이핑 메인 함수\n    const typeText = function () {\n      textElement.style.setProperty('--cursor-opacity', 1) // 타이핑 하는 동안은 커서 깜빡이지 않도록\n      const currentPhrase = phrases[phraseIdx] // 현재 타이핑하는 문구\n\n      // 현재 문구 타이핑이 안 끝났을 경우\n      if (charIdx < currentPhrase.length) {\n        textElement.textContent += currentPhrase[charIdx++] // innerText 대신 textContent 사용해야 공백을 담을 수 있음\n        return\n      }\n      // 현재 문구가 마지막 문구가 아닐 경우\n      if (phraseIdx < phrases.length - 1) {\n        phraseIdx++ // 다음 문구로 이동\n        charIdx = 0 // 첫 번째 글자로 이동\n        retypeAfterPause()\n        return\n      }\n      // 무한 반복이 설정되어 있을 경우\n      if (isInfinite) {\n        phraseIdx = 0 // 처음 문구로 이동\n        charIdx = 0 // 첫 번재 글자로 이동\n        retypeAfterPause()\n        return\n      }\n      // 타이핑 종료\n      textElement.style.setProperty('--cursor-opacity', 0) // 타이핑 종료 후 커서 깜빡이도록\n      interval && clearInterval(interval)\n    }\n\n    // 3. 일시 정지 후, 문구 초기화한 뒤 타이핑 재시작하는 함수\n    const retypeAfterPause = function () {\n      textElement.style.setProperty('--cursor-opacity', 0) // 이리 정지하는 동안 커서 깜빡이도록\n      interval && clearInterval(interval) // 기존 setInterval 제거\n\n      // pause 이 후, setInterval 재시작\n      setTimeout(() => {\n        textElement.innerText = '' // 문구 초기화\n        interval = setInterval(typeText, 1000 / speed)\n      }, pause)\n    }\n\n    // 1. setInterval로 타이핑 시작\n    interval = setInterval(typeText, 1000 / speed)\n\n    // clear 함수\n    return () => {\n      interval && clearInterval(interval)\n    }\n  }, [phrases, speed, pause, isInfinite])\n\n  return <p ref={textElementRef} className=\"type-animation\" style={style}></p>\n}\n\nexport default TypeAnimation\n","import * as React from 'react'\nimport './style.scss'\nimport { graphql } from 'gatsby'\nimport PostItem from '@components/post-item'\nimport SEO from '@components/seo'\nimport ToTheTop from '@components/to-the-top'\nimport TypeAnimation from '@components/type-animation'\nimport CategoryLayout from '@layouts/category-layout'\nimport type { PageProps, HeadProps } from 'gatsby'\n\ntype MarkdownRemarkNode = {\n  id: string\n  excerpt: string\n  parent: {\n    id: string\n    name: string\n    relativePath: string\n  }\n  frontmatter: {\n    title: string\n    createdAt: string\n    updatedAt: string\n  }\n  fields: {\n    slug: string\n  }\n}\n\ntype DataProps = {\n  allMarkdownRemark: {\n    nodes: MarkdownRemarkNode[]\n  }\n}\n\ntype PageContextType = {\n  pagePath: string\n  postPathRegex: string\n  id: string\n  name: string\n  relativePath: string\n}\n\nconst PostGroupPage: React.FC<PageProps<DataProps, PageContextType>> = ({\n  pageContext,\n  data,\n}) => {\n  return (\n    <CategoryLayout defaultCategory={pageContext.name}>\n      <main className=\"post-group--layout\">\n        <div className=\"post-group__category-name\">\n          <TypeAnimation phrases={[pageContext.name]} />\n        </div>\n        <ul className=\"post-group__post-list\">\n          {data.allMarkdownRemark.nodes.map((node) => (\n            <li key={node.id}>\n              <PostItem key={node.id} node={node} />\n            </li>\n          ))}\n        </ul>\n      </main>\n      <ToTheTop />\n    </CategoryLayout>\n  )\n}\n\nexport const query = graphql`\n  query ($postPathRegex: String!) {\n    allMarkdownRemark(\n      filter: {\n        frontmatter: { isCompleted: { eq: true } }\n        fileAbsolutePath: { regex: $postPathRegex }\n      }\n      sort: [\n        { frontmatter: { createdAt: DESC } }\n        { frontmatter: { title: DESC } }\n      ]\n    ) {\n      nodes {\n        id\n        excerpt\n        parent {\n          ... on File {\n            id\n            name\n            relativePath\n          }\n        }\n        frontmatter {\n          title\n          createdAt\n          updatedAt\n        }\n        fields {\n          slug\n        }\n      }\n    }\n  }\n`\n\nexport default PostGroupPage\n\nexport const Head = ({\n  pageContext,\n  location,\n}: HeadProps<undefined, PageContextType>) => (\n  <SEO\n    title={pageContext.name}\n    description={`Posts about ${pageContext.name}`}\n    pathname={location.pathname}\n  />\n)\n"],"names":["_ref","node","parent","frontmatter","excerpt","fields","name","title","createdAt","slug","React","Link","className","to","phrases","speed","style","pause","isInfinite","textElementRef","useRef","useEffect","textElement","current","HTMLParagraphElement","textContent","phraseIdx","charIdx","interval","typeText","setProperty","currentPhrase","length","retypeAfterPause","clearInterval","setTimeout","innerText","setInterval","ref","pageContext","data","CategoryLayout","defaultCategory","TypeAnimation","allMarkdownRemark","nodes","map","key","id","PostItem","ToTheTop","Head","_ref2","location","SEO","description","pathname"],"sourceRoot":""}