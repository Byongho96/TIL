{"version":3,"file":"component---src-templates-post-group-index-tsx-728edf1a73cf5fb2cbfb.js","mappings":"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","sources":["webpack://byongho-s-til/./src/components/post-item/index.tsx","webpack://byongho-s-til/./src/components/post-item/style.module.scss","webpack://byongho-s-til/./src/components/category/style.module.scss","webpack://byongho-s-til/./src/utils/sortByTypes.ts","webpack://byongho-s-til/./src/components/category/index.tsx","webpack://byongho-s-til/./src/utils/cutLetters.ts","webpack://byongho-s-til/./src/hooks/use-categorized-posts.tsx","webpack://byongho-s-til/./src/layouts/category-layout/index.tsx","webpack://byongho-s-til/./src/layouts/category-layout/style.module.scss","webpack://byongho-s-til/./src/templates/post-group/index.tsx","webpack://byongho-s-til/./src/templates/post-group/style.module.scss"],"sourcesContent":["import * as React from 'react'\r\nimport { navigate } from 'gatsby'\r\nimport * as styles from './style.module.scss'\r\n\r\nconst PostItem: React.FC = ({ node }) => {\r\n  const { id, parent, frontmatter, excerpt } = node\r\n  const { name, relativePath } = parent\r\n  const { title, createdAt } = frontmatter\r\n\r\n  const handleClick = () => {\r\n    navigate(`/posts/${relativePath}`)\r\n  }\r\n\r\n  return (\r\n    <div className={styles.container} onClick={handleClick}>\r\n      <div className={styles.flex}>\r\n        <h3 className={styles.title}>{title || name}</h3>\r\n        <p className={styles.date}>{createdAt}</p>\r\n      </div>\r\n      <p className={styles.excerpt}>{excerpt}</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PostItem\r\n","// extracted by mini-css-extract-plugin\nexport var container = \"style-module--container--514a1\";\nexport var date = \"style-module--date--7e16c\";\nexport var excerpt = \"style-module--excerpt--5fd4c\";\nexport var flex = \"style-module--flex--37bbb\";\nexport var title = \"style-module--title--dce33\";","// extracted by mini-css-extract-plugin\nexport var category = \"style-module--category--d0bec\";\nexport var container = \"style-module--container--36f8e\";\nexport var post = \"style-module--post--8179a\";\nexport var selected = \"style-module--selected--dc52d\";","export function sortByName(a, b) {\r\n  const nameA = a.name.toUpperCase() // ignore upper and lowercase\r\n  const nameB = b.name.toUpperCase() // ignore upper and lowercase\r\n  if (nameA < nameB) {\r\n    return -1\r\n  }\r\n  if (nameA > nameB) {\r\n    return 1\r\n  }\r\n\r\n  // names must be equal\r\n  return 0\r\n}\r\n\r\nexport function sortByTitle(a, b) {\r\n  const titleA = a.title.toUpperCase() // ignore upper and lowercase\r\n  const titleB = b.title.toUpperCase() // ignore upper and lowercase\r\n  if (titleA < titleB) {\r\n    return -1\r\n  }\r\n  if (titleA > titleB) {\r\n    return 1\r\n  }\r\n\r\n  // names must be equal\r\n  return 0\r\n}\r\n","import React, { useState } from 'react'\r\nimport { Link, navigate } from 'gatsby'\r\nimport * as styles from './style.module.scss'\r\nimport { useCategorizedPosts } from '@hooks/use-categorized-posts'\r\nimport { cutLetters } from '@utils/cutLetters'\r\n\r\n// 최대 3단계 카테고리까지만(루트 카테고리 포함) 지원\r\n\r\nconst Category: React.FC = ({ selectedCategory = '' }) => {\r\n  const data = useCategorizedPosts()\r\n  const [clickedCategory, setClickedCategory] = useState(selectedCategory)\r\n\r\n  const handleClickCategory = (event, name) => {\r\n    if (event.detail == 1) {\r\n      event.preventDefault()\r\n    }\r\n    if (clickedCategory === name) {\r\n      setClickedCategory('')\r\n    } else {\r\n      setClickedCategory(name)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <ul className={styles.container}>\r\n      {/* 루트 카테고리 */}\r\n      {data.map((category) => (\r\n        <li key={category.name} className={styles.category}>\r\n          <CategoryName\r\n            name={category.name}\r\n            handleClickCategory={handleClickCategory}\r\n          />\r\n          <ul>\r\n            {/* 서브 카테고리 1 */}\r\n            {category.subCategories.map((subCategory) => (\r\n              <li key={subCategory.name} className={styles.category}>\r\n                <CategoryName\r\n                  name={subCategory.name}\r\n                  handleClickCategory={handleClickCategory}\r\n                />\r\n                <ul>\r\n                  {/* 서브 카테고리 2 */}\r\n                  {subCategory.subCategories.map((subCategory) => (\r\n                    <li key={subCategory.name} className={styles.category}>\r\n                      <CategoryName\r\n                        name={subCategory.name}\r\n                        handleClickCategory={handleClickCategory}\r\n                      />\r\n                      {/* 서브 카테고리 2 포스트 */}\r\n                      <Posts\r\n                        posts={subCategory.posts}\r\n                        isSelected={clickedCategory === subCategory.name}\r\n                      />\r\n                    </li>\r\n                  ))}\r\n                </ul>\r\n                {/* 서브 카테고리 1 포스트 */}\r\n                <Posts\r\n                  posts={subCategory.posts}\r\n                  isSelected={clickedCategory === subCategory.name}\r\n                />\r\n              </li>\r\n            ))}\r\n          </ul>\r\n          {/* 루트 카테고리 포스트 */}\r\n          <Posts\r\n            posts={category.posts}\r\n            isSelected={clickedCategory === category.name}\r\n          />\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  )\r\n}\r\n\r\nconst CategoryName: React.FC = ({ name, handleClickCategory }) => {\r\n  return (\r\n    <Link\r\n      to={`/posts/${name}`}\r\n      activeClassName=\"active\"\r\n      onClick={(event) => {\r\n        handleClickCategory(event, name)\r\n      }}>\r\n      {name}\r\n    </Link>\r\n  )\r\n}\r\n\r\nconst Posts: React.FC = ({ posts, isSelected }) => {\r\n  const selectedClassName = isSelected ? styles.selected : ''\r\n\r\n  return (\r\n    <ul className={styles.posts}>\r\n      {posts.map((post) => (\r\n        <li key={post.id} className={`${styles.post} ${selectedClassName} `}>\r\n          <Link to={`/posts/${post.relativePath}`} activeClassName=\"active\">\r\n            {cutLetters(post.title || post.name, 13)}\r\n          </Link>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport default Category\r\n","export function cutLetters(string, maxLetters) {\r\n  if (string.length > maxLetters) {\r\n    return string.substring(0, maxLetters) + '...'\r\n  }\r\n  return string\r\n}\r\n","import { graphql, useStaticQuery } from 'gatsby'\r\nimport { sortByName, sortByTitle } from '@utils/sortByTypes'\r\n\r\n// 'posts' 폴더의 하위 md파일이 곧 포스트임을 가정\r\n// 'posts' 폴더의 하위 디렉토리가 곧 카테고리임을 가정\r\n// 'posts' 폴더의 하위 md파일들을 디렉토리 구조(카테고리)에 따라 가공하여 반환하는 훅\r\n\r\n// 'posts' 하위 md 파일 만을 탐색\r\n// 'README' md 파일 제거\r\n\r\nexport const useCategorizedPosts = () => {\r\n  const data = useStaticQuery(graphql`\r\n    query {\r\n      allMarkdownRemark(\r\n        filter: {\r\n          frontmatter: { isCompleted: { eq: true } }\r\n          fileAbsolutePath: { regex: \"/^(?!.*README).*posts.*$/\" }\r\n        }\r\n        sort: { frontmatter: { title: ASC } }\r\n      ) {\r\n        nodes {\r\n          id\r\n          parent {\r\n            ... on File {\r\n              id\r\n              name\r\n              relativePath\r\n            }\r\n          }\r\n          frontmatter {\r\n            title\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `)\r\n\r\n  // 마크다운 파일을 디렉토리 구조에 따라 카테고리 분류\r\n  /*\r\n  type Post ={\r\n    id: string\r\n    title: string\r\n    relativePath: string\r\n  }\r\n\r\n  type Folder = {\r\n    name: string\r\n    posts: Post[]\r\n    nums: number\r\n    folders: Folder[]\r\n  }\r\n\r\n  type Category = Folder[]\r\n  */\r\n  const categories = []\r\n  data.allMarkdownRemark.nodes.forEach((node) => {\r\n    const { id, parent, frontmatter } = node\r\n    const { name, relativePath } = parent\r\n    const { title } = frontmatter\r\n    const pathArray = relativePath.split('/')\r\n\r\n    // 최상단 카테고리 분류\r\n    const rootCategory = pathArray[0]\r\n    let foundCategory = categories.find(\r\n      (category) => category.name === rootCategory\r\n    )\r\n    if (!foundCategory) {\r\n      // 최상단 카테고리가 없으면 새로 생성\r\n      const newCategory = {\r\n        name: rootCategory,\r\n        num: 1,\r\n        posts: [],\r\n        subCategories: [],\r\n      }\r\n      categories.push(newCategory)\r\n      foundCategory = newCategory\r\n    } else {\r\n      // 최상단 카테고리가 있으면 갯수만 추가\r\n      foundCategory.num += 1\r\n    }\r\n\r\n    // 서브 카테고리 분류\r\n    let parentCategory = foundCategory // 바로 위의 상대 부모 디렉토리를 기억해서 여러 depth를 처리\r\n    pathArray.slice(1, -1).forEach((subCategory) => {\r\n      let foundCategory = parentCategory.subCategories.find(\r\n        (category) => category.name === subCategory\r\n      )\r\n      if (!foundCategory) {\r\n        // 서브 카테고리가 없으면 새로 생성\r\n        const newCategory = {\r\n          name: subCategory,\r\n          num: 1,\r\n          posts: [],\r\n          subCategories: [],\r\n        }\r\n        parentCategory.subCategories.push(newCategory)\r\n        parentCategory.subCategories.sort(sortByName) // 서브 카테고리 이름 순 정렬\r\n        foundCategory = newCategory\r\n      } else {\r\n        // 서브 카테고리가 있으면 갯수만 추가\r\n        foundCategory.num += 1\r\n      }\r\n      parentCategory = foundCategory\r\n    })\r\n\r\n    // 포스트 분류\r\n    parentCategory.posts.push({ id, title, name, relativePath })\r\n  })\r\n\r\n  categories.sort(sortByName) // 최상단 카테고리 이름 순 정렬\r\n\r\n  return categories\r\n}\r\n","import * as React from 'react'\r\nimport * as styles from './style.module.scss'\r\nimport Category from '@components/category'\r\n\r\nconst CategoryLayout = ({ selectedCategory, children }) => {\r\n  return (\r\n    <div className={styles.container}>\r\n      <Category selectedCategory={selectedCategory} />\r\n      {children}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CategoryLayout\r\n","// extracted by mini-css-extract-plugin\nexport var container = \"style-module--container--16db0\";","import * as React from 'react'\r\nimport type { HeadFC, PageProps } from 'gatsby'\r\nimport NavigationLayout from '@layouts/navigation-layout'\r\nimport CategoryLayout from '@layouts/category-layout'\r\nimport { allMarkdownsQuery } from '@queries/index'\r\nimport { graphql } from 'gatsby'\r\nimport PostItem from '@components/post-item'\r\nimport * as styles from './style.module.scss'\r\n\r\nconst PostGroupPage: React.FC<PageProps> = ({ pageContext, data }) => {\r\n  return (\r\n    <CategoryLayout selectedCategory={pageContext.name}>\r\n      <div className={styles.postList}>\r\n        {data.allMarkdownRemark.nodes.map((node) => (\r\n          <PostItem key={node.id} node={node} />\r\n        ))}\r\n      </div>\r\n    </CategoryLayout>\r\n  )\r\n}\r\n\r\nexport const query = graphql`\r\n  query ($regex: String!) {\r\n    allMarkdownRemark(\r\n      filter: { fileAbsolutePath: { regex: $regex } }\r\n      sort: { frontmatter: { title: ASC } }\r\n    ) {\r\n      nodes {\r\n        id\r\n        parent {\r\n          ... on File {\r\n            id\r\n            name\r\n            relativePath\r\n          }\r\n        }\r\n        frontmatter {\r\n          title\r\n          createdAt\r\n          updatedAt\r\n          title\r\n        }\r\n        excerpt\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport default PostGroupPage\r\n\r\nexport const Head: HeadFC = () => <title>Post Group Page</title>\r\n","// extracted by mini-css-extract-plugin\nexport var postList = \"style-module--post-list--06c34\";"],"names":["_ref","node","id","parent","frontmatter","excerpt","name","relativePath","title","createdAt","React","className","onClick","navigate","selected","sortByName","a","b","nameA","toUpperCase","nameB","CategoryName","_ref2","handleClickCategory","Link","to","activeClassName","event","Posts","_ref3","posts","isSelected","selectedClassName","styles","map","post","key","string","maxLetters","length","substring","selectedCategory","data","useStaticQuery","categories","allMarkdownRemark","nodes","forEach","pathArray","split","rootCategory","foundCategory","find","category","num","newCategory","subCategories","push","parentCategory","slice","subCategory","sort","useCategorizedPosts","clickedCategory","setClickedCategory","useState","detail","preventDefault","children","Category","pageContext","CategoryLayout","PostItem","Head"],"sourceRoot":""}