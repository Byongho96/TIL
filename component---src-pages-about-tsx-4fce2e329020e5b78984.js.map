{"version":3,"file":"component---src-pages-about-tsx-4fce2e329020e5b78984.js","mappings":"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","sources":["webpack://byongho-s-til/./src/components/type-animation/index.tsx","webpack://byongho-s-til/./src/components/about-blog/index.tsx","webpack://byongho-s-til/./src/components/about-me/index.tsx","webpack://byongho-s-til/./src/components/taping/index.tsx","webpack://byongho-s-til/./src/pages/about.tsx","webpack://byongho-s-til/./src/assets/svgs/github.svg","webpack://byongho-s-til/./src/assets/svgs/gmail.svg","webpack://byongho-s-til/./src/assets/svgs/linkedin.svg"],"sourcesContent":["import React, { useRef, useEffect } from 'react'\nimport './style.scss'\n\ntype Props = {\n  phrases: string[] // 순서대로 타이핑 할 문구 리스트\n  speed?: number // 타이핑 속도\n  style?: object // 인라인 스타일 객체\n  pause?: number // 한 개의 텍스트가 완성되고, 다음 텍스트가 타이핑 되기 전 대기시간\n  isInfinite?: boolean // 타이핑 무한 반복 여부\n}\n\nconst TypeAnimation: React.FC<Props> = ({\n  phrases,\n  speed = 5,\n  style = {},\n  pause = 2000, // 기본 대기 시간 2초\n  isInfinite = false,\n}) => {\n  const textElementRef = useRef<HTMLParagraphElement>(null)\n\n  useEffect(() => {\n    const textElement = textElementRef.current // 타이핑을 입력한 타겟 Element\n\n    if (!(textElement instanceof HTMLParagraphElement)) return\n\n    textElement.textContent = ''\n\n    let phraseIdx = 0 // 현재 타이핑하는 문구의 인덱스\n    let charIdx = 0 // 현재 타이핑하는 글자 인덱스\n    let interval: number = null // setInterval을 담을 변수\n\n    // 2. 타이핑 메인 함수\n    const typeText = function () {\n      textElement.style.setProperty('--cursor-opacity', 1) // 타이핑 하는 동안은 커서 깜빡이지 않도록\n      const currentPhrase = phrases[phraseIdx] // 현재 타이핑하는 문구\n\n      // 현재 문구 타이핑이 안 끝났을 경우\n      if (charIdx < currentPhrase.length) {\n        textElement.textContent += currentPhrase[charIdx++] // innerText 대신 textContent 사용해야 공백을 담을 수 있음\n        return\n      }\n      // 현재 문구가 마지막 문구가 아닐 경우\n      if (phraseIdx < phrases.length - 1) {\n        phraseIdx++ // 다음 문구로 이동\n        charIdx = 0 // 첫 번째 글자로 이동\n        retypeAfterPause()\n        return\n      }\n      // 무한 반복이 설정되어 있을 경우\n      if (isInfinite) {\n        phraseIdx = 0 // 처음 문구로 이동\n        charIdx = 0 // 첫 번재 글자로 이동\n        retypeAfterPause()\n        return\n      }\n      // 타이핑 종료\n      textElement.style.setProperty('--cursor-opacity', 0) // 타이핑 종료 후 커서 깜빡이도록\n      interval && clearInterval(interval)\n    }\n\n    // 3. 일시 정지 후, 문구 초기화한 뒤 타이핑 재시작하는 함수\n    const retypeAfterPause = function () {\n      textElement.style.setProperty('--cursor-opacity', 0) // 이리 정지하는 동안 커서 깜빡이도록\n      interval && clearInterval(interval) // 기존 setInterval 제거\n\n      // pause 이 후, setInterval 재시작\n      setTimeout(() => {\n        textElement.innerText = '' // 문구 초기화\n        interval = setInterval(typeText, 1000 / speed)\n      }, pause)\n    }\n\n    // 1. setInterval로 타이핑 시작\n    interval = setInterval(typeText, 1000 / speed)\n\n    // clear 함수\n    return () => {\n      interval && clearInterval(interval)\n    }\n  }, [phrases, speed, pause, isInfinite])\n\n  return <p ref={textElementRef} className=\"type-animation\" style={style}></p>\n}\n\nexport default TypeAnimation\n","import React from 'react'\nimport './style.scss'\nimport TypeAnimation from '@components/type-animation'\n\nconst AboutBlog: React.FC = () => {\n  return (\n    <article className=\"about-blog\">\n      <section className=\"about-blog__header\">\n        <h1 className=\"about-blog__header__title\">About Blog</h1>\n        <a href=\"/TIL/posts/Gatsby/\" className=\"about-blog__header__typing\">\n          <p>블로그 제작 시리즈&nbsp;</p>\n          <TypeAnimation phrases={['Click Here!']} />\n        </a>\n      </section>\n      <section className=\"about-blog__content\">\n        <h2>기획 배경</h2>\n        <div>\n          <p>\n            그동안 꽤 구준히 공부한 내용을 Github에 마크다운 파일로 정리하고\n            있었습니다. <br />1 년이 지나 글이 어느 정도 쌓인 걸 보니까, 작성한\n            글로 블로그를 시작하고 싶어졌습니다.\n          </p>\n          <p>\n            마침 요즘 시간적 여유도 있던 터라 직접 웹사이트를 제작해보기로\n            했습니다. (2023. 07)\n          </p>\n        </div>\n      </section>\n      {/* <Taping color=\"black\" phrase=\"coming soon\" rotationDeg={2} /> */}\n      <section className=\"about-blog__content\">\n        <h2>쓰인 기술</h2>\n        <h3>Gatsby</h3>\n        <div>\n          <p>\n            워낙 목표에 꼭 맞는 프레임워크여서 큰 고민 없이 선택했습니다. <br />\n            공식문서의 튜토리얼 자체도 \"마크다운 파일로 블로그 만들기\"입니다.\n            <br />\n            거기에 익숙한 리액트 기반의 프레임워크라니, 마치 나를 위해 준비한\n            몰래카메라 같았습니다.\n          </p>\n          <p>\n            이번에 정적 사이트 생성기(SSG)를 접하면서, CSR과 SSR에 대한 이해도\n            함께 높아졌습니다.\n            <br />\n            뭐든지 비교 대상이 있을 때, 개념이 더 구체화 되는 것 같습니다.\n          </p>\n        </div>\n        <h3>GraphQL</h3>\n        <div>\n          <p>\n            Gatsby를 선택하니 GraphQL이라는게 자매상품처럼 따라왔습니다.\n            <br />몇 번 소문을 들어, 정체가 궁금했던 녀석이라 기꺼운 마음으로\n            받아들였습니다.\n          </p>\n          <p>\n            기존 API 시스템과 비교할 때 GraphQL은 정말 특이했습니다.\n            <br />\n            Gatsby의 파일시스템 플러그인과 결합하여 손수 API를 설계하지 않고도\n            필요한 정보를 골라 받을 수 있다는 것은 신기했습니다.\n            <br />\n            근데 골라 받을 수는 있을 뿐, 원하는 형식으로 받을 수는 없어서\n            귀찮았습니다.\n          </p>\n          <p>\n            프론트보다 기존 백엔드 프레임워크에 GraphQL을 어떻게 적용하는 지가\n            더 궁금해졌습니다. <br />\n            나중에 녀석이 더 유명해지면 뒤늦게 공부해 볼 생각입니다.\n          </p>\n        </div>\n        <h3>Sass</h3>\n        <div>\n          <p>CSS 스타일링으로는 Sass를 선택했습니다.</p>\n          <p>\n            순수 CSS에 가장 가까운 언어로 자유롭게 개발할 수 있다는 점이 Sass의\n            매력인 것 같습니다.\n            <br />\n            CSS 변수와 JavaScript를 같이 활용해서, 순수 CSS로도 충분히 사용자와\n            상호작용한 웹사이트를 만들고지 했습니다.\n          </p>\n        </div>\n      </section>\n      {/* <Taping color=\"white\" phrase=\"coming soon\" rotationDeg={5} /> */}\n      <section className=\"about-blog__content\">\n        <h2>블로그 특징</h2>\n        <h3>전형적인 UI</h3>\n        <div>\n          <p>\n            \"전형적이다\"라는 것은 \"익숙하다\"라는 의미이기도 합니다.\n            <br />\n            3단 메뉴 형식의 네비게이션 바를 가진 웹페이지는 아주 익숙합니다.\n            <br />\n            때문에 처음 들어 온 누구라도, 내 집 마냥 자연스럽게 사이트를 탐색할\n            수 있습니다.\n          </p>\n          <p>\n            또, 기술적인 측면에서 \"전형적\"이라는 것은 \"기본적\"임을 내포합니다.\n            <br />\n            근데 생각해보니 그 기본적인 UI를 직접 제대로 구현한 적이 없었습니다.\n            <br />\n            기기 사이즈에 따라 동적으로 반응하는, 전형적인 UI를 구현하는 것이\n            목표였습니다.\n          </p>\n        </div>\n        <h3>선택 가능한 메인 컬러</h3>\n        <div>\n          <p>\n            이 웹사이트는 사용자가 메인컬러를 직접 선택 할 수 있습니다.\n            <br />\n            상단 네비게이션 바의 작은 정사각형을 눌러 메인 컬러를 선택할 수\n            있습니다.\n          </p>\n          <p>\n            사용자가 메인 컬러를 선택함으로써 웹사이트에 친밀감을 느끼고\n            <br />\n            그에 따른 지속적인 재방문이 웹사이트 수익창출로 이어질 것이라고 입을\n            털 수 있을 것 같습니다.\n          </p>\n        </div>\n        <h3>다크 모드</h3>\n        <div>\n          <p>기능 자체보다는 고민했던 UX적인 흐름을 공유하고 싶습니다</p>\n          <p>\n            <ol>\n              <li>\n                사용자의 prefers-color-scheme에 따라 초기 모드가 정해집니다.\n              </li>\n              <li>\n                이후 사용자가 모드를 바꾸면, 이를 세션스토리지에 저장합니다.\n              </li>\n              <li>현재 세션에 있는 동안에는 선택된 모드가 유지됩니다.</li>\n              <li>\n                재방문 시에는 다시 prefers-color-scheme에 따라 초기 모드가\n                정해집니다.\n              </li>\n            </ol>\n          </p>\n        </div>\n        <h3>검색 기능</h3>\n        <div>\n          <p>\n            fuse.js를 기반으로 만들어진 gatsby-plugin-fusejs를 이용해서\n            구현했습니다.\n          </p>\n          <p>\n            해당 플러그인은 주입한 컨텐츠로 index 트리를 만들어 동작한다는데,\n            <br />\n            솔직히 구체적인 동작 원리까지는 알지 못합니다.\n            <br /> 아무튼 빠르고 fuzzy한 검색(비슷한 단어까지 매칭)이 가능하다고\n            합니다.\n          </p>\n          <p>\n            원래 단순히 반복문과 String.indexOf()연산으로 구현할 계획이었는데{' '}\n            <br />\n            만약 그랬다면 시간, 효율, 결과 모든 것을 놓칠 뻔했습니다 <br />\n            적절하게 라이브러리를 잘 활용하는 것도 능력임을 다시 한 번 마음 속에\n            되새깁니다.\n          </p>\n        </div>\n        <h3>댓글 및 좋아요</h3>\n        <div>\n          <p>\n            giscus라는 오픈 소스를 이용해서 구현했습니다.\n            <br />\n            github API를 기반으로 만들어진 사용하기 아주 간편한 오픈 소스입니다.\n          </p>\n          <p>\n            서버가 없어서 당연히 댓글 기능 같은 건 구현 못할 줄 알았습니다.\n            <br />\n            그런데 개발자들은 어떻게든 늘 방법을 찾아내고야 마는 것 같습니다.\n            <br />\n            멋진 오픈소스들이 있다는 것에 감사하며, 나중에는 저도 유용한\n            오픈소스를 만들어보고 싶습니다.\n          </p>\n        </div>\n      </section>\n      {/* <Taping color=\"white\" phrase=\"coming soon\" rotationDeg={5} /> */}\n      {/* <Taping\n        color=\"black\"\n        phrase=\"coming soon\"\n        rotationDeg={-7}\n        direction=\"left\"\n      /> */}\n      <section className=\"about-blog__content\">\n        <h2>개발 후기</h2>\n        <div>\n          <p>\n            가벼운 마음으로 시작했는데 하다 보니 무거워졌습니다.\n            <br />\n            그만큼 배운 것도 많은 프로젝트였습니다.\n            <br />\n            앞서 말한 내용 외에도 SEO 관련한 rss.xml, sitemap.xml, html 메타\n            태그 등에 대해 학습했고\n            <br />\n            개인 프로젝트를 초기설정하며 아이러니하게도 eslint, prettier, husky\n            와 같은 협업 툴에 대한 이해가 높아졌습니다.\n          </p>\n          <p>\n            매 프로젝트가 끝날 때마다, '이제 좀 잘하는 듯'하고 자부하고\n            <br />\n            매 프로젝트를 시작할 때마다, 그러한 자부심이 처참히 부서트리길\n            반복합니다.\n            <br />\n            어서 빨리 취직하여 이제는 돈 받으며 이 사이클을 돌고 싶습니다.\n          </p>\n        </div>\n      </section>\n    </article>\n  )\n}\n\nexport default AboutBlog\n","import React, { useContext } from 'react'\nimport './style.scss'\nimport GithubIcon from '@assets/svgs/github.svg'\nimport GmailIcon from '@assets/svgs/gmail.svg'\nimport LinkedinIcon from '@assets/svgs/linkedin.svg'\nimport ProfileImage from '@components/profile-image'\nimport TypeAnimation from '@components/type-animation'\nimport { ThemeContext } from '@contexts/theme-context'\n\nconst AboutMe: React.FC = () => {\n  const { theme } = useContext(ThemeContext)\n\n  return (\n    <article className=\"about-me\">\n      <h1 className=\"about-me__title\">About Me</h1>\n      <div className=\"about-me__content\">\n        <div className=\"about-me__content__image\">\n          <ProfileImage />\n          <nav className=\"about-me__content__image__links\">\n            <a href=\"https://github.com/Byongho96/\">\n              <GithubIcon />\n            </a>\n            <a href=\"https://www.linkedin.com/in/byongho-lee-b445ba22a\">\n              <LinkedinIcon />\n            </a>\n            <a href=\"mailto:unlike96@gmail.com\">\n              <GmailIcon />\n            </a>\n          </nav>\n        </div>\n        <div className=\"about-me__content__typing\">\n          <TypeAnimation phrases={['공부하는 개발자 이병호입니다']} />\n        </div>\n        <div className=\"about-me__content__writing\">\n          <p>\n            건축공학과 전기전자공학을 이중전공한 뒤, 지금은 개발자로서의\n            커리어를 준비하고 있습니다.\n          </p>\n          <p>\n            컴퓨터와 인터넷만 있으면, 내 생각을 가시화해서 모든 사람들에게\n            보여줄 수 있다는 점에서 개발은 매력적입니다.\n          </p>\n          <p>\n            생각한 것을 온전하게 구현하기 위해서 공부하고 생각합니다. 그리고 그\n            내용을 정리하고자 TIL 블로그를 만들었습니다.\n          </p>\n        </div>\n      </div>\n    </article>\n  )\n}\n\nexport default AboutMe\n","import React, { useEffect, useRef } from 'react'\nimport './style.scss'\n\ntype props = {\n  color: 'black' | 'white'\n  phrase: string\n  direction?: 'right' | 'left'\n  rotationDeg?: number\n  speed?: number\n}\n\nconst Taping: React.FC = ({\n  color,\n  phrase,\n  direction = 'right',\n  rotationDeg = 0,\n  speed = 1,\n}: props) => {\n  const tapeRef = useRef<HTMLDivElement>(null)\n  const textRef = useRef<HTMLSpanElement>(null)\n  const position = useRef(0)\n\n  useEffect(() => {\n    const tapeElement = tapeRef.current\n    const textElement = textRef.current\n\n    if (\n      !(tapeElement instanceof HTMLDivElement) ||\n      !(textElement instanceof HTMLSpanElement)\n    )\n      return\n\n    // 텍스트가 흐르는 방향을 설정\n    let textDirection = 1\n    if (direction === 'right') {\n      tapeElement.style.justifyContent = 'flex-end'\n    } else {\n      tapeElement.style.justifyContent = 'flex-start'\n      textDirection = -1\n    }\n\n    // 테이프 각도 회전\n    tapeElement.style.setProperty('--rotate-deg', `${rotationDeg}deg`)\n\n    // 텍스트를 이동 시키는 함수\n    const moveText = () => {\n      position.current += speed\n      if (position.current > textElement.scrollWidth / 2) {\n        textElement.style.transform = `translateX(0)`\n        position.current = 0\n      }\n      textElement.style.transform = `translateX(${\n        textDirection * position.current\n      }px)`\n    }\n\n    let animationId: number = null\n    // 애니메이션 실행 함수\n    const animate = () => {\n      moveText()\n      animationId = window.requestAnimationFrame(animate) // 희한하게 정의되기 전에 쓰네?\n    }\n\n    // 애니메이션 실행\n    animate()\n\n    return () => {\n      // 애니메이션 clear\n      window.cancelAnimationFrame(animationId)\n    }\n  }, [speed, direction, rotationDeg])\n\n  return (\n    <div ref={tapeRef} className={`tape ${color}`}>\n      <span ref={textRef} className=\"tape__text\">\n        {(phrase + '\\u00a0\\u00a0\\u00a0\\u00a0').repeat(20)}\n      </span>\n    </div>\n  )\n}\n\nexport default Taping\n","import * as React from 'react'\nimport './about.scss'\nimport AboutBlog from '@components/about-blog'\nimport AboutMe from '@components/about-me'\nimport SEO from '@components/seo'\nimport Taping from '@components/taping'\nimport type { PageProps } from 'gatsby'\n\nconst AboutPage: React.FC<PageProps> = () => {\n  return (\n    <div className=\"about--layout\">\n      <div className=\"about__article\">\n        <AboutMe />\n      </div>\n      <Taping\n        color=\"white\"\n        phrase=\"Chicken Pizza Burger\"\n        rotationDeg={5}\n        direction=\"right\"\n      />\n      <Taping\n        color=\"black\"\n        phrase=\"Lorem Ipsum\"\n        rotationDeg={-9}\n        direction=\"left\"\n      />\n      <div className=\"about__article\">\n        <AboutBlog />\n      </div>\n      <Taping\n        color=\"white\"\n        phrase=\"I never make the same mistake twice\"\n        rotationDeg={6}\n        direction=\"right\"\n      />\n    </div>\n  )\n}\n\nexport default AboutPage\n\nexport const Head = () => <SEO title=\"TIL About Page\" pathname=\"/about\" />\n","var React = require('react');\n\nfunction Github (props) {\n    return React.createElement(\"svg\",props,React.createElement(\"path\",{\"d\":\"M10 0C8.68678 0 7.38642 0.258658 6.17317 0.761205C4.95991 1.26375 3.85752 2.00035 2.92893 2.92893C1.05357 4.8043 0 7.34784 0 10C0 14.42 2.87 18.17 6.84 19.5C7.34 19.58 7.5 19.27 7.5 19V17.31C4.73 17.91 4.14 15.97 4.14 15.97C3.68 14.81 3.03 14.5 3.03 14.5C2.12 13.88 3.1 13.9 3.1 13.9C4.1 13.97 4.63 14.93 4.63 14.93C5.5 16.45 6.97 16 7.54 15.76C7.63 15.11 7.89 14.67 8.17 14.42C5.95 14.17 3.62 13.31 3.62 9.5C3.62 8.39 4 7.5 4.65 6.79C4.55 6.54 4.2 5.5 4.75 4.15C4.75 4.15 5.59 3.88 7.5 5.17C8.29 4.95 9.15 4.84 10 4.84C10.85 4.84 11.71 4.95 12.5 5.17C14.41 3.88 15.25 4.15 15.25 4.15C15.8 5.5 15.45 6.54 15.35 6.79C16 7.5 16.38 8.39 16.38 9.5C16.38 13.32 14.04 14.16 11.81 14.41C12.17 14.72 12.5 15.33 12.5 16.26V19C12.5 19.27 12.66 19.59 13.17 19.5C17.14 18.16 20 14.42 20 10C20 8.68678 19.7413 7.38642 19.2388 6.17317C18.7362 4.95991 17.9997 3.85752 17.0711 2.92893C16.1425 2.00035 15.0401 1.26375 13.8268 0.761205C12.6136 0.258658 11.3132 0 10 0Z\",\"fill\":\"black\"}));\n}\n\nGithub.defaultProps = {\"width\":\"20\",\"height\":\"20\",\"viewBox\":\"0 0 20 20\",\"fill\":\"none\"};\n\nmodule.exports = Github;\n\nGithub.default = Github;\n","var React = require('react');\n\nfunction Gmail (props) {\n    return React.createElement(\"svg\",props,React.createElement(\"path\",{\"d\":\"M24 3.45709V17.3661C24 18.2701 23.268 19.0021 22.364 19.0021H18.545V9.73009L12 14.6401L5.455 9.73009V19.0031H1.636C1.42107 19.0031 1.20825 18.9607 1.0097 18.8785C0.811145 18.7962 0.63075 18.6756 0.47882 18.5236C0.32689 18.3715 0.206404 18.1911 0.124246 17.9925C0.0420884 17.7939 -0.000131068 17.581 3.05652e-07 17.3661V3.45709C3.05652e-07 1.43409 2.309 0.27909 3.927 1.49309L5.455 2.64009L12 7.54809L18.545 2.63809L20.073 1.49309C21.69 0.280089 24 1.43409 24 3.45709Z\",\"fill\":\"black\"}));\n}\n\nGmail.defaultProps = {\"width\":\"24\",\"height\":\"20\",\"viewBox\":\"0 0 24 20\",\"fill\":\"none\"};\n\nmodule.exports = Gmail;\n\nGmail.default = Gmail;\n","var React = require('react');\n\nfunction Linkedin (props) {\n    return React.createElement(\"svg\",props,React.createElement(\"path\",{\"d\":\"M16 0C16.5304 0 17.0391 0.210714 17.4142 0.585786C17.7893 0.960859 18 1.46957 18 2V16C18 16.5304 17.7893 17.0391 17.4142 17.4142C17.0391 17.7893 16.5304 18 16 18H2C1.46957 18 0.960859 17.7893 0.585786 17.4142C0.210714 17.0391 0 16.5304 0 16V2C0 1.46957 0.210714 0.960859 0.585786 0.585786C0.960859 0.210714 1.46957 0 2 0H16ZM15.5 15.5V10.2C15.5 9.33539 15.1565 8.5062 14.5452 7.89483C13.9338 7.28346 13.1046 6.94 12.24 6.94C11.39 6.94 10.4 7.46 9.92 8.24V7.13H7.13V15.5H9.92V10.57C9.92 9.8 10.54 9.17 11.31 9.17C11.6813 9.17 12.0374 9.3175 12.2999 9.58005C12.5625 9.8426 12.71 10.1987 12.71 10.57V15.5H15.5ZM3.88 5.56C4.32556 5.56 4.75288 5.383 5.06794 5.06794C5.383 4.75288 5.56 4.32556 5.56 3.88C5.56 2.95 4.81 2.19 3.88 2.19C3.43178 2.19 3.00193 2.36805 2.68499 2.68499C2.36805 3.00193 2.19 3.43178 2.19 3.88C2.19 4.81 2.95 5.56 3.88 5.56ZM5.27 15.5V7.13H2.5V15.5H5.27Z\",\"fill\":\"black\"}));\n}\n\nLinkedin.defaultProps = {\"width\":\"18\",\"height\":\"18\",\"viewBox\":\"0 0 18 18\",\"fill\":\"none\"};\n\nmodule.exports = Linkedin;\n\nLinkedin.default = Linkedin;\n"],"names":["_ref","phrases","speed","style","pause","isInfinite","textElementRef","useRef","useEffect","textElement","current","HTMLParagraphElement","textContent","phraseIdx","charIdx","interval","typeText","setProperty","currentPhrase","length","retypeAfterPause","clearInterval","setTimeout","innerText","setInterval","React","ref","className","AboutBlog","href","TypeAnimation","AboutMe","theme","useContext","ThemeContext","ProfileImage","GithubIcon","LinkedinIcon","GmailIcon","color","phrase","direction","rotationDeg","tapeRef","textRef","position","tapeElement","HTMLDivElement","HTMLSpanElement","textDirection","justifyContent","animationId","animate","scrollWidth","transform","window","requestAnimationFrame","cancelAnimationFrame","repeat","AboutPage","Taping","Head","SEO","title","pathname","Github","props","createElement","defaultProps","module","exports","default","Gmail","Linkedin"],"sourceRoot":""}