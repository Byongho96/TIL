{"version":3,"file":"component---src-pages-posts-tsx-f2554f617b48cde9423b.js","mappings":"2KAwBA,MApB2BA,IAAe,IAAd,KAAEC,GAAM,EAClC,MAAM,GAAEC,EAAE,OAAEC,EAAM,YAAEC,EAAW,QAAEC,GAAYJ,GACvC,KAAEK,EAAI,aAAEC,GAAiBJ,GACzB,MAAEK,EAAK,UAAEC,GAAcL,EAM7B,OACEM,EAAAA,cAAAA,MAAAA,CAAKC,UCbc,iCDaeC,QALhB,MAClBC,EAAAA,EAAAA,UAAS,UAAUN,EAAe,GAKhCG,EAAAA,cAAAA,MAAAA,CAAKC,UCXO,6BDYVD,EAAAA,cAAAA,KAAAA,CAAIC,UCXO,8BDWmBH,GAASF,GACvCI,EAAAA,cAAAA,IAAAA,CAAGC,UCfO,6BDekBF,IAE9BC,EAAAA,cAAAA,IAAAA,CAAGC,UChBY,gCDgBgBN,GAC3B,C,qEEkDV,MA3DgCL,IAKzB,IAL0B,QAC/Bc,EAAO,MACPC,EAAK,MACLC,EAAQ,IAAI,WACZC,GAAa,GACd,EACC,MAAMC,GAAYC,EAAAA,EAAAA,QAAO,MAkDzB,OAhDAC,EAAAA,EAAAA,YAAU,KACR,IAAIC,EAAY,EACZC,EAAY,EAChB,MAAMC,EAAcL,EAAUM,QAExBC,EAAS,KACb,IAAIC,EAASZ,EAAQO,GAErB,KAAIC,EAAYI,EAAOC,QAMvB,OAAIN,EAAYP,EAAQa,OAAS,GAC/BL,EAAY,EACZD,SACAO,EAAYZ,IAKVC,GACFK,EAAY,EACZD,EAAY,OACZO,EAAYZ,SAKda,cAAcC,GArBZP,EAAYQ,aAAeL,EAAOJ,IAqBb,EAInBM,EAAeZ,IACnBa,cAAcC,GACdE,YAAW,KACTT,EAAYQ,YAAc,GAC1BD,EAAWG,YAAYR,EAAQ,IAAOV,EAAM,GAC3CC,EAAM,EAGX,IAAIc,EAAWG,YAAYR,EAAQ,IAAOV,GAE1C,MAAO,KACLc,cAAcC,EAAS,CACxB,GACA,IACIpB,EAAAA,cAAAA,OAAAA,CAAMwB,IAAKhB,EAAWP,UCjEX,+BDiE4C,C,oJENhE,MAlDsCX,IAAc,IAAb,KAAEmC,GAAM,EAC7C,OACEzB,EAAAA,cAAC0B,EAAAA,EAAc,KACb1B,EAAAA,cAAAA,MAAAA,CAAKC,UCbY,kCDcfD,EAAAA,cAAAA,KAAAA,CAAIC,UCbW,mCDcbD,EAAAA,cAAC2B,EAAAA,EAAM,CAACvB,QAAS,CAAC,iBAAkBC,MAAM,OAE5CL,EAAAA,cAAAA,MAAAA,CAAKC,UCfS,kCDgBXwB,EAAKG,kBAAkBC,MAAMC,KAAKvC,GACjCS,EAAAA,cAAC+B,EAAAA,EAAQ,CAACC,IAAKzC,EAAKC,GAAID,KAAMA,QAIpCS,EAAAA,cAACiC,EAAAA,EAAQ,MACM,EAsCd,MAAMC,EAAe,IAAMlC,EAAAA,cAAAA,QAAAA,KAAO,Y","sources":["webpack://byongho-s-til/./src/components/post-item/index.tsx","webpack://byongho-s-til/./src/components/post-item/style.module.scss","webpack://byongho-s-til/./src/components/typing/index.tsx","webpack://byongho-s-til/./src/components/typing/style.module.scss","webpack://byongho-s-til/./src/pages/posts.tsx","webpack://byongho-s-til/./src/pages/posts.module.scss"],"sourcesContent":["import * as React from 'react'\nimport { navigate } from 'gatsby'\nimport * as styles from './style.module.scss'\n\nconst PostItem: React.FC = ({ node }) => {\n  const { id, parent, frontmatter, excerpt } = node\n  const { name, relativePath } = parent\n  const { title, createdAt } = frontmatter\n\n  const handleClick = () => {\n    navigate(`/posts/${relativePath}`)\n  }\n\n  return (\n    <div className={styles.container} onClick={handleClick}>\n      <div className={styles.flex}>\n        <h3 className={styles.title}>{title || name}</h3>\n        <p className={styles.date}>{createdAt}</p>\n      </div>\n      <p className={styles.excerpt}>{excerpt}</p>\n    </div>\n  )\n}\n\nexport default PostItem\n","// extracted by mini-css-extract-plugin\nexport var container = \"style-module--container--514a1\";\nexport var date = \"style-module--date--7e16c\";\nexport var excerpt = \"style-module--excerpt--5fd4c\";\nexport var flex = \"style-module--flex--37bbb\";\nexport var title = \"style-module--title--dce33\";","import React, { useEffect, useRef } from 'react'\nimport * as styles from './style.module.scss'\nimport UpIcon from '@assets/svgs/up.svg'\n\ntype Props = {\n  phrases: string[]\n  speed: number\n  pause?: number\n  isInfinite?: boolean\n}\n\nconst Typing: React.FC<Props> = ({\n  phrases,\n  speed,\n  pause = 2000,\n  isInfinite = false,\n}) => {\n  const typingRef = useRef(null)\n\n  useEffect(() => {\n    let phraseIdx = 0\n    let stringIdx = 0\n    const textElement = typingRef.current\n\n    const typing = () => {\n      let phrase = phrases[phraseIdx]\n      // 1. 문자가 아직 끝나지 않은 경우\n      if (stringIdx < phrase.length) {\n        textElement.textContent += phrase[stringIdx++]\n        return\n      }\n\n      // 2. 끝난 현재 문구가 마지막 문구가 아닌 경우\n      if (phraseIdx < phrases.length - 1) {\n        stringIdx = 0\n        phraseIdx++\n        retypeAfter(pause)\n        return\n      }\n\n      // 3. 마지막 문구인데 무한 반복인 경우\n      if (isInfinite) {\n        stringIdx = 0\n        phraseIdx = 0\n        retypeAfter(pause)\n        return\n      }\n\n      // 4.종료\n      clearInterval(interval)\n    }\n\n    // 다시 타이핑하는 함수\n    const retypeAfter = (pause) => {\n      clearInterval(interval)\n      setTimeout(() => {\n        textElement.textContent = ''\n        interval = setInterval(typing, 1000 / speed)\n      }, pause)\n    }\n\n    let interval = setInterval(typing, 1000 / speed)\n\n    return () => {\n      clearInterval(interval)\n    }\n  }, [])\n  return <span ref={typingRef} className={styles.typing}></span>\n}\n\nexport default Typing\n","// extracted by mini-css-extract-plugin\nexport var blink = \"style-module--blink--38e4a\";\nexport var typing = \"style-module--typing--4294b\";","import * as React from 'react'\nimport type { HeadFC, PageProps } from 'gatsby'\nimport NavigationLayout from '@layouts/navigation-layout'\nimport CategoryLayout from '@layouts/category-layout'\nimport { allMarkdownsQuery } from '@queries/index'\nimport { graphql } from 'gatsby'\nimport PostItem from '@components/post-item'\nimport * as styles from './posts.module.scss'\nimport ToTheTop from '@components/to-the-top'\nimport Typing from '@components/typing'\n\nconst PostPage: React.FC<PageProps> = ({ data }) => {\n  return (\n    <CategoryLayout>\n      <div className={styles.container}>\n        <h1 className={styles.postGroup}>\n          <Typing phrases={['All the Posts']} speed=\"8\" />\n        </h1>\n        <div className={styles.postList}>\n          {data.allMarkdownRemark.nodes.map((node) => (\n            <PostItem key={node.id} node={node} />\n          ))}\n        </div>\n      </div>\n      <ToTheTop />\n    </CategoryLayout>\n  )\n}\n{\n  /* <h1 id='typing' className={styles.postGroup}>All the Posts</h1> */\n}\n\nexport const query = graphql`\n  query {\n    allMarkdownRemark(\n      filter: {\n        frontmatter: { isCompleted: { eq: true } }\n        fileAbsolutePath: { regex: \"/^(?!.*README).*posts.*$/\" }\n      }\n      sort: { frontmatter: { title: ASC } }\n    ) {\n      nodes {\n        id\n        parent {\n          ... on File {\n            id\n            name\n            relativePath\n          }\n        }\n        frontmatter {\n          title\n          createdAt\n          updatedAt\n        }\n        excerpt\n      }\n    }\n  }\n`\n\nexport default PostPage\n\nexport const Head: HeadFC = () => <title>Post Page</title>\n","// extracted by mini-css-extract-plugin\nexport var container = \"posts-module--container--db763\";\nexport var postGroup = \"posts-module--post-group--6038b\";\nexport var postList = \"posts-module--post-list--656a8\";"],"names":["_ref","node","id","parent","frontmatter","excerpt","name","relativePath","title","createdAt","React","className","onClick","navigate","phrases","speed","pause","isInfinite","typingRef","useRef","useEffect","phraseIdx","stringIdx","textElement","current","typing","phrase","length","retypeAfter","clearInterval","interval","textContent","setTimeout","setInterval","ref","data","CategoryLayout","Typing","allMarkdownRemark","nodes","map","PostItem","key","ToTheTop","Head"],"sourceRoot":""}