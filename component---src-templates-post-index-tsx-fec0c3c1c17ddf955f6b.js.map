{"version":3,"file":"component---src-templates-post-index-tsx-fec0c3c1c17ddf955f6b.js","mappings":"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","sources":["webpack://byongho-s-til/./src/components/category/style.module.scss","webpack://byongho-s-til/./src/utils/sortByTypes.ts","webpack://byongho-s-til/./src/components/category/index.tsx","webpack://byongho-s-til/./src/utils/cutLetters.ts","webpack://byongho-s-til/./src/hooks/use-categorized-posts.tsx","webpack://byongho-s-til/./src/layouts/category-layout/index.tsx","webpack://byongho-s-til/./src/layouts/category-layout/style.module.scss","webpack://byongho-s-til/./src/components/table-content/style.module.scss","webpack://byongho-s-til/./src/components/table-content/index.tsx","webpack://byongho-s-til/./src/components/post-header/index.tsx","webpack://byongho-s-til/./src/components/post-header/style.module.scss","webpack://byongho-s-til/./src/templates/post/style.module.scss","webpack://byongho-s-til/./src/templates/post/index.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport var category = \"style-module--category--d0bec\";\nexport var container = \"style-module--container--36f8e\";\nexport var post = \"style-module--post--8179a\";\nexport var selected = \"style-module--selected--dc52d\";","export function sortByName(a, b) {\r\n  const nameA = a.name.toUpperCase() // ignore upper and lowercase\r\n  const nameB = b.name.toUpperCase() // ignore upper and lowercase\r\n  if (nameA < nameB) {\r\n    return -1\r\n  }\r\n  if (nameA > nameB) {\r\n    return 1\r\n  }\r\n\r\n  // names must be equal\r\n  return 0\r\n}\r\n\r\nexport function sortByTitle(a, b) {\r\n  const titleA = a.title.toUpperCase() // ignore upper and lowercase\r\n  const titleB = b.title.toUpperCase() // ignore upper and lowercase\r\n  if (titleA < titleB) {\r\n    return -1\r\n  }\r\n  if (titleA > titleB) {\r\n    return 1\r\n  }\r\n\r\n  // names must be equal\r\n  return 0\r\n}\r\n","import React, { useState } from 'react'\r\nimport { Link, navigate } from 'gatsby'\r\nimport * as styles from './style.module.scss'\r\nimport { useCategorizedPosts } from '@hooks/use-categorized-posts'\r\nimport { cutLetters } from '@utils/cutLetters'\r\n\r\n// 최대 3단계 카테고리까지만(루트 카테고리 포함) 지원\r\n\r\nconst Category: React.FC = ({ selectedCategory = '' }) => {\r\n  const data = useCategorizedPosts()\r\n  const [clickedCategory, setClickedCategory] = useState(selectedCategory)\r\n\r\n  const handleClickCategory = (event, name) => {\r\n    if (event.detail == 1) {\r\n      event.preventDefault()\r\n    }\r\n    if (clickedCategory === name) {\r\n      setClickedCategory('')\r\n    } else {\r\n      setClickedCategory(name)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <ul className={styles.container}>\r\n      {/* 루트 카테고리 */}\r\n      {data.map((category) => (\r\n        <li key={category.name} className={styles.category}>\r\n          <CategoryName\r\n            name={category.name}\r\n            handleClickCategory={handleClickCategory}\r\n          />\r\n          <ul>\r\n            {/* 서브 카테고리 1 */}\r\n            {category.subCategories.map((subCategory) => (\r\n              <li key={subCategory.name} className={styles.category}>\r\n                <CategoryName\r\n                  name={subCategory.name}\r\n                  handleClickCategory={handleClickCategory}\r\n                />\r\n                <ul>\r\n                  {/* 서브 카테고리 2 */}\r\n                  {subCategory.subCategories.map((subCategory) => (\r\n                    <li key={subCategory.name} className={styles.category}>\r\n                      <CategoryName\r\n                        name={subCategory.name}\r\n                        handleClickCategory={handleClickCategory}\r\n                      />\r\n                      {/* 서브 카테고리 2 포스트 */}\r\n                      <Posts\r\n                        posts={subCategory.posts}\r\n                        isSelected={clickedCategory === subCategory.name}\r\n                      />\r\n                    </li>\r\n                  ))}\r\n                </ul>\r\n                {/* 서브 카테고리 1 포스트 */}\r\n                <Posts\r\n                  posts={subCategory.posts}\r\n                  isSelected={clickedCategory === subCategory.name}\r\n                />\r\n              </li>\r\n            ))}\r\n          </ul>\r\n          {/* 루트 카테고리 포스트 */}\r\n          <Posts\r\n            posts={category.posts}\r\n            isSelected={clickedCategory === category.name}\r\n          />\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  )\r\n}\r\n\r\nconst CategoryName: React.FC = ({ name, handleClickCategory }) => {\r\n  return (\r\n    <Link\r\n      to={`/posts/${name}`}\r\n      activeClassName=\"active\"\r\n      onClick={(event) => {\r\n        handleClickCategory(event, name)\r\n      }}>\r\n      {name}\r\n    </Link>\r\n  )\r\n}\r\n\r\nconst Posts: React.FC = ({ posts, isSelected }) => {\r\n  const selectedClassName = isSelected ? styles.selected : ''\r\n\r\n  return (\r\n    <ul className={styles.posts}>\r\n      {posts.map((post) => (\r\n        <li key={post.id} className={`${styles.post} ${selectedClassName} `}>\r\n          <Link to={`/posts/${post.relativePath}`} activeClassName=\"active\">\r\n            {cutLetters(post.title || post.name, 13)}\r\n          </Link>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport default Category\r\n","export function cutLetters(string, maxLetters) {\r\n  if (string.length > maxLetters) {\r\n    return string.substring(0, maxLetters) + '...'\r\n  }\r\n  return string\r\n}\r\n","import { graphql, useStaticQuery } from 'gatsby'\r\nimport { sortByName, sortByTitle } from '@utils/sortByTypes'\r\n\r\n// 'posts' 폴더의 하위 md파일이 곧 포스트임을 가정\r\n// 'posts' 폴더의 하위 디렉토리가 곧 카테고리임을 가정\r\n// 'posts' 폴더의 하위 md파일들을 디렉토리 구조(카테고리)에 따라 가공하여 반환하는 훅\r\n\r\n// 'posts' 하위 md 파일 만을 탐색\r\n// 'README' md 파일 제거\r\n\r\nexport const useCategorizedPosts = () => {\r\n  const data = useStaticQuery(graphql`\r\n    query {\r\n      allMarkdownRemark(\r\n        filter: {\r\n          frontmatter: { isCompleted: { eq: true } }\r\n          fileAbsolutePath: { regex: \"/^(?!.*README).*posts.*$/\" }\r\n        }\r\n        sort: { frontmatter: { title: ASC } }\r\n      ) {\r\n        nodes {\r\n          id\r\n          parent {\r\n            ... on File {\r\n              id\r\n              name\r\n              relativePath\r\n            }\r\n          }\r\n          frontmatter {\r\n            title\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `)\r\n\r\n  // 마크다운 파일을 디렉토리 구조에 따라 카테고리 분류\r\n  /*\r\n  type Post ={\r\n    id: string\r\n    title: string\r\n    relativePath: string\r\n  }\r\n\r\n  type Folder = {\r\n    name: string\r\n    posts: Post[]\r\n    nums: number\r\n    folders: Folder[]\r\n  }\r\n\r\n  type Category = Folder[]\r\n  */\r\n  const categories = []\r\n  data.allMarkdownRemark.nodes.forEach((node) => {\r\n    const { id, parent, frontmatter } = node\r\n    const { name, relativePath } = parent\r\n    const { title } = frontmatter\r\n    const pathArray = relativePath.split('/')\r\n\r\n    // 최상단 카테고리 분류\r\n    const rootCategory = pathArray[0]\r\n    let foundCategory = categories.find(\r\n      (category) => category.name === rootCategory\r\n    )\r\n    if (!foundCategory) {\r\n      // 최상단 카테고리가 없으면 새로 생성\r\n      const newCategory = {\r\n        name: rootCategory,\r\n        num: 1,\r\n        posts: [],\r\n        subCategories: [],\r\n      }\r\n      categories.push(newCategory)\r\n      foundCategory = newCategory\r\n    } else {\r\n      // 최상단 카테고리가 있으면 갯수만 추가\r\n      foundCategory.num += 1\r\n    }\r\n\r\n    // 서브 카테고리 분류\r\n    let parentCategory = foundCategory // 바로 위의 상대 부모 디렉토리를 기억해서 여러 depth를 처리\r\n    pathArray.slice(1, -1).forEach((subCategory) => {\r\n      let foundCategory = parentCategory.subCategories.find(\r\n        (category) => category.name === subCategory\r\n      )\r\n      if (!foundCategory) {\r\n        // 서브 카테고리가 없으면 새로 생성\r\n        const newCategory = {\r\n          name: subCategory,\r\n          num: 1,\r\n          posts: [],\r\n          subCategories: [],\r\n        }\r\n        parentCategory.subCategories.push(newCategory)\r\n        parentCategory.subCategories.sort(sortByName) // 서브 카테고리 이름 순 정렬\r\n        foundCategory = newCategory\r\n      } else {\r\n        // 서브 카테고리가 있으면 갯수만 추가\r\n        foundCategory.num += 1\r\n      }\r\n      parentCategory = foundCategory\r\n    })\r\n\r\n    // 포스트 분류\r\n    parentCategory.posts.push({ id, title, name, relativePath })\r\n  })\r\n\r\n  categories.sort(sortByName) // 최상단 카테고리 이름 순 정렬\r\n\r\n  return categories\r\n}\r\n","import * as React from 'react'\r\nimport * as styles from './style.module.scss'\r\nimport Category from '@components/category'\r\n\r\nconst CategoryLayout = ({ selectedCategory, children }) => {\r\n  return (\r\n    <div className={styles.container}>\r\n      <Category selectedCategory={selectedCategory} />\r\n      {children}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CategoryLayout\r\n","// extracted by mini-css-extract-plugin\nexport var container = \"style-module--container--16db0\";","// extracted by mini-css-extract-plugin\nexport var active = \"style-module--active--d7665\";\nexport var toc = \"style-module--toc--d478a\";","import React, { useEffect } from 'react'\r\nimport * as styles from './style.module.scss'\r\n\r\nconst TableContent: React.FC = ({ toc }) => {\r\n  useEffect(() => {\r\n    const observer = new IntersectionObserver((entries) => {\r\n      entries.forEach((entry) => {\r\n        const id = encodeURI(entry.target.getAttribute('id')) // 한글 url 인코딩\r\n        const targetContent = document.querySelector(`.toc a[href=\"#${id}\"]`) // toc에서 해당 id를 가진 태그 선택\r\n        if (targetContent) {\r\n          if (entry.intersectionRatio > 0) {\r\n            targetContent.classList.add(styles.active)\r\n          } else {\r\n            targetContent.classList.remove(styles.active)\r\n          }\r\n        }\r\n      })\r\n    })\r\n    // 트래킹하고 싶은 태그들 선택\r\n    document\r\n      .querySelectorAll(\r\n        '.markdown-body h1, .markdown-body h2, .markdown-body h3, .markdown-body h4'\r\n      )\r\n      .forEach((section) => {\r\n        observer.observe(section)\r\n      })\r\n\r\n    return () => {\r\n      observer.disconnect()\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <div\r\n      className={`toc ${styles.toc}`}\r\n      dangerouslySetInnerHTML={{ __html: toc }}\r\n    />\r\n  )\r\n}\r\n\r\nexport default TableContent\r\n","import * as React from 'react'\r\nimport { Link } from 'gatsby'\r\nimport * as styles from './style.module.scss'\r\nimport { useSiteMetadata } from '@hooks/use-site-metadata'\r\n\r\nconst PostHeader: React.FC = ({ frontmatter }) => {\r\n  const { author } = useSiteMetadata()\r\n  return (\r\n    <div className={styles.container}>\r\n      <h2 className={styles.title}>{frontmatter.title}</h2>\r\n      <div className={styles.info}>\r\n        <p className={styles.author}>{author}</p>\r\n        <p className={styles.date}>{frontmatter.createdAt}</p>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PostHeader\r\n","// extracted by mini-css-extract-plugin\nexport var author = \"style-module--author--4220d\";\nexport var container = \"style-module--container--3de1a\";\nexport var date = \"style-module--date--fa48c\";\nexport var info = \"style-module--info--0c9e4\";\nexport var title = \"style-module--title--9700c\";","// extracted by mini-css-extract-plugin\nexport var container = \"style-module--container--ed3ad\";\nexport var post = \"style-module--post--e128e\";\nexport var toc = \"style-module--toc--734f6\";","import * as React from 'react'\r\nimport type { HeadFC, PageProps } from 'gatsby'\r\nimport NavigationLayout from '@layouts/navigation-layout'\r\nimport CategoryLayout from '@layouts/category-layout'\r\nimport { allMarkdownsQuery } from '@queries/index'\r\nimport { graphql } from 'gatsby'\r\nimport TableContent from '@components/table-content'\r\nimport PostHeader from '@components/post-header'\r\nimport * as styles from './style.module.scss'\r\n\r\nconst PostPage: React.FC<PageProps> = ({ pageContext, data }) => {\r\n  return (\r\n    <CategoryLayout selectedCategory={pageContext.name}>\r\n      <div className={styles.container}>\r\n        <div className={styles.post}>\r\n          <PostHeader frontmatter={data.markdownRemark.frontmatter} />\r\n          <div\r\n            className={`markdown-body ${styles.postBody}`}\r\n            dangerouslySetInnerHTML={{ __html: data.markdownRemark.html }}\r\n          />\r\n        </div>\r\n        <div className={styles.toc}>\r\n          <TableContent toc={data.markdownRemark.tableOfContents} />\r\n        </div>\r\n      </div>\r\n    </CategoryLayout>\r\n  )\r\n}\r\n\r\nexport const query = graphql`\r\n  query ($id: String!) {\r\n    markdownRemark(id: { eq: $id }) {\r\n      id\r\n      html\r\n      tableOfContents\r\n      frontmatter {\r\n        createdAt\r\n        isCompleted\r\n        reference\r\n        title\r\n        updatedAt\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport default PostPage\r\n"],"names":["selected","sortByName","a","b","nameA","name","toUpperCase","nameB","CategoryName","_ref2","handleClickCategory","React","Link","to","activeClassName","onClick","event","Posts","_ref3","posts","isSelected","selectedClassName","styles","className","map","post","key","id","relativePath","string","title","maxLetters","length","substring","_ref","selectedCategory","data","useStaticQuery","categories","allMarkdownRemark","nodes","forEach","node","parent","frontmatter","pathArray","split","rootCategory","foundCategory","find","category","num","newCategory","subCategories","push","parentCategory","slice","subCategory","sort","useCategorizedPosts","clickedCategory","setClickedCategory","useState","detail","preventDefault","children","Category","active","toc","useEffect","observer","IntersectionObserver","entries","entry","encodeURI","target","getAttribute","targetContent","document","querySelector","intersectionRatio","classList","add","remove","querySelectorAll","section","observe","disconnect","dangerouslySetInnerHTML","__html","author","useSiteMetadata","createdAt","pageContext","CategoryLayout","PostHeader","markdownRemark","html","TableContent","tableOfContents"],"sourceRoot":""}