{"componentChunkName":"component---src-templates-post-index-tsx","path":"/posts/Data Structure/Heap.md/","result":{"data":{"markdownRemark":{"id":"ec230866-b14a-5d61-a8ca-ceacf1a60c9c","html":"<h1 id=\"1-개요\" style=\"position:relative;\"><a href=\"#1-%EA%B0%9C%EC%9A%94\" aria-label=\"1 개요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 개요</h1>\n<p>여러 개의 값 중에서 가장 크거나 작은 값을 빠르게 찾기 위해 만든 <strong>완전 이진 트리.</strong></p>\n<h1 id=\"2-동작\" style=\"position:relative;\"><a href=\"#2-%EB%8F%99%EC%9E%91\" aria-label=\"2 동작 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 동작</h1>\n<p>아래 동작 설명은 최대힙을 기준으로 설명한다.</p>\n<h2 id=\"21-데이터-삽입\" style=\"position:relative;\"><a href=\"#21-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%82%BD%EC%9E%85\" aria-label=\"21 데이터 삽입 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.1. 데이터 삽입</h2>\n<ol>\n<li>힙의 가장 끝의 자리에 노드를 삽입한다.</li>\n<li>해당 노드와 부모 노드를 서로 비교한다.</li>\n<li>해당 노드가 부모 노드보다 클 경우, 두 노드의 위치를 바꾼다.</li>\n<li>해당 노드가 부모 노드보다 작아지거나, 루트 노드가 될 때까지 2~3의 과정을 반복한다.</li>\n</ol>\n<h2 id=\"22-데이터-삭제\" style=\"position:relative;\"><a href=\"#22-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%82%AD%EC%A0%9C\" aria-label=\"22 데이터 삭제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.2. 데이터 삭제</h2>\n<ol>\n<li>루트 노드를 제거한다.</li>\n<li>루트 자리에 가장 마지막 노드를 삽입한다.</li>\n<li>해당 노드와 자식 노드(들)을 비교한다.</li>\n<li>해당 노드가 자식 노드(들)보다 작을 경우, 두 노드의 위치를 바꾼다.</li>\n<li>해당 노드가 자식 노드(들)보다 커지거나, 리프 노드가 될 때까지 3~4의 과정을 반복한다.</li>\n</ol>\n<h1 id=\"3-시간-복잡도\" style=\"position:relative;\"><a href=\"#3-%EC%8B%9C%EA%B0%84-%EB%B3%B5%EC%9E%A1%EB%8F%84\" aria-label=\"3 시간 복잡도 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 시간 복잡도</h1>\n<p>데이터의 크기 N</p>\n<h2 id=\"31-데이터-삽입\" style=\"position:relative;\"><a href=\"#31-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%82%BD%EC%9E%85\" aria-label=\"31 데이터 삽입 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.1. 데이터 삽입</h2>\n<p><strong>O(logN)</strong>\n트리의 깊이가 logN이기 때문에 최대 logN 번의 비교와 치환 연산이 일어난다.</p>\n<h2 id=\"32-데이터-삭제\" style=\"position:relative;\"><a href=\"#32-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%82%AD%EC%A0%9C\" aria-label=\"32 데이터 삭제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.2. 데이터 삭제</h2>\n<p><strong>O(logN)</strong>\n트리의 깊이가 logN이기 때문에 최대 logN 번의 비교와 치환 연산이 일어난다.</p>\n<h1 id=\"4-구현\" style=\"position:relative;\"><a href=\"#4-%EA%B5%AC%ED%98%84\" aria-label=\"4 구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 구현</h1>\n<ul>\n<li>\n<p><strong>Python 코드</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># 참고한 블로그 글: https://daimhada.tistory.com/108</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MaxHeap</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token comment\"># 생성자 함수</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>queue <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token comment\"># 삽입 함수</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>queue<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>        <span class=\"token comment\"># 힙의 마지막에 노드 추가</span>\n        current_index <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>queue<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">while</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;</span> current_index<span class=\"token punctuation\">:</span>    <span class=\"token comment\"># 루트 노드가 될때까지 반복</span>\n            parent_index <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">(</span>current_index<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>queue<span class=\"token punctuation\">[</span>parent_index<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>queue<span class=\"token punctuation\">[</span>current_index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>    <span class=\"token comment\"># 부모 노드보다 클 경우</span>\n                self<span class=\"token punctuation\">.</span>swap<span class=\"token punctuation\">(</span>parent_index<span class=\"token punctuation\">,</span> current_index<span class=\"token punctuation\">)</span>                  <span class=\"token comment\"># 치환</span>\n                current_index <span class=\"token operator\">=</span> parent_index\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>                   <span class=\"token comment\"># 그렇지 않을 경우, 비교 연산 중지</span>\n                <span class=\"token keyword\">break</span>\n\n    <span class=\"token comment\"># 삭제 함수</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        last_index <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>queue<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">if</span> last_index <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n        self<span class=\"token punctuation\">.</span>swap<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> last_index<span class=\"token punctuation\">)</span>    <span class=\"token comment\"># 루트 노드와 마지막 노드 치환</span>\n        max_value <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>queue<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>maxHeapify<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>          <span class=\"token comment\"># 루트 노드로부터 masHeapify 동작</span>\n        <span class=\"token keyword\">return</span> max_value\n\n\n    <span class=\"token comment\"># heapify 정렬 함수</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">maxHeapify</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        left_index  <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>left_child<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n        right_index <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>right_child<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n        last_index <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>queue<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n\n        max_index <span class=\"token operator\">=</span> i\n        <span class=\"token keyword\">if</span> left_index <span class=\"token operator\">&lt;=</span> last_index <span class=\"token keyword\">and</span> self<span class=\"token punctuation\">.</span>queue<span class=\"token punctuation\">[</span>max_index<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>queue<span class=\"token punctuation\">[</span>left_index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            max_index <span class=\"token operator\">=</span> left_index\n        <span class=\"token keyword\">if</span> right_index <span class=\"token operator\">&lt;=</span> last_index <span class=\"token keyword\">and</span> self<span class=\"token punctuation\">.</span>queue<span class=\"token punctuation\">[</span>max_index<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>queue<span class=\"token punctuation\">[</span>right_index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            max_index <span class=\"token operator\">=</span> right_index\n\n        <span class=\"token keyword\">if</span> max_index <span class=\"token operator\">!=</span> i<span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 현재 노드가 자식 노드(들)보다 작을 경우, 현재 노드를 자식 노드와 치환</span>\n            self<span class=\"token punctuation\">.</span>swap<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> max_index<span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>maxHeapify<span class=\"token punctuation\">(</span>max_index<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 보조 함수</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>queue<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>queue<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>queue<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>queue<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">parent</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> <span class=\"token number\">2</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">left_child</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">right_child</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> i <span class=\"token operator\">+</span> <span class=\"token number\">2</span>\n\n    <span class=\"token comment\"># special methods</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>              <span class=\"token comment\"># 출력</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>queue<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__getitem__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>   <span class=\"token comment\"># 인덱싱</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>queue<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__iter__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>             <span class=\"token comment\"># iterable</span>\n        self<span class=\"token punctuation\">.</span>index <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">return</span> self\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__next__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>             <span class=\"token comment\"># iterable</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>queue<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> self<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">raise</span> StopIteration\n\n        self<span class=\"token punctuation\">.</span>index <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>queue<span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>index <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__contains__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>   <span class=\"token comment\"># in 메소드</span>\n        <span class=\"token keyword\">return</span> item <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>queue\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__bool__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>             <span class=\"token comment\"># Boolean 판단</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>queue<span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ul>\n<h1 id=\"5-활용\" style=\"position:relative;\"><a href=\"#5-%ED%99%9C%EC%9A%A9\" aria-label=\"5 활용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. 활용</h1>\n<ul>\n<li><a href=\"./../Algorithm/Dijkstra.md\">Dijkstra (Greedy Algorithm)</a></li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#1-%EA%B0%9C%EC%9A%94\">1. 개요</a></p>\n</li>\n<li>\n<p><a href=\"#2-%EB%8F%99%EC%9E%91\">2. 동작</a></p>\n<ul>\n<li><a href=\"#21-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%82%BD%EC%9E%85\">2.1. 데이터 삽입</a></li>\n<li><a href=\"#22-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%82%AD%EC%A0%9C\">2.2. 데이터 삭제</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#3-%EC%8B%9C%EA%B0%84-%EB%B3%B5%EC%9E%A1%EB%8F%84\">3. 시간 복잡도</a></p>\n<ul>\n<li><a href=\"#31-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%82%BD%EC%9E%85\">3.1. 데이터 삽입</a></li>\n<li><a href=\"#32-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%82%AD%EC%A0%9C\">3.2. 데이터 삭제</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#4-%EA%B5%AC%ED%98%84\">4. 구현</a></p>\n</li>\n<li>\n<p><a href=\"#5-%ED%99%9C%EC%9A%A9\">5. 활용</a></p>\n</li>\n</ul>","frontmatter":{"createdAt":"2023-03-05","isCompleted":true,"reference":null,"title":"힙(Heap) 자료구조","updatedAt":"2023-03-13'"}},"allMarkdownRemark":{"nodes":[{"id":"9650b607-70ee-5b89-9303-8cb3da337e4a","parent":{"id":"0fba5454-bb9a-50fc-95aa-f4e75aedcab0","name":"Tree","relativePath":"Data Structure/Tree.md"},"frontmatter":{"title":"트리(Tree) 자료구조","createdAt":"2023-03-05","updatedAt":"2023-04-05'"},"excerpt":"…"},{"id":"ec230866-b14a-5d61-a8ca-ceacf1a60c9c","parent":{"id":"d8437ef1-c7c6-52f5-b411-07e70ea1c55e","name":"Heap","relativePath":"Data Structure/Heap.md"},"frontmatter":{"title":"힙(Heap) 자료구조","createdAt":"2023-03-05","updatedAt":"2023-03-13'"},"excerpt":"1. 개요 여러 개의 값 중에서 가장 크거나 작은 값을 빠르게 찾기 위해 만든 완전 이진 트리. 2. 동작 아래 동작 설명은 최대힙을 기준으로 설명한다. 2.…"}]}},"pageContext":{"pagePath":"posts/Data Structure/Heap.md","regex":"/^(?!.*README).*Data Structure.*$/","id":"ec230866-b14a-5d61-a8ca-ceacf1a60c9c","parent":{"id":"d8437ef1-c7c6-52f5-b411-07e70ea1c55e","name":"Heap","relativeDirectory":"Data Structure","relativePath":"Data Structure/Heap.md"}}},"staticQueryHashes":["3300660363","3571427910"],"slicesMap":{}}