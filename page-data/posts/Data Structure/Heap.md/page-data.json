{"componentChunkName":"component---src-templates-post-tsx","path":"/posts/Data Structure/Heap.md/","result":{"data":{"markdownRemark":{"id":"4d7ac534-88ca-5714-bc48-d1d8615ed43d","html":"<h1>Heap</h1>\n<h1>1. 개요</h1>\n<p>여러 개의 값 중에서 가장 크거나 작은 값을 빠르게 찾기 위해 만든 <strong>완전 이진 트리.</strong></p>\n<h1>2. 동작</h1>\n<p>아래 동작 설명은 최대힙을 기준으로 설명한다.</p>\n<h2>2.1. 데이터 삽입</h2>\n<ol>\n<li>힙의 가장 끝의 자리에 노드를 삽입한다.</li>\n<li>해당 노드와 부모 노드를 서로 비교한다.</li>\n<li>해당 노드가 부모 노드보다 클 경우, 두 노드의 위치를 바꾼다.</li>\n<li>해당 노드가 부모 노드보다 작아지거나, 루트 노드가 될 때까지 2~3의 과정을 반복한다.</li>\n</ol>\n<h2>2.2. 데이터 삭제</h2>\n<ol>\n<li>루트 노드를 제거한다.</li>\n<li>루트 자리에 가장 마지막 노드를 삽입한다.</li>\n<li>해당 노드와 자식 노드(들)을 비교한다.</li>\n<li>해당 노드가 자식 노드(들)보다 작을 경우, 두 노드의 위치를 바꾼다.</li>\n<li>해당 노드가 자식 노드(들)보다 커지거나, 리프 노드가 될 때까지 3~4의 과정을 반복한다.</li>\n</ol>\n<h1>3. 시간 복잡도</h1>\n<p>데이터의 크기 N</p>\n<h2>3.1. 데이터 삽입</h2>\n<p><strong>O(logN)</strong>\r\n트리의 깊이가 logN이기 때문에 최대 logN 번의 비교와 치환 연산이 일어난다.</p>\n<h2>3.2. 데이터 삭제</h2>\n<p><strong>O(logN)</strong>\r\n트리의 깊이가 logN이기 때문에 최대 logN 번의 비교와 치환 연산이 일어난다.</p>\n<h1>4. 구현</h1>\n<ul>\n<li>\n<p><strong>Python 코드</strong></p>\n<pre><code class=\"language-python\"># 참고한 블로그 글: https://daimhada.tistory.com/108\r\n\r\nclass MaxHeap:\r\n\r\n    # 생성자 함수\r\n    def __init__(self):\r\n        self.queue = []\r\n\r\n    # 삽입 함수\r\n    def insert(self, n):\r\n        self.queue.append(n)        # 힙의 마지막에 노드 추가\r\n        current_index = len(self.queue) - 1\r\n        while 0 &#x3C; current_index:    # 루트 노드가 될때까지 반복\r\n            parent_index = self.parent(current_index)\r\n            if self.queue[parent_index] &#x3C; self.queue[current_index]:    # 부모 노드보다 클 경우\r\n                self.swap(parent_index, current_index)                  # 치환\r\n                current_index = parent_index\r\n            else:                   # 그렇지 않을 경우, 비교 연산 중지\r\n                break\r\n\r\n    # 삭제 함수\r\n    def delete(self):\r\n        last_index = len(self.queue) - 1\r\n        if last_index &#x3C; 0:\r\n            return -1\r\n        self.swap(0, last_index)    # 루트 노드와 마지막 노드 치환\r\n        max_value = self.queue.pop()\r\n        self.maxHeapify(0)          # 루트 노드로부터 masHeapify 동작\r\n        return max_value\r\n\r\n\r\n    # heapify 정렬 함수\r\n    def maxHeapify(self, i):\r\n        left_index  = self.left_child(i)\r\n        right_index = self.right_child(i)\r\n        last_index = len(self.queue) - 1\r\n\r\n        max_index = i\r\n        if left_index &#x3C;= last_index and self.queue[max_index] &#x3C; self.queue[left_index]:\r\n            max_index = left_index\r\n        if right_index &#x3C;= last_index and self.queue[max_index] &#x3C; self.queue[right_index]:\r\n            max_index = right_index\r\n\r\n        if max_index != i:  # 현재 노드가 자식 노드(들)보다 작을 경우, 현재 노드를 자식 노드와 치환\r\n            self.swap(i, max_index)\r\n            self.maxHeapify(max_index)\r\n\r\n    # 보조 함수\r\n    def swap(self, i, j):\r\n        self.queue[i], self.queue[j] = self.queue[j], self.queue[i]\r\n\r\n    def parent(self, i):\r\n        return (i - 1) // 2\r\n\r\n    def left_child(self, i):\r\n        return 2 * i + 1\r\n\r\n    def right_child(self, i):\r\n        return 2 * i + 2\r\n\r\n    # special methods\r\n    def __str__(self):              # 출력\r\n        return str(self.queue)\r\n\r\n    def __getitem__(self, index):   # 인덱싱\r\n        return self.queue[index]\r\n\r\n    def __iter__(self):             # iterable\r\n        self.index = 0\r\n        return self\r\n\r\n    def __next__(self):             # iterable\r\n        if len(self.queue) &#x3C;= self.index:\r\n            raise StopIteration\r\n\r\n        self.index += 1\r\n        return self.queue[self.index - 1]\r\n\r\n    def __contains__(self, item):   # in 메소드\r\n        return item in self.queue\r\n\r\n    def __bool__(self):             # Boolean 판단\r\n        return bool(self.queue)\n</code></pre>\n</li>\n</ul>\n<h1>5. 활용</h1>\n<ul>\n<li><a href=\"./../Algorithm/Dijkstra.md\">Dijkstra (Greedy Algorithm)</a></li>\n</ul>"}},"pageContext":{"pagePath":"posts/Data Structure/Heap.md","id":"4d7ac534-88ca-5714-bc48-d1d8615ed43d","parent":{"id":"6e631032-c2c0-53c3-8c37-be59f1dbb977","name":"Heap","relativePath":"Data Structure/Heap.md"}}},"staticQueryHashes":["1274812890","3935499650","82772122"],"slicesMap":{}}