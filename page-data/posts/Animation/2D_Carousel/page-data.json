{"componentChunkName":"component---src-templates-post-index-tsx","path":"/posts/Animation/2D_Carousel/","result":{"data":{"markdownRemark":{"id":"e2a3d898-cf20-5094-9d67-6f7df95da780","html":"<h1 id=\"1-목표\" style=\"position:relative;\"><a href=\"#1-%EB%AA%A9%ED%91%9C\" aria-label=\"1 목표 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 목표</h1>\n<h2 id=\"11-react-responsive-carousel\" style=\"position:relative;\"><a href=\"#11-react-responsive-carousel\" aria-label=\"11 react responsive carousel permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.1. react-responsive-carousel</h2>\n<p>오늘은 'npm react carousel'을 구글링하면 제일 상단에 나오는 <a href=\"https://www.npmjs.com/package/react-responsive-carousel\">react-responsive-carousel</a>과 유사하게 동작하는 리액트 컴포넌트를 만들어 볼 것이다.</p>\n<p><img src=\"/TIL/32099a46698bf502be574bc9dd0ad738/2d-carousel.gif\" alt=\"2d-carousel.gif\"></p>\n<h2 id=\"12-props-설정\" style=\"position:relative;\"><a href=\"#12-props-%EC%84%A4%EC%A0%95\" aria-label=\"12 props 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.2. props 설정</h2>\n<p>오늘 만들 Type 컴포넌트는 다음과 같은 prop을 받는다. 전부 다 react-responsive-carousel에서 베껴온 것들이다.<br>\n꽤 많아보이지만, 실제 라이브리가 받는 prop의 1/4정도 밖에 안된다;;</p>\n<pre><code class=\"language-js\">type Props = {\n  autoPlay?: boolean // 자동 재생 여부\n  width?: string // 캐러셀 너비\n  showArrows?: boolean // 호버 시 화살표 여부\n  showStatus?: boolean //   우측 상단의 현재 요소의 인덱스 표시\n  showIndicators?: boolean // 하단의 점 모양으로 선택된 요소 표시\n  selectedItem?: number // 처음띄울 요소 인덱스\n  interval?: number // 슬라이드 시간 간격 (ms)\n  transitionTime?: number // 전환 시간(ms)\n  infiniteLoop?: boolean // 무한 반복 영부\n  children?: React.ReactNode\n}\n</code></pre>\n<h1 id=\"2-전체-코드\" style=\"position:relative;\"><a href=\"#2-%EC%A0%84%EC%B2%B4-%EC%BD%94%EB%93%9C\" aria-label=\"2 전체 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 전체 코드</h1>\n<p><a href=\"https://github.com/Byongho96/TIL/tree/master/src/pages/demo/2d-carousel\">Github 소스코드</a></p>\n<p>항상 리액트 컴포넌트로 만들 때는, 동적인 prop에 따라 재렌더링을 고려해야한다는 점이 재밌고도 어렵다.<br>\n아무튼 최대한 심플하게 로직을 짜보려고 했다. 스와이프 기능을 제외하면, 하나의 <code>useEffect</code>만으로 메인로직이 동작한다.</p>\n<p>코드를 짜면서 새로 배운 내용이 3가지있다.</p>\n<ul>\n<li>\n<p><strong>children의 갯수</strong></p>\n<ul>\n<li>원래는 React의 <a href=\"https://react.dev/reference/react/Children\">Children API</a>를 사용했는데, 이 글을 쓰려고 공식문서에 들어가보니까 Legacy APIs로 분류되어 사용을 권하지 않았다.\n<blockquote>\n<p>Using Children is uncommon and can lead to fragile code. See common alternatives.</p>\n</blockquote>\n</li>\n<li>그래서 새로 알아본 것이 TypeScript의 <strong>assertion</strong>을 이용한 방법이다.\n<pre><code class=\"language-js\">(children as React.ReactNode[]).lengths\n</code></pre>\nassertion을 사용하는게 꺼림직하긴 하지만, 캐러셀 특징 상 children이 <code>React.ReactNode[]</code>로 치환될 수 없다면, prop 자체가 잘못 내려온 것이기 때문에 괘찮을 것 같다.</li>\n</ul>\n</li>\n<li>\n<p><strong>정수배열 생성</strong></p>\n<ul>\n<li><mark>타입스크립트를 만족하면서 의미없는 길이 배열</mark>을 생성하는 법을 새로 찾아야 했다.<br>\n그렇게 알게된 것이 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from#using_arrow_functions_and_array.from\">Array.from()</a>이다.\n<pre><code class=\"language-js\">Array.from({ length: 5 }, (v, i) => i)\n// [0, 1, 2, 3, 4]\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>swipe 기능</strong></p>\n<ul>\n<li>모바일에서 스와이프 기능을 구현하기 위해, <code>touchstart</code>와 <code>touchend</code>이벤트를 이용했다.<br>\n<a href=\"https://chicpro.dev/javascript%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%B4-%EC%A2%8C%EC%9A%B0-swipe-%EB%B0%A9%ED%96%A5-%EC%95%8C%EC%95%84%EB%82%B4%EA%B8%B0/\">이 블로그</a>의 글을 참조했다.</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"language-js\">import React, { useEffect, useMemo, useRef, useState, useCallback } from 'react'\nimport './style.scss'\nimport CircleIcon from '@assets/svgs/circle.svg' // 따로 svg 파일 준비\nimport LeftIcon from '@assets/svgs/left.svg'\nimport RightIcon from '@assets/svgs/right.svg'\n\ntype Props = {\n  autoPlay?: boolean // 자동 재생 여부\n  width?: string // 캐러셀 너비\n  showArrows?: boolean // 호버 시 화살표 여부\n  showStatus?: boolean //   우측 상단의 현재 요소의 인덱스 표시\n  showIndicators?: boolean // 하단의 점 모양으로 선택된 요소 표시\n  selectedItem?: number // 처음띄울 요소 인덱스\n  interval?: number // 슬라이드 시간 간격 (ms)\n  transitionTime?: number // 전환 시간(ms)\n  infiniteLoop?: boolean // 무한 반복 영부\n  children?: React.ReactNode\n}\n\nconst Carousel: React.FC&#x3C;Props> = ({\n  autoPlay = true,\n  width = '100%',\n  showArrows = true,\n  showStatus = true,\n  showIndicators = true,\n  selectedItem = 0,\n  interval = 2000,\n  transitionTime = 300,\n  infiniteLoop = true,\n  children,\n}) => {\n  const containerRef = useRef&#x3C;HTMLDivElement>(null)\n  const frameRef = useRef&#x3C;HTMLDivElement>(null)\n  const [index, setIndex] = useState(selectedItem) // 현재 선택된 인덱스\n\n  // 슬라이드의 갯수 (children의 길이)\n  const length = useMemo(() => {\n    return (children as React.ReactNode[]).length\n  }, [children])\n\n  // 다음 슬라이드로 이동하는 함수. index 변경시마다 재선언 되지 않도록 useCallback\n  const slideNext = useCallback(\n    function () {\n      setIndex((index) => (index + 1 > length - 1 ? 0 : index + 1))\n    },\n    [length]\n  )\n\n  // 이전 슬라이드로 이동하는 함수. index 변경시마다 재선언 되지 않도록 useCallback\n  const slidePrev = useCallback(\n    function () {\n      setIndex((index) => (index - 1 &#x3C; 0 ? length - 1 : index - 1))\n    },\n    [length]\n  )\n\n  // 자동 플레이를 위한 인터벌 함수\n  useEffect(() => {\n    if (!autoPlay) return // 자동플레이가 아닐 경우, 실행 안함\n\n    const container = containerRef.current\n    const frame = frameRef.current\n\n    if (\n      !(container instanceof HTMLDivElement) ||\n      !(frame instanceof HTMLDivElement)\n    )\n      return\n\n    let containerWidth = 0 // 부모 컨테이너 너비\n\n    // 부모 컨테이너 너비 설정 &#x26; 프레임 초기 위치 설정 (화면 리사이즈마다 실행)\n    const init = function () {\n      containerWidth = container.offsetWidth\n      frame.style.transform = `translateX(-${containerWidth * index}px)`\n    }\n\n    // 슬라이드 메인 함수\n    const slide = function () {\n      let tmp_index = index + 1\n      // 마지막 슬라이드일 경우,\n      if (tmp_index > length - 1) {\n        if (!infiniteLoop) clearInterval(intervalId) // 무한 반복이 아니면 종료\n        else tmp_index = 0 // 무한 반복이면 다시 처음으로\n      }\n      frame.style.transform = `translateX(-${containerWidth * tmp_index}px)`\n      setIndex(tmp_index)\n    }\n\n    init() // 초기화\n    const intervalId = setInterval(slide, interval) // 인터벌 등록\n    window.addEventListener('resize', init) // 이벤트 리스너\n\n    return () => {\n      // 클린업\n      clearInterval(intervalId)\n      window.removeEventListener('resize', init)\n    }\n  }, [autoPlay, interval, infiniteLoop, index, length])\n\n  // 모바일 동작을 위한 swipe 이벤트 리스너\n  useEffect(() => {\n    const container = containerRef.current\n    if (!(container instanceof HTMLDivElement)) return\n\n    // 터치 시작 위치\n    const touchStartInfo = {\n      x: 0,\n      y: 0,\n    }\n\n    // 터시 시작 시, 터치 시작 위치 기록\n    const touchStart = function (event: TouchEvent) {\n      const touch = event.touches[0]\n      touchStartInfo.x = touch.clientX\n      touchStartInfo.y = touch.clientY\n    }\n\n    // 터치 종료 시, 터지 종료에 따라 동작\n    const touchEnd = function (event: TouchEvent) {\n      if (event.touches.length !== 0) return\n      const touch = event.changedTouches[event.changedTouches.length - 1] // 마지막 터치 위치\n      const touchoffsetX = touch.clientX - touchStartInfo.x\n      const touchoffsetY = touch.clientY - touchStartInfo.y\n\n      // 가로로 70px이상 &#x26;&#x26; 세로로 60px 이하 이동 시, 터치로 인식\n      const isHorizontalSwipe =\n        Math.abs(touchoffsetX) >= 70 &#x26;&#x26; Math.abs(touchoffsetY) &#x3C;= 30\n\n      if (isHorizontalSwipe) {\n        const isSwipeLeft = touchoffsetX &#x3C; 0\n        isSwipeLeft ? slideNext() : slidePrev()\n      }\n    }\n\n    // 이벤트 리스너 달기\n    container.addEventListener('touchstart', touchStart)\n    container.addEventListener('touchend', touchEnd)\n\n    return () => {\n      // 클린업\n      container.removeEventListener('touchstart', touchStart)\n      container.removeEventListener('touchend', touchEnd)\n    }\n  }, [length, slideNext, slidePrev])\n\n  return (\n    &#x3C;div className=\"carousel-2d\" ref={containerRef} style={{ width: width }}>\n      &#x3C;div\n        className=\"carousel-2d__frame\"\n        ref={frameRef}\n        style={{ transition: `transform ${transitionTime}ms ease-in-out` }}\n      >\n        {children}\n      &#x3C;/div>\n      {showArrows &#x26;&#x26; (\n        &#x3C;>\n          &#x3C;div className=\"carousel-2d__left\" onClick={slidePrev}>\n            &#x3C;LeftIcon />\n          &#x3C;/div>\n          &#x3C;div className=\"carousel-2d__right\" onClick={slideNext}>\n            &#x3C;RightIcon />\n          &#x3C;/div>\n        &#x3C;/>\n      )}\n      {showStatus &#x26;&#x26; (\n        &#x3C;div className=\"carousel-2d__status\">{`${index + 1} / ${length}`}&#x3C;/div>\n      )}\n      {showIndicators &#x26;&#x26; (\n        &#x3C;CarouselIndicator\n          length={length}\n          selectedIdx={index}\n          onClick={(idx: number) => setIndex(idx)}\n        />\n      )}\n    &#x3C;/div>\n  )\n}\n\ninterface CarouselIndicatorProps {\n  length: number\n  selectedIdx: number\n  onClick: (n: number) => void\n}\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from\n// 특정길이의 연속적인 정수 배열을 만드는 방법\n// Array.from({ length: 5 }, (v, i) => i);\n// [0, 1, 2, 3, 4]\n\nconst CarouselIndicator: React.FC&#x3C;CarouselIndicatorProps> = ({\n  length,\n  selectedIdx,\n  onClick,\n}) => {\n  return (\n    &#x3C;ul className=\"carousel-2d__indicator\">\n      {Array.from({ length }, (_, idx) => (\n        &#x3C;li\n          key={idx}\n          className={`carousel-2d__indicator__circle ${\n            idx === selectedIdx ? 'active' : ''\n          }`}\n          onClick={() => onClick(idx)}\n        >\n          &#x3C;CircleIcon />\n        &#x3C;/li>\n      ))}\n    &#x3C;/ul>\n  )\n}\n\n</code></pre>\n<pre><code class=\"language-css\">.carousel-2d {\n  position: relative;\n  overflow: hidden;\n}\n\n.carousel-2d__frame {\n  display: flex;\n  align-items: center;\n  flex: nowrap;\n}\n\n.carousel-2d__frame > * {\n  min-width: 100%;\n}\n\n.carousel-2d__left {\n  display: flex;\n  align-items: center;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  padding: 0.2vw;\n  background-color: rgba(250, 235, 215, 0);\n}\n\n.carousel-2d__right {\n  display: flex;\n  align-items: center;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  right: 0;\n  padding: 0.2vw;\n  background-color: rgba(0, 0, 0, 0);\n}\n\n.carousel-2d__left path,\n.carousel-2d__right path {\n  stroke: white;\n  fill: white;\n}\n\n.carousel-2d__left:hover,\n.carousel-2d__right:hover {\n  background-color: rgba(0, 0, 0, 0.236);\n  cursor: pointer;\n}\n\n.carousel-2d__status {\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  color: white;\n}\n\n.carousel-2d__indicator {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 10px;\n  position: absolute;\n  bottom: 5px;\n  left: 0;\n  right: 0;\n}\n\n.carousel-2d__indicator__circle svg {\n  width: 10px;\n  height: 10px;\n  cursor: pointer;\n}\n\n.carousel-2d__indicator__circle path {\n  fill: rgba(255, 255, 255, 0.342);\n  stroke: rgba(255, 255, 255, 0.342);\n}\n\n.carousel-2d__indicator__circle.active path {\n  fill: rgb(255, 255, 255);\n  stroke: rgb(255, 255, 255);\n}\n</code></pre>\n<h1 id=\"3-사용-예시\" style=\"position:relative;\"><a href=\"#3-%EC%82%AC%EC%9A%A9-%EC%98%88%EC%8B%9C\" aria-label=\"3 사용 예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 사용 예시</h1>\n<p>다음과 같이 부모 컴포넌트에서, 완성된 컴포넌트를 <code>children</code>으로 내려주기만 하면 된다.</p>\n<p><a href=\"https://byongho96.github.io/TIL/demo/2d-carousel/\">애니매이션 라이브 페이지로 이동!</a></p>\n<p><img src=\"/TIL/32099a46698bf502be574bc9dd0ad738/2d-carousel.gif\" alt=\"2d-carousel.gif\"></p>\n<pre><code class=\"language-js\">import React from 'react'\nimport './style.css'\nimport Carousel from './Carousel.tsx'\n\nconst App: React.FC = () => {\n  return (\n    &#x3C;div className=\"carousel-2d-page\">\n      &#x3C;Carousel>\n        &#x3C;div className=\"carousel-2d-page__item\">\n          &#x3C;img\n            src=\"https://source.unsplash.com/random/?programming\"\n            alt=\"unsplash-1\"\n          />\n        &#x3C;/div>\n        &#x3C;div className=\"carousel-2d-page__item\">\n          &#x3C;img\n            src=\"https://source.unsplash.com/random/?mountain\"\n            alt=\"unsplash-2\"\n          />\n        &#x3C;/div>\n        &#x3C;div className=\"carousel-2d-page__item\">\n          &#x3C;img\n            src=\"https://source.unsplash.com/random/?river\"\n            alt=\"unsplash-3\"\n          />\n        &#x3C;/div>\n      &#x3C;/Carousel>\n    &#x3C;/div>\n  )\n}\n\nexport default App\n</code></pre>\n<pre><code class=\"language-css\">.carousel-2d-page {\n  display: flex;\n  align-items: center;\n}\n\n.carousel-2d-page__item {\n  display: flex;\n  align-items: center;\n  justify-self: center;\n  overflow: hidden;\n  position: relative;\n  height: 25vw;\n  min-height: 500px;\n}\n\n.carousel-2d-page__item img {\n  min-width: 100%;\n  min-height: 100%;\n  object-fit: cover;\n  object-position: center;\n}\n</code></pre>\n<h1 id=\"4-참고\" style=\"position:relative;\"><a href=\"#4-%EC%B0%B8%EA%B3%A0\" aria-label=\"4 참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 참고</h1>\n<ul>\n<li><a href=\"https://chicpro.dev/javascript%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%B4-%EC%A2%8C%EC%9A%B0-swipe-%EB%B0%A9%ED%96%A5-%EC%95%8C%EC%95%84%EB%82%B4%EA%B8%B0/\">CHICPRO: JavaScript를 이용해 좌우 swipe 방향 알아내기</a></li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#1-%EB%AA%A9%ED%91%9C\">1. 목표</a></p>\n<ul>\n<li><a href=\"#11-react-responsive-carousel\">1.1. react-responsive-carousel</a></li>\n<li><a href=\"#12-props-%EC%84%A4%EC%A0%95\">1.2. props 설정</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#2-%EC%A0%84%EC%B2%B4-%EC%BD%94%EB%93%9C\">2. 전체 코드</a></p>\n</li>\n<li>\n<p><a href=\"#3-%EC%82%AC%EC%9A%A9-%EC%98%88%EC%8B%9C\">3. 사용 예시</a></p>\n</li>\n<li>\n<p><a href=\"#4-%EC%B0%B8%EA%B3%A0\">4. 참고</a></p>\n</li>\n</ul>","frontmatter":{"title":"반응형 2D 캐러셀 (React 컴포넌트)","createdAt":"2023-07-10","updatedAt":"2023-07-10","tags":["CSS","JavaScript","애니메이션","캐러셀","2D","반응형","스와이프"],"description":"반응형 2D 캐러셀을 리액트 컴포넌트로 만들어본다.","reference":null}},"allMarkdownRemark":{"nodes":[{"id":"e070d9f5-57b8-53c2-bb0e-25ef3e98fcb6","excerpt":"1. 목표 1.1. react-type-animation 구글링하면 react-type-animation라는 리액트용 타이핑 애니메이션 라이브러리가 바로 나온다. 이 라이브러리와 유사하게 동작하는 리액트 컴포넌트를 만드는 것이 오늘의 목표다. my…","parent":{"id":"df0725c8-ac33-5639-b391-21726edd7c7b","name":"Typing_Animation","relativePath":"Animation/Typing_Animation.md"},"frontmatter":{"title":"타이핑 애니메이션 (React 컴포넌트)","createdAt":"2023-06-22","updatedAt":"2023-06-22"},"fields":{"slug":"/posts/Animation/Typing_Animation/"}},{"id":"d1e1686e-9471-574a-ae2f-18e680057aca","excerpt":"1. 사건의 발단 CSS를 하다보면 종종 개빡치는 일이 생기기 마련이다. 빡침의 이유도 가지 각색인데, 오늘 다루고자 하는 주제는 '이게 안된다고?'하는 느낌이다. 바로 CSS에서 height를 0에서 auto…","parent":{"id":"5aaae26e-1553-5935-8ffb-cb59b5945904","name":"Height_Animation","relativePath":"Animation/Height_Animation.md"},"frontmatter":{"title":"CSS 높이(height) 0 to auto 애니메이션","createdAt":"2023-06-28","updatedAt":"2023-06-28"},"fields":{"slug":"/posts/Animation/Height_Animation/"}},{"id":"e342031d-15e0-5a29-b5e7-06d909d9d342","excerpt":"1. 목표 \"YouTube: 자바스크립트로 11분만에 카드 스크롤 애니메이션 마스터하기, 맛있는 코딩\" 를 따라잡고, 이를 커스텀할 수 있는 리액트 컴포넌트로 만드는게 목표다. scroll-3d-card.gif) 안타깝지만 나는 저 강의를 1…","parent":{"id":"ef34e23c-385f-582d-8e54-f832e8635936","name":"Scroll_3D_Card","relativePath":"Animation/Scroll_3D_Card.md"},"frontmatter":{"title":"3D 카드 스크롤 애니메이션 (React 컴포넌트)","createdAt":"2023-07-05","updatedAt":"2023-07-05"},"fields":{"slug":"/posts/Animation/Scroll_3D_Card/"}},{"id":"d9a53b8e-d65a-5893-8f92-fa3574405c56","excerpt":"1. 목표 \"YouTube: 자바스크립트 Canvas로 비내리는 인터렉티브한 배경 만들기 튜토리얼, 맛있는 코딩\" 를 따라잡고, Prop을 받아 커스텀할 수 있는 리액트 컴포넌트로 만드는게 목표다. raining-canvas.gif…","parent":{"id":"15a32b0f-ab8e-5cd8-bdc9-173af52b7323","name":"Raining_Canvas","relativePath":"Animation/Raining_Canvas.md"},"frontmatter":{"title":"비 내리는 캔버스 애니메이션 (React 컴포넌트)","createdAt":"2023-07-06","updatedAt":"2023-07-06"},"fields":{"slug":"/posts/Animation/Raining_Canvas/"}},{"id":"b0cbb5c6-bb89-5972-8720-50aadbc98a6f","excerpt":"1. 목표 \"YouTube: 자바스크립트로 5분만에 텍스트 스크롤 애니메이션 효과(text marquee effect) 마스터하기, 맛있는 코딩\" 를 따라잡고, 이를 커스텀할 수 있는 리액트 컴포넌트로 만드는게 목표다. infinite-text…","parent":{"id":"81cc7ed8-e576-5259-b6b6-2fab4b244e3e","name":"Infinite_Text_Tape","relativePath":"Animation/Infinite_Text_Tape.md"},"frontmatter":{"title":"무한 텍스트 테이프 애니메이션 (React 컴포넌트)","createdAt":"2023-07-07","updatedAt":"2023-07-07"},"fields":{"slug":"/posts/Animation/Infinite_Text_Tape/"}},{"id":"e2a3d898-cf20-5094-9d67-6f7df95da780","excerpt":"1. 목표 1.1. react-responsive-carousel 오늘은 'npm react carousel'을 구글링하면 제일 상단에 나오는 react-responsive-carousel과 유사하게 동작하는 리액트 컴포넌트를 만들어 볼 것이다. 2d…","parent":{"id":"6a368a04-1577-5c38-9c67-7018548c05f4","name":"2D_Carousel","relativePath":"Animation/2D_Carousel.md"},"frontmatter":{"title":"반응형 2D 캐러셀 (React 컴포넌트)","createdAt":"2023-07-10","updatedAt":"2023-07-10"},"fields":{"slug":"/posts/Animation/2D_Carousel/"}}]}},"pageContext":{"pagePath":"/posts/Animation/2D_Carousel/","siblingPostsPathRegex":"/^(?!.*README).*Animation\\/.*$/","relativeDirectory":"Animation","id":"e2a3d898-cf20-5094-9d67-6f7df95da780","parent":{"id":"6a368a04-1577-5c38-9c67-7018548c05f4","name":"2D_Carousel","relativePath":"Animation/2D_Carousel.md"},"fields":{"slug":"/posts/Animation/2D_Carousel/"}}},"staticQueryHashes":["24302420","4059933791"],"slicesMap":{}}