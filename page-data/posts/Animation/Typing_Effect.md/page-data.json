{"componentChunkName":"component---src-templates-post-index-tsx","path":"/posts/Animation/Typing_Effect.md/","result":{"data":{"markdownRemark":{"id":"0870722f-a8c0-5ed8-94d1-cefc9d1874db","html":"<h1 id=\"1-목표\" style=\"position:relative;\"><a href=\"#1-%EB%AA%A9%ED%91%9C\" aria-label=\"1 목표 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 목표</h1>\n<h2 id=\"11-react-type-animation\" style=\"position:relative;\"><a href=\"#11-react-type-animation\" aria-label=\"11 react type animation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.1. react-type-animation</h2>\n<p>구글링하면 <a href=\"https://www.npmjs.com/package/react-type-animation\">react-type-animation</a>라는 리액트용 타이핑 애니메이션 라이브러리가 바로 나온다. <strong>이 라이브러리와 유사하게 동작하는 리액트 컴포넌트</strong>를 만드는 것이 오늘의 목표다.\n<img src=\"./assets/react-type-animation.gif\" width=\"700/\"></p>\n<h2 id=\"12-props-설정\" style=\"position:relative;\"><a href=\"#12-props-%EC%84%A4%EC%A0%95\" aria-label=\"12 props 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.2. props 설정</h2>\n<p>오늘 만들 Type 컴포넌트는 다음과 같은 prop을 받는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">type Props <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">phrases</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>    <span class=\"token comment\">// 순서대로 타이핑 할 문구 리스트</span>\n  <span class=\"token literal-property property\">speed</span><span class=\"token operator\">:</span> number      <span class=\"token comment\">// 타이핑 속도</span>\n  pause<span class=\"token operator\">?</span><span class=\"token operator\">:</span> number     <span class=\"token comment\">// 한 개의 텍스트가 완성되고, 다음 텍스트가 타이핑 되기 전 대기시간</span>\n  isInfinite<span class=\"token operator\">?</span><span class=\"token operator\">:</span> boolean  <span class=\"token comment\">// 타이핑 무한 반복 여부</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"2-전체-코드\" style=\"position:relative;\"><a href=\"#2-%EC%A0%84%EC%B2%B4-%EC%BD%94%EB%93%9C\" aria-label=\"2 전체 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 전체 코드</h1>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useRef<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">'style.scss'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token literal-property property\">Typing</span><span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span><span class=\"token constant\">FC</span><span class=\"token operator\">&lt;</span>Props<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  phrases<span class=\"token punctuation\">,</span>\n  speed<span class=\"token punctuation\">,</span>\n  pause <span class=\"token operator\">=</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 기본 대기 시간 2초</span>\n  isInfinite <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>text<span class=\"token punctuation\">,</span> setText<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> textElementRef <span class=\"token operator\">=</span> useRef <span class=\"token operator\">&lt;</span> HTMLSpanElement <span class=\"token operator\">></span> <span class=\"token keyword\">null</span>\n  <span class=\"token keyword\">const</span> phraseIdx <span class=\"token operator\">=</span> useRef <span class=\"token operator\">&lt;</span> number <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token comment\">// 현재 문구의 위치</span>\n  <span class=\"token keyword\">const</span> charIdx <span class=\"token operator\">=</span> useRef <span class=\"token operator\">&lt;</span> number <span class=\"token operator\">></span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">const</span> interval <span class=\"token operator\">=</span> useRef <span class=\"token operator\">&lt;</span> NodeJS<span class=\"token punctuation\">.</span>Timeout <span class=\"token operator\">></span> <span class=\"token keyword\">null</span>\n\n  <span class=\"token comment\">// 타이핑 함수</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">typeText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> currentPhrase <span class=\"token operator\">=</span> phrases<span class=\"token punctuation\">[</span>phraseIdx<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">]</span>\n\n    <span class=\"token comment\">// 현재 문구 타이핑이 안 끝났을 경우</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>charIdx<span class=\"token punctuation\">.</span>current <span class=\"token operator\">&lt;</span> currentPhrase<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setCurrentText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">text</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> text <span class=\"token operator\">+</span> currentPhrase<span class=\"token punctuation\">[</span>charIdx<span class=\"token punctuation\">.</span>current<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 다음 글자 타이핑</span>\n      <span class=\"token keyword\">return</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 현재 문구가 마지막 문구가 아닐 경우</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>phraseIdx<span class=\"token punctuation\">.</span>current <span class=\"token operator\">&lt;</span> phrases<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      phraseIdx<span class=\"token punctuation\">.</span>current<span class=\"token operator\">++</span> <span class=\"token comment\">// 다음 문구로 이동</span>\n      charIdx<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token comment\">// 첫 번째 글자로 이동</span>\n      <span class=\"token function\">retypeAfterPause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 무한 반복이 설정되어 있을 경우</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isInfinite<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      phraseIdx<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token comment\">// 처음 문구로 이동</span>\n      stringIdx<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token comment\">// 첫 번재 글자로 이동</span>\n      <span class=\"token function\">retypeAfterPause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 타이핑 종료</span>\n    interval <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>interval<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 일시 정지 후, 문구 초기화 한 다음에 타이핑 재시작</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">retypeAfterPause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    interval <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>interval<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 기존 setInterval 제거</span>\n\n    <span class=\"token comment\">// pause 시간 이 후, setInterval 재설정</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setCurrentText</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 문구 초기화</span>\n      interval<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span>typeText<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span> <span class=\"token operator\">/</span> speed<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> pause<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// useEffect로 mount 이 후, 타이핑 함수 interval 시작</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> textElement <span class=\"token operator\">=</span> textElementRef<span class=\"token punctuation\">.</span>current\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>textElement<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      interval<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span>typeText<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span> <span class=\"token operator\">/</span> speed<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// clear</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      interval <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>interval<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>phrases<span class=\"token punctuation\">,</span> speed<span class=\"token punctuation\">,</span> pause<span class=\"token punctuation\">,</span> isInfinite<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>span ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>textElementRef<span class=\"token punctuation\">}</span> className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>typingText<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Typing</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token selector\">.typing-text </span><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0 0.1em 0 0<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 오른쪽 커서와의 거리</span>\n\n  <span class=\"token comment\">// 가상 선택자로 커서 생성</span>\n  <span class=\"token selector\"><span class=\"token parent important\">&amp;</span>::after </span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'|'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">animation</span><span class=\"token punctuation\">:</span> blink 1s <span class=\"token function\">steps</span><span class=\"token punctuation\">(</span>1<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span> infinite<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 깜빡거리는 애니메이션</span>\n<span class=\"token atrule\"><span class=\"token rule\">@keyframes</span> blink</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">50% </span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"3-사용-예시\" style=\"position:relative;\"><a href=\"#3-%EC%82%AC%EC%9A%A9-%EC%98%88%EC%8B%9C\" aria-label=\"3 사용 예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 사용 예시</h1>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#1-%EB%AA%A9%ED%91%9C\">1. 목표</a></p>\n<ul>\n<li><a href=\"#11-react-type-animation\">1.1. react-type-animation</a></li>\n<li><a href=\"#12-props-%EC%84%A4%EC%A0%95\">1.2. props 설정</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#2-%EC%A0%84%EC%B2%B4-%EC%BD%94%EB%93%9C\">2. 전체 코드</a></p>\n</li>\n<li>\n<p><a href=\"#3-%EC%82%AC%EC%9A%A9-%EC%98%88%EC%8B%9C\">3. 사용 예시</a></p>\n</li>\n</ul>","frontmatter":{"createdAt":"2023-06-22","isCompleted":true,"reference":null,"title":"타이핑 애니메이션 (React 컴포넌트)","updatedAt":"2023-06-22"}},"allMarkdownRemark":{"nodes":[{"id":"0870722f-a8c0-5ed8-94d1-cefc9d1874db","parent":{"id":"14ecdbed-fe30-5b30-8d55-034a45c83e01","name":"Typing_Effect","relativePath":"Animation/Typing_Effect.md"},"frontmatter":{"title":"타이핑 애니메이션 (React 컴포넌트)","createdAt":"2023-06-22","updatedAt":"2023-06-22"},"excerpt":"1. 목표 1.1. react-type-animation 구글링하면 react-type-animation라는 리액트용 타이핑 애니메이션 라이브러리가 바로 나온다. 이 라이브러리와 유사하게 동작하는 리액트 컴포넌트를 만드는 것이 오늘의 목표다.\n 1.…"}]}},"pageContext":{"pagePath":"posts/Animation/Typing_Effect.md","regex":"/^(?!.*README).*Animation.*$/","id":"0870722f-a8c0-5ed8-94d1-cefc9d1874db","parent":{"id":"14ecdbed-fe30-5b30-8d55-034a45c83e01","name":"Typing_Effect","relativeDirectory":"Animation","relativePath":"Animation/Typing_Effect.md"}}},"staticQueryHashes":["3300660363","3571427910"],"slicesMap":{}}