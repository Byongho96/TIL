{"componentChunkName":"component---src-templates-post-tsx","path":"/posts/Tools/Jenkins.md/","result":{"data":{"markdownRemark":{"id":"800d8c28-59b7-50e2-b2df-d3ab1d8deb9a","html":"<h1>Jenkins</h1>\n<h1>1. 개요</h1>\n<p>Jenkins는 빌드, 테스트 및 배포를 자동화할 수 있는 오픈 소스 도구이다. 또한 Jenkins는 다양한 플러그인을 지원하여 다양한 방식으로 빌드/배포를 할 수 있음은 물론이고, 다른 프로그램들과 연동되는 부가기능을 활용할 수 있다.</p>\n<h1>2. PipeLine</h1>\n<p>Jenkins Pipeline은 Jenkins에서 지속적인 통합 및 배포 과정을 설계하는 방법 중 하나입니다. Pipeline은 Pipeline Syntax에 따라 짜여진 일련의 지시문으로 구성되어 있으며, 코드 기반으로 파이프라인을 작성할 수 있습니다.</p>\n<p>Pipeline Scripts는 크게 Declarative Pipeline과 Scripted Pipeline 두 가지 유형이 있으며, 세부 문법은 <a href=\"https://www.jenkins.io/doc/book/pipeline/syntax/\">공식문서</a>에서 확인할 수 있다.\r\n그 중 Scripted Pipeline의 경우 Groovy 스크립트 언어를 사용해, 조건문이나 반복문을 프로그래밍 언어와 유사하게 구현할 수 있다.</p>\n<h2>2.1. Pipeline script</h2>\n<pre><code class=\"language-pipeline\">pipeline {\r\n\r\nagent none\r\n\r\n    tools {\r\n        maven 'apache-maven-3.0.1'\r\n    }\r\n\r\n    triggers {\r\n            cron('H */4 * * 1-5')\r\n    }\r\n\r\n    parameters {\r\n        string(name: 'PERSON', defaultValue: 'Mr Jenkins', description: 'Who should I say hello to?')\r\n\r\n    }\r\n    options {\r\n        timeout(time: 1, unit: 'HOURS')\r\n    }\r\n    stages {\r\n        stage('Example Build') {\r\n\r\n            input {\r\n                message \"Should we continue?\"\r\n                ok \"Yes, we should.\"\r\n                submitter \"alice,bob\"\r\n                parameters {\r\n                    string(name: 'PERSON', defaultValue: 'Mr Jenkins', description: 'Who should I say hello to?')\r\n                }\r\n            }\r\n\r\n            agent { docker 'maven:3.9.0-eclipse-temurin-11' }\r\n\r\n            options {\r\n                timeout(time: 1, unit: 'HOURS')\r\n            }\r\n\r\n            environment {\r\n                AN_ACCESS_KEY = credentials('my-predefined-secret-text')\r\n            }\r\n\r\n            steps {\r\n                echo 'Hello, Maven'\r\n                sh 'mvn --version'\r\n            }\r\n        }\r\n        stage('Example Test') {\r\n            agent { docker 'openjdk:8-jre' }\r\n            steps {\r\n                echo 'Hello, JDK'\r\n                sh 'java -version'\r\n            }\r\n        }\r\n    }\r\n\r\n     post {\r\n        always {\r\n            echo 'I will always say Hello again!'\r\n        }\r\n    }\r\n\r\n}\r\n\r\nwhen {\r\nbranch 'production'\r\n}\r\nsteps {\r\necho 'Deploying'\r\n}\r\n\r\nwhen {\r\nexpression { BRANCH_NAME ==~ /(production|staging)/ }\r\nanyOf {\r\nenvironment name: 'DEPLOY_TO', value: 'production'\r\nenvironment name: 'DEPLOY_TO', value: 'staging'\r\n}\r\n}\r\nsteps {\r\necho 'Deploying'\r\n}\r\n\r\nstage('Parallel In Sequential') {\r\nㄹ ailFast true\r\nparallel {\r\nstage('In Parallel 1') {\r\nsteps {\r\necho \"In Parallel 1\"\r\n}\r\n}\r\nstage('In Parallel 2') {\r\nsteps {\r\necho \"In Parallel 2\"\r\n}\r\n}\r\n}\r\n}\r\n\r\nmatrix {\r\naxes {\r\naxis {\r\nname 'PLATFORM'\r\nvalues 'linux', 'mac', 'windows'\r\n}\r\naxis {\r\nname 'BROWSER'\r\nvalues 'chrome', 'edge', 'firefox', 'safari'\r\n}\r\n}\r\n// ...\r\n}\n</code></pre>"}},"pageContext":{"pagePath":"posts/Tools/Jenkins.md","id":"800d8c28-59b7-50e2-b2df-d3ab1d8deb9a","parent":{"id":"d5bd08d3-dc55-5ff7-9f92-6998a1c8584f","name":"Jenkins","relativePath":"Tools/Jenkins.md"}}},"staticQueryHashes":["1274812890","3935499650","82772122"],"slicesMap":{}}