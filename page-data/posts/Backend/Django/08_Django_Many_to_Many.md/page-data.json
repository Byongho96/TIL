{"componentChunkName":"component---src-templates-post-index-tsx","path":"/posts/Backend/Django/08_Django_Many_to_Many.md/","result":{"data":{"markdownRemark":{"id":"caac3b53-95e0-5573-b4b1-0fff44f462d2","html":"<ul>\n<li><a href=\"#1-intro\">1. Intro</a>\n<ul>\n<li><a href=\"#11-terms\">1.1. Terms</a></li>\n<li><a href=\"#12-the-limits-of-n1-relationship\">1.2. The limits of N:1 Relationship</a></li>\n<li><a href=\"#13-intermediary-model\">1.3. Intermediary Model</a></li>\n<li><a href=\"#14-many-to-many-field\">1.4. Many To Many Field</a></li>\n<li><a href=\"#15-many-to-many-table\">1.5. Many To Many Table</a></li>\n<li><a href=\"#16-with-extra-fields\">1.6. with Extra Fields</a></li>\n</ul>\n</li>\n<li><a href=\"#2-like-article-user\">2. Like (Article-User)</a></li>\n<li><a href=\"#3-follow-user-user\">3. Follow (User-User)</a>\n<ul>\n<li><a href=\"#31-profile-page\">3.1. Profile Page</a></li>\n<li><a href=\"#32-follow\">3.2. Follow</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1 id=\"1-intro\" style=\"position:relative;\"><a href=\"#1-intro\" aria-label=\"1 intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Intro</h1>\n<h2 id=\"11-terms\" style=\"position:relative;\"><a href=\"#11-terms\" aria-label=\"11 terms permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.1. Terms</h2>\n<ul>\n<li><strong>Source Model</strong>\n<ul>\n<li>The model that has ManyToManyField</li>\n</ul>\n</li>\n<li><strong>Target model</strong>\n<ul>\n<li>The model that doesn't have ManyToManyField</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"12-the-limits-of-n1-relationship\" style=\"position:relative;\"><a href=\"#12-the-limits-of-n1-relationship\" aria-label=\"12 the limits of n1 relationship permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.2. The limits of N:1 Relationship</h2>\n<pre><code class=\"language-python\">class Doctor(models.Model):\n    name = models.TextField()\n\nclass Patient(models.Model):\n    doctor = models.ForeignKey(Doctor, on_delete=modles.CASCADE)\n    name = models.TextField()\n</code></pre>\n<p>If one patient make reservations with 2 diffrent doctors, you can't distingush whether the first Alex and the second Alex is the same person.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">id</th>\n<th align=\"center\">name</th>\n<th align=\"center\">doctor_id</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">1</td>\n<td align=\"center\">Alex</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">1</td>\n<td align=\"center\">Alex</td>\n<td align=\"center\">2</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"13-intermediary-model\" style=\"position:relative;\"><a href=\"#13-intermediary-model\" aria-label=\"13 intermediary model permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.3. Intermediary Model</h2>\n<pre><code class=\"language-python\">class Doctor(models.Model):\n    name = models.TextField()\n\nclass Patient(models.Model):\n    name = models.TextField()\n\nclass Reservation(models.Model):\n    doctor = models.ForeignKey(Doctor, on_delete=modles.CASCADE)\n    patient = models.ForeignKey(Patient, on_delete=modles.CASCADE)\n</code></pre>\n<ul>\n<li><strong>Create</strong>\n<ul>\n<li><code>Reservation.objects.create(doctor=doctor_instance, patient=patient_instance)</code></li>\n</ul>\n</li>\n<li><strong>Read</strong>\n<ul>\n<li>if doctor1 wants to read all the reservation\n<ul>\n<li><code>doctor1.reservaton_set.all()</code></li>\n</ul>\n</li>\n<li>if patient1 wants to read all the reservation\n<ul>\n<li><code>patinet1.reservaton_set.all()</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"14-many-to-many-field\" style=\"position:relative;\"><a href=\"#14-many-to-many-field\" aria-label=\"14 many to many field permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.4. Many To Many Field</h2>\n<pre><code class=\"language-python\">class Doctor(models.Model):\n    name = models.TextField()\n\nclass Patient(models.Model):\n    doctors = models.ManyToManyField(Doctor)\n    name = models.TextField()\n</code></pre>\n<ul>\n<li>\n<p><strong>MantoToManyField(to, **options)</strong></p>\n<ul>\n<li><strong>to</strong>\n<ul>\n<li>the target model</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><strong>options</strong>\n<ul>\n<li><strong>related_name</strong>\n<ul>\n<li>The alias of the dereference manager.</li>\n<li>Default value is <code>modelName_set</code></li>\n</ul>\n</li>\n<li><strong>through</strong>\n<ul>\n<li><a href=\"#16-manytomanyfield-with-extra-fields\">Desginate an intermediary table</a></li>\n</ul>\n</li>\n<li><strong>symmetrical</strong>\n<ul>\n<li>Default: True</li>\n<li>This argument is valid, only when <code>to = 'self'</code></li>\n<li>When it's True, the record for the opposite direction is automatically added.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><strong>Create</strong>\n<ul>\n<li><code>patient1.doctors.add(doctor1)</code></li>\n<li><code>doctor1.patient_set.add(patient1)</code></li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><strong>Read</strong>\n<ul>\n<li>if doctor1 wants to read all the reservation\n<ul>\n<li><code>doctor1.patient_set.all()</code></li>\n<li><code>doctor1.patient_set.get(id=doctor_id)</code></li>\n</ul>\n</li>\n<li>if patient1 wants to read all the reservation\n<ul>\n<li><code>patient1.doctors.all()</code></li>\n<li><code>doctor1.patient_set.get(id=patient_id)</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>Delete</strong>\n<ul>\n<li>if doctor1 wants to cancel the reservation with patient1\n<ul>\n<li><code>doctor1.patient_set.remove(patient1)</code></li>\n</ul>\n</li>\n<li>if patient1 wants to cancel the reservation with doctor1\n<ul>\n<li><code>patient1.doctors.remove(doctor1)</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"15-many-to-many-table\" style=\"position:relative;\"><a href=\"#15-many-to-many-table\" aria-label=\"15 many to many table permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.5. Many To Many Table</h2>\n<ul>\n<li><strong>Table Name</strong>\n<ul>\n<li>Default: <code>AppName_ModelName_FieldName</code></li>\n<li><code>db_table</code>\n<ul>\n<li>the argument for changing the table name</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>Field name</strong>\n<ul>\n<li>source model != target model\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>SourceModel_id</th>\n<th>TargetModel_id</th>\n</tr>\n</thead>\n</table>\n</li>\n<li>source model == target model (<code>to = 'self'</code>)\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>form_ModelName_id</th>\n<th>to_ModelName_id</th>\n</tr>\n</thead>\n</table>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"16-with-extra-fields\" style=\"position:relative;\"><a href=\"#16-with-extra-fields\" aria-label=\"16 with extra fields permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.6. with Extra Fields</h2>\n<p><strong>Make an intermediary model</strong></p>\n<pre><code class=\"language-python\">class Doctor(models.Model):\n    name = models.TextField()\n\nclass Patient(models.Model):\n    doctors = models.ManyToManyField(Doctor, related_name='patients', through='Reservation')\n    name = models.TextField()\n\nclass Reservation(models.Model):\n    doctor = models.ForeignKey(Doctor, on_delete=modles.CASCADE)\n    patient = models.ForeignKey(Patient, on_delete=modles.CASCADE)\n    symptom = models.TextField()\n    reserved_at = models.DateTimeField(auto_now_add=True)\n</code></pre>\n<ul>\n<li><strong>Create</strong>\n<ul>\n<li>through Reservation Model\n<ul>\n<li><code>Reservation.objects.create(doctor=doctor1, patient=patient1, symptom='stomachache')</code></li>\n</ul>\n</li>\n<li>through ManyToMany Field\n<ul>\n<li><code>patient1.doctors.add(doctor1, through_defaults={'symptom': 'flu'})</code></li>\n<li>through_defaults can be defined as a function</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"2-like-article-user\" style=\"position:relative;\"><a href=\"#2-like-article-user\" aria-label=\"2 like article user permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Like (Article-User)</h1>\n<ul>\n<li>\n<p><strong>models.py</strong></p>\n<pre><code class=\"language-python\">class Article(models.Model):\n    user = models.ForeignKey(setttings.AUTH_USER_MODEL, on_delete=models.CASCADE)\n    like_users = models.ManyToManyField(settings.AUTH_USER_MODEL, related_name=like_articles)\n</code></pre>\n<ul>\n<li><strong>relate_name should be specified</strong><br>\nOtherwise, in the upper case, the dereference manager name(user.article_set) would be duplicated.</li>\n</ul>\n</li>\n<li>\n<p><strong>forms.py</strong></p>\n<pre><code class=\"language-python\">class ArticleForm(models.ModelForm):\n\n    class Meta:\n        model = Article\n        exclude = ('user', 'like_users', )\n</code></pre>\n</li>\n<li>\n<p><strong>urls.py</strong></p>\n<pre><code class=\"language-python\">app_name = 'articles',\nurlpatterns = [\n    ...,\n    path('&#x3C;int:article_pk>/likes/', views.likes, name='likes')\n]\n</code></pre>\n</li>\n<li>\n<p><strong>views.py</strong></p>\n<pre><code class=\"language-python\">@require_POST\ndef likes(request, article_pk):\n    if request.user.is_authenticated:\n        article = Article.objects.get(pk=article_pk)\n        if article.like_usres.filter(pk=request.user.pk).exists():\n        # if request.user in article.like_users.all():\n        # get을 쓰면 객체가 없을 때 Error 발생\n            article.like_users.remove(request.user)\n        else:\n            article.like_users.add(request.user)\n        return redirect('articles:index')\n    return redirect('accounts:login')\n</code></pre>\n<ul>\n<li><strong>exists()</strong><br>\nReturns True if the QuerySet has value, or False</li>\n</ul>\n</li>\n<li>\n<p><strong>index.html</strong></p>\n<pre><code class=\"language-html\">{% block content %} {% for article in articles %}\n&#x3C;p>&#x3C;b>작성자 : {{ article.user }}&#x3C;/b>&#x3C;/p>\n&#x3C;p>글 번호: {{ article.pk }}&#x3C;/p>\n&#x3C;p>글 제목: {{ article.title }}&#x3C;/p>\n&#x3C;p>글 내용: {{ article.content }}&#x3C;/p>\n&#x3C;div>\n  &#x3C;form action=\"{% url 'article:likes' article.pk %}\" method=\"POST\">\n    {% csrf_token %} {% if request.user in article.like_users.all %}\n    &#x3C;input type=\"submit\" value=\"좋아요취소\" />\n    {% else %}\n    &#x3C;input type=\"submit\" value=\"좋아요\" />\n    {% endif %}\n  &#x3C;/form>\n&#x3C;/div>\n&#x3C;a href=\"{% url 'articles:detail' article.pk %}\">DETAIL&#x3C;/a>\n&#x3C;hr />\n{% endfor %} {% endblock content %}\n</code></pre>\n</li>\n</ul>\n<h1 id=\"3-follow-user-user\" style=\"position:relative;\"><a href=\"#3-follow-user-user\" aria-label=\"3 follow user user permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Follow (User-User)</h1>\n<h2 id=\"31-profile-page\" style=\"position:relative;\"><a href=\"#31-profile-page\" aria-label=\"31 profile page permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.1. Profile Page</h2>\n<ul>\n<li>\n<p><strong>urls.py</strong></p>\n<pre><code class=\"language-python\">app_name='accounts'\nurlpatterns = [\n    path('profile/&#x3C;str:username>/', views.profile, name='profile'),\n]\n</code></pre>\n<ul>\n<li>if you name the path as <code>path('&#x3C;str:username>/', views.profile, name='profile')</code>, you should consider the order of the url paths carefully.</li>\n</ul>\n</li>\n<li>\n<p><strong>views.py</strong></p>\n<pre><code class=\"language-python\">from django.contrib.auth import get_user_model\n\ndef profile(request, username):\n    User = get_user_model()\n    person = User.objects.get(username=username)\n    context = {\n        'person': person,\n    }\n    return render(request, 'accounts/prfile.html', context)\n</code></pre>\n</li>\n<li>\n<p><strong>profile.html</strong></p>\n<pre><code class=\"language-html\">{% block content %}\n&#x3C;h1>{{ person.username }}'s profile&#x3C;/h1>\n\n&#x3C;h4>{{ person.username }}'s articles&#x3C;/h4>\n{% for article in person.article_set.all %}\n&#x3C;div>{{ article.title }}&#x3C;/div>\n{% endfor %}\n&#x3C;hr />\n&#x3C;h4>{{ person.username }}'s comments&#x3C;/h4>\n{% for comment in person.comment_set.all %}\n&#x3C;div>{{ comment.content }}&#x3C;/div>\n{% endfor %}\n&#x3C;hr />\n&#x3C;h4>{{ person.username }}'s liked articles&#x3C;/h4>\n{% for article in person.like_articles.all %}\n&#x3C;div>{{ article.title }}&#x3C;/div>\n{% endfor %} {% endblock content %}\n</code></pre>\n</li>\n<li>\n<p><strong>base.html</strong></p>\n<pre><code class=\"language-html\">&#x3C;a href=\"{% url 'accounts:profile' user.username %}\">My Profile&#x3C;/a>\n</code></pre>\n</li>\n<li>\n<p><strong>index.html</strong></p>\n<pre><code class=\"language-html\">{% block content %} {% for article in articles %}\n&#x3C;p>\n  &#x3C;b\n    >작성자 :\n    &#x3C;a href=\"{% url 'accounts:profile' article.user.username %}\"\n      >{{ article.user }}&#x3C;/a\n    >&#x3C;/b\n  >\n&#x3C;/p>\n&#x3C;p>글 번호: {{ article.pk }}&#x3C;/p>\n&#x3C;p>글 제목: {{ article.title }}&#x3C;/p>\n&#x3C;p>글 내용: {{ article.content }}&#x3C;/p>\n&#x3C;a href=\"{% url 'articles:detail' article.pk %}\">DETAIL&#x3C;/a>\n&#x3C;hr />\n{% endfor %} {% endblock content %}\n</code></pre>\n</li>\n</ul>\n<h2 id=\"32-follow\" style=\"position:relative;\"><a href=\"#32-follow\" aria-label=\"32 follow permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.2. Follow</h2>\n<ul>\n<li><strong>models.py</strong>\n<pre><code class=\"language-python\">class User(AbstractUser):\n    followings = models.ManyToManyField('self', symmetrical=False, related_name='followers')\n</code></pre>\n</li>\n<li><strong>urls.py</strong>\n<pre><code class=\"language-python\">app_name = 'accounts',\nurlpatterns = [\n    ...,\n    path('&#x3C;int:user_pk>/follow/', views.follow, name='follow')\n]\n</code></pre>\n</li>\n<li><strong>views.py</strong>\n<pre><code class=\"language-python\">@require_POST\ndef follow(request, user_pk):\n    if request.user.is_authenticated:\n        if request.user.pk != user_pk:\n            User = get_user_model()\n            person = User.objects.get(pk=user_pk)\n            if person.followers.filter(pk=reqeust.user.pk).exists():\n            # if reuqest.user in person.followers.all():\n                person.followers.remove(request.user)\n            else:\n                person.followers.add(request.user)\n        return redirect('accounts:profile' person.username)\n    return redirect('accounts:login')\n</code></pre>\n</li>\n<li><strong>profile.html</strong>\n<pre><code class=\"language-html\">{% block content %}\n&#x3C;h1>{{ person.username }}'s profile&#x3C;/h1>\n&#x3C;div>\n  Followers: {{ person.followers.all|length }} Followings:{{\n  erson.followings.all|length }}\n&#x3C;/div>\n{% if request.user != person %}\n&#x3C;div>\n  &#x3C;form action=\"{% url 'accounts:follow' person.pk %}\" method=\"POST\">\n    {% csrf_token %} {% if request.user in person.followers.all %} &#x3C;input\n    type=\"submit\" value==\"Follow\"> {% else %} &#x3C;input type=\"submit\"\n    value==\"Unfollow\"> {% endif %}\n  &#x3C;/form>\n&#x3C;/div>\n... {% endblock content %}\n</code></pre>\n</li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#1-intro\">1. Intro</a></p>\n<ul>\n<li><a href=\"#11-terms\">1.1. Terms</a></li>\n<li><a href=\"#12-the-limits-of-n1-relationship\">1.2. The limits of N:1 Relationship</a></li>\n<li><a href=\"#13-intermediary-model\">1.3. Intermediary Model</a></li>\n<li><a href=\"#14-many-to-many-field\">1.4. Many To Many Field</a></li>\n<li><a href=\"#15-many-to-many-table\">1.5. Many To Many Table</a></li>\n<li><a href=\"#16-with-extra-fields\">1.6. with Extra Fields</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#2-like-article-user\">2. Like (Article-User)</a></p>\n</li>\n<li>\n<p><a href=\"#3-follow-user-user\">3. Follow (User-User)</a></p>\n<ul>\n<li><a href=\"#31-profile-page\">3.1. Profile Page</a></li>\n<li><a href=\"#32-follow\">3.2. Follow</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"Django N:M Realationship","createdAt":"2022-11-08","updatedAt":"2022-12-27","tags":null,"description":null,"reference":null}},"allMarkdownRemark":{"nodes":[{"id":"64fe3ac3-9ec7-5057-b5cf-209ab5b38218","parent":{"id":"b60ef590-337d-5fbc-ac3c-465bb644314e","name":"02_Django_CRUD","relativePath":"Backend/Django/02_Django_CRUD.md"},"frontmatter":{"title":"Django Basic CRUD","createdAt":"2022-11-08","updatedAt":"2022-12-24"},"excerpt":"0. Cross Site Request Forgery(CSRF) 0.1. What is CSRF 0.2. CSRF Token 1. Model 1.1. models.py 2. Create 2.1. urls.py 2.2. views.py 2.…"},{"id":"20c8e53f-b1bb-519c-8683-ea0afda9e0f7","parent":{"id":"318dafb0-b115-581e-8c4d-591d52550c0b","name":"01_Django_Basics_MTV","relativePath":"Backend/Django/01_Django_Basics_MTV.md"},"frontmatter":{"title":"Django Basics & MTV Design Pattern","createdAt":"2022-12-24","updatedAt":"2022-12-24"},"excerpt":"1. Django 1.1. Framework 1.2. Django 2. MTV Design Pattern 2.1. Design Pattern 2.2. MTV Design Pattern 3. Start Django 4. Django Folder…"},{"id":"f0b570c2-7aa3-5406-b3ed-5e4c7e6b403f","parent":{"id":"4381f074-5ff2-5dfe-b751-1022d9d9f64c","name":"03_Django_CRUD_ModelForm","relativePath":"Backend/Django/03_Django_CRUD_ModelForm.md"},"frontmatter":{"title":"Django CRUD with Model Form","createdAt":"2022-11-08","updatedAt":"2022-12-24"},"excerpt":"1. Model Form 1.1. Model Class 1.2. Form Class 1.3. ModeForm Class 2. Create 2.1. urls.py 2.2. views.py 2.3. templates.html 3. Read 3.…"},{"id":"2ceb5c6e-b5b1-5193-a1e5-f7a749ec9d9c","parent":{"id":"955390a3-0b4e-5e5e-8cbd-ce910a67d06a","name":"10_Django_Fixtures","relativePath":"Backend/Django/10_Django_Fixtures.md"},"frontmatter":{"title":"Django Fixtures","createdAt":"2022-11-08","updatedAt":"2022-12-27"},"excerpt":"1. Fixtures 1.1. The Definition of Fixtures 1.2. The Default Path of Fixtures 1.3. Create Fixtures 1.4. Import Fixtures 1. Fixtures How to…"},{"id":"9574434a-4495-56c8-9640-5aeadb7128d9","parent":{"id":"268fc07e-bdb0-532f-9d53-80eaba647676","name":"04_Django_Authentication","relativePath":"Backend/Django/04_Django_Authentication.md"},"frontmatter":{"title":"Django Internal Authentication","createdAt":"2022-12-24","updatedAt":"2023-01-02"},"excerpt":"1. Overview 1.1. Authentication 1.2. Authorization 1.3. accounts App 2. Custom User Model 2.1. User Model 2.2. Custom User Model 2.3. User…"},{"id":"040f5a80-2e15-5109-bf84-5e6b71ad4657","parent":{"id":"e4d09ce7-8429-558f-854b-88c647667db3","name":"07_Django_Many_to_One","relativePath":"Backend/Django/07_Django_Many_to_One.md"},"frontmatter":{"title":"Django N:1 Realationship","createdAt":"2022-11-08","updatedAt":"2022-12-27"},"excerpt":"1. Many to One Relationship 1.1. Foreign Key 2. Comment : Article (N:1) 2.1. Create 2.2. Read 2.3. Delete 3. Article : User (N:1) 3.…"},{"id":"caac3b53-95e0-5573-b4b1-0fff44f462d2","parent":{"id":"a18f7611-d467-5606-863c-845e9beab7d9","name":"08_Django_Many_to_Many","relativePath":"Backend/Django/08_Django_Many_to_Many.md"},"frontmatter":{"title":"Django N:M Realationship","createdAt":"2022-11-08","updatedAt":"2022-12-27"},"excerpt":"1. Intro 1.1. Terms 1.2. The limits of N:1 Relationship 1.3. Intermediary Model 1.4. Many To Many Field 1.5. Many To Many Table 1.6. with…"},{"id":"3a2ee22c-23db-53f4-8dec-93ac638a8eb6","parent":{"id":"e4db1fdd-48ab-522a-addc-f1db7b1effaa","name":"06_Django_QuerySet","relativePath":"Backend/Django/06_Django_QuerySet.md"},"frontmatter":{"title":"Django QuerySet","createdAt":"2022-12-24","updatedAt":"2022-12-25"},"excerpt":"1. QuerySet 1.1. Query 1.1. What is QuerySet 1.1.1. Check SQL Query 1.2. QuerySet API 1.3. QuerySet Evaluation and Caching 1.3.1. Evaluation…"},{"id":"d9cb8064-70f5-510a-970b-b24c6ac5e394","parent":{"id":"af752c25-7364-5944-ae08-73a796a8712a","name":"11_Django_REST_API","relativePath":"Backend/Django/11_Django_REST_API.md"},"frontmatter":{"title":"Django REST API","createdAt":"2022-11-08","updatedAt":"2022-12-28"},"excerpt":"1. HTTP 1.1. HTTP 정의 1.2. HTTP의 특징 1.3. HTTP Request Methods 1.3. HTTP Response Status Code 1.4. URI(Uniform Resource Indentifier) 1.5. URL…"},{"id":"564ce658-4880-550f-ae36-5b903fb66632","parent":{"id":"0bc65511-c15f-5f37-9355-27e5d252a113","name":"12_Django_REST_Authentication","relativePath":"Backend/Django/12_Django_REST_Authentication.md"},"frontmatter":{"title":"Django REST Authentication","createdAt":"2023-01-02","updatedAt":"2023-01-12"},"excerpt":"1. CORS 1.1. Same Origin Policy 1.2. Definition of Origin 1.3. CORS 1.3.1. django-cors-headers 2. Authentication 2.1. Authentication Class…"},{"id":"e4c8a797-8a3b-52bb-a234-c26e492b1401","parent":{"id":"688a0874-9671-5c95-b4b7-968e254af6fc","name":"09_Django_Static_Media","relativePath":"Backend/Django/09_Django_Static_Media.md"},"frontmatter":{"title":"Django Static Files","createdAt":"2022-11-08","updatedAt":"2022-12-27"},"excerpt":"1. Static Files 1.1. Static Files 1.2. Static Files with Django 1.3. Deploy Static Files 1.3.1. STATIC_ROOT 1.3.2. Procedure 2. Media Files…"},{"id":"1f86280a-2c23-53ff-af3d-c1ed6d223cab","parent":{"id":"83db0b1c-e3f7-5201-8706-1cbbf4b61c7a","name":"05_SQLite3_SQL","relativePath":"Backend/Django/05_SQLite3_SQL.md"},"frontmatter":{"title":"SQL Basics","createdAt":"2022-12-28","updatedAt":"2022-12-28"},"excerpt":"1. Database 1.1. RDB 1.2. Structure 2. SQL 2.1. SQL 2.2. Types of SQL Commands 2.3. SQL Syntax 2.4. Import .csv to Table 3. DDL 3.1. CREATE…"}]}},"pageContext":{"pagePath":"posts/Backend/Django/08_Django_Many_to_Many.md","regex":"/^(?!.*README).*Backend\\/Django.*$/","relativeDirectory":"Django","id":"caac3b53-95e0-5573-b4b1-0fff44f462d2","parent":{"id":"a18f7611-d467-5606-863c-845e9beab7d9","name":"08_Django_Many_to_Many","relativePath":"Backend/Django/08_Django_Many_to_Many.md"}}},"staticQueryHashes":["3300660363","3571427910"],"slicesMap":{}}