{"componentChunkName":"component---src-templates-post-index-tsx","path":"/posts/CS/Algorithm/MST.md/","result":{"data":{"markdownRemark":{"id":"3caa8e38-4ccc-5995-aff7-bcae8b32775d","html":"<h1 id=\"1-개요\" style=\"position:relative;\"><a href=\"#1-%EA%B0%9C%EC%9A%94\" aria-label=\"1 개요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 개요</h1>\n<p>신장 트리(Spanning Tree)는 그래프 내의 모든 노드를 포함하는 트리를 의미하며, **최소 신장 트리(Minimum Spanning Tree)**란 간선의 가중치 합이 최소가 되는 신장 트리를 말한다.</p>\n<p>최소 신장 트리는 Greedy 기법을 이용하여 구할 수 있으며, 대표적으로 프림 알고리즘(Prim's algorithm)과 크루스칼 알고리즘(Kruskal's algorithm)이 있다.</p>\n<h1 id=\"2-동작\" style=\"position:relative;\"><a href=\"#2-%EB%8F%99%EC%9E%91\" aria-label=\"2 동작 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 동작</h1>\n<h2 id=\"21-프림-알고리즘\" style=\"position:relative;\"><a href=\"#21-%ED%94%84%EB%A6%BC-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\" aria-label=\"21 프림 알고리즘 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.1. 프림 알고리즘</h2>\n<ol>\n<li>임의의 정점을 선택하여 하나의 정점을 갖는 최초의 트리를 구성한다.</li>\n<li>트리에 포함된 정점과 트리에 포함되지 않은 정점 간의 간선 중 가장 작은 가중치를 가지는 간선을 선택하여 트리에 추가한다.</li>\n<li>모든 정점이 트리에 포함될 때 까지 2를 반복한다.</li>\n</ol>\n<h2 id=\"22-크루스칼-알고리즘\" style=\"position:relative;\"><a href=\"#22-%ED%81%AC%EB%A3%A8%EC%8A%A4%EC%B9%BC-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\" aria-label=\"22 크루스칼 알고리즘 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.2. 크루스칼 알고리즘</h2>\n<ol>\n<li>그래프의 모든 간선의 집합 E을 만든다.</li>\n<li>E의 간선들 중 가중치가 최소인 간선을 지운다.</li>\n<li>삭제된 간선이 가리키는 두 정점 x,y를 연결하여도 사이클이 발생하지 않는다면 연결한다.</li>\n<li>모든 정점이 연결되거나 E가 비워질 때까지 2~3을 반복한다.</li>\n</ol>\n<h1 id=\"3-시간-복잡도\" style=\"position:relative;\"><a href=\"#3-%EC%8B%9C%EA%B0%84-%EB%B3%B5%EC%9E%A1%EB%8F%84\" aria-label=\"3 시간 복잡도 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 시간 복잡도</h1>\n<p>V: 노드의 갯수<br>\nE: 간선이 갯수</p>\n<p>간선이 많을수록 그래프의 경우 prim알고리즘이 유리하고, 간선이 적을수록 Kruskal 알고리즘이 유리하다.</p>\n<h2 id=\"31-프림-알고리즘\" style=\"position:relative;\"><a href=\"#31-%ED%94%84%EB%A6%BC-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\" aria-label=\"31 프림 알고리즘 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.1. 프림 알고리즘</h2>\n<p>O((V+E)logV)</p>\n<ul>\n<li>V개의 노드를 heap에서 V번 탐색하는 알고리즘 O(VlogV)</li>\n<li>E개의 간선을 탐색하는 과정 O(E)</li>\n<li>E개의 간선을 heap에 push하는 과정 O(ElogV)</li>\n</ul>\n<h2 id=\"32-크루스칼-알고리즘\" style=\"position:relative;\"><a href=\"#32-%ED%81%AC%EB%A3%A8%EC%8A%A4%EC%B9%BC-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\" aria-label=\"32 크루스칼 알고리즘 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.2. 크루스칼 알고리즘</h2>\n<p>O(ElogE)</p>\n<ul>\n<li>E개의 간선을 정렬하는 과정 O(ElogE)</li>\n<li>E개의 간선을 탐색하는 과정 O(E)</li>\n</ul>\n<h1 id=\"4-구현\" style=\"position:relative;\"><a href=\"#4-%EA%B5%AC%ED%98%84\" aria-label=\"4 구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4 구현</h1>\n<h2 id=\"41-prim\" style=\"position:relative;\"><a href=\"#41-prim\" aria-label=\"41 prim permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.1. Prim</h2>\n<ul>\n<li>\n<p><strong>Python</strong></p>\n<pre><code class=\"language-python\">'''\r\nN     : 노드 갯수\r\nstart : 시작 노드\r\nadjLst: 특정 노드의 인접 노드들과 가중치를 알 수 있는 컨테이너 자료\r\n'''\r\ndef prim(N, start, adjLst):\r\n    # 초깃값 셋팅\r\n    weight = [INF] * N\r\n    visited = [0] * N\r\n\r\n    # 시작점 지정\r\n    weight[start] = 0\r\n\r\n    for _ in range(N):\r\n        # MST 인접 노드 중 최소 가중치의 노드를 탐색\r\n        mn = INF\r\n        nearest = -1\r\n        for node in range(N):\r\n            if not visited[node] and weight[node] &#x3C; mn:\r\n                mn = weight[node]\r\n                nearest = node\r\n\r\n        visited[nearest] = True # 해당 노드 MST에 포함\r\n\r\n        # 새로 확정된 노드의 인접 노드들 거리 갱신\r\n        for adj, adj_w in adjLst[nearest]:\r\n            if not visited[adj]:\r\n                weight[adj] = min(weight[adj], adj_w)\r\n\r\n    return sum(weight)\n</code></pre>\n</li>\n</ul>\n<h2 id=\"42-prim-with-heap\" style=\"position:relative;\"><a href=\"#42-prim-with-heap\" aria-label=\"42 prim with heap permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.2. Prim with heap</h2>\n<ul>\n<li>\n<p><strong>Python</strong></p>\n<pre><code class=\"language-python\">'''\r\nN     : 노드 갯수\r\nstart : 시작 노드\r\nadjLst: 특정 노드의 인접 노드들과 가중치를 알 수 있는 컨테이너 자료\r\n'''\r\ndef prim_with_heap(N, start, adjLst):\r\n    # 초깃값 셋팅\r\n    weight = [INF] * N\r\n    visited = [0] * N\r\n\r\n    # 시작점 셋팅\r\n    heap = []\r\n    heapq.heappush(heap, (0, start))\r\n    weight[start] = 0\r\n\r\n    while heap:\r\n        w, nearest = heapq.heappop(heap)\r\n\r\n        if weight[nearest] &#x3C; w: # 새로 거리가 갱신된 노드는 무시\r\n            continue\r\n\r\n        visited[nearest] = 1    # MST에 해당 노드 포함\r\n\r\n        # 새로 확정된 노드의 인접 노드들 거리 갱신\r\n        for adj, adj_w in adjLst[nearest]:\r\n            if not visited[adj] and adj_w &#x3C; weight[adj]:\r\n                weight[adj] = adj_w\r\n                heapq.heappush(heap, (adj_w, adj))\r\n\r\n    return sum(weight)\n</code></pre>\n</li>\n</ul>\n<h2 id=\"43-kruskal\" style=\"position:relative;\"><a href=\"#43-kruskal\" aria-label=\"43 kruskal permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.3. Kruskal</h2>\n<ul>\n<li>\n<p><strong>Python</strong></p>\n<pre><code class=\"language-python\">'''\r\nN     : 노드 갯수\r\nadjLst: 특정 노드의 인접 노드들과 가중치를 알 수 있는 컨테이너 자료\r\n'''\r\n# 트리의 루트 노드를 찾는 함수\r\ndef find_set(par, x):\r\n  while x != par[x]:\r\n      x = par[x]\r\n  return x\r\n\r\n# 두 트리를 병합하는 함수\r\ndef union_by_rank(par, rank, x, y):\r\n    X = find_set(par, x)\r\n    Y = find_set(par, y)\r\n\r\n    X_rank = rank[X]\r\n    Y_rank = rank[Y]\r\n\r\n    # 트리의 rank(depth)를 기준으로, 작은 것을 큰 것에 병합\r\n    if X_rank == Y_rank:\r\n        par[Y] = X\r\n        rank[X] += 1\r\n    elif rank[X] > rank[Y]:\r\n        par[Y] = X\r\n    else:\r\n        par[X] = Y\r\n\r\ndef kruskal(N, adjLst):\r\n  par = [node for node in range(N)]   # 부모 노두 정보를 담는 리스트\r\n  rank = [1] * N                      # 루트 노드의 depth\r\n\r\n  # 간선 리스트를 만드는 과정. input에 따라 적절하게 설계\r\n  edges = []\r\n  for node1 in adjLst:\r\n      for node2, weight in adjLst[node1]:\r\n          edges.append((weight, node1, node2))\r\n  edges.sort() # 간선정보를 가중치를 기준으로 오름차순 정렬\r\n\r\n  mst_size = 0    # MST로 연결된 노드의 갯수\r\n  sum_weight = 0  # MST를 연결하기 위한 총 비용\r\n\r\n  for n1, ne, weight in edges:\r\n      if find_set(par, n1) != find_set(par, n2):  # n1, n2가 다른 집합에 속해있을 경우\r\n          union_by_rank(par, rank, n1, n2)  # par, rank모두 참조형 타입으로 넘겨줌\r\n          sum_weight += weight\r\n          mst_size += 1\r\n          if mst_size == N:   # 모든 노드를 연결했다면 종료\r\n              break\r\n\r\n  return sum_weight\n</code></pre>\n</li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#1-%EA%B0%9C%EC%9A%94\">1. 개요</a></p>\n</li>\n<li>\n<p><a href=\"#2-%EB%8F%99%EC%9E%91\">2. 동작</a></p>\n<ul>\n<li><a href=\"#21-%ED%94%84%EB%A6%BC-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\">2.1. 프림 알고리즘</a></li>\n<li><a href=\"#22-%ED%81%AC%EB%A3%A8%EC%8A%A4%EC%B9%BC-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\">2.2. 크루스칼 알고리즘</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#3-%EC%8B%9C%EA%B0%84-%EB%B3%B5%EC%9E%A1%EB%8F%84\">3. 시간 복잡도</a></p>\n<ul>\n<li><a href=\"#31-%ED%94%84%EB%A6%BC-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\">3.1. 프림 알고리즘</a></li>\n<li><a href=\"#32-%ED%81%AC%EB%A3%A8%EC%8A%A4%EC%B9%BC-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\">3.2. 크루스칼 알고리즘</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#4-%EA%B5%AC%ED%98%84\">4 구현</a></p>\n<ul>\n<li><a href=\"#41-prim\">4.1. Prim</a></li>\n<li><a href=\"#42-prim-with-heap\">4.2. Prim with heap</a></li>\n<li><a href=\"#43-kruskal\">4.3. Kruskal</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"최소 신장 트리(Minimum Spaaning Tree) 알고리즘","createdAt":"2023-04-17","updatedAt":"2023-04-17","tags":null,"description":null,"reference":null}},"allMarkdownRemark":{"nodes":[{"id":"7939e86d-bdfb-5483-986e-02f63ae4aa4f","parent":{"id":"692ec3a9-ad8c-5b81-a7e3-72a56c151935","name":"DFS","relativePath":"CS/Algorithm/DFS.md"},"frontmatter":{"title":"깊이 우선 탐색(Depth-First Search) 알고리즘","createdAt":"2023-03-14","updatedAt":"2023-04-17"},"excerpt":"1. 개요 상태공간이나 그래프를 출발점에서 시작하여 모든 리프노드까지 순서대로 탐색하는 완전탐색 기반의 알고리즘이다. 1.…"},{"id":"420f827b-7e9a-5ba3-84c5-079d0e613c51","parent":{"id":"607720b6-2a67-5d1d-8870-c0c764b0b9e9","name":"BFS","relativePath":"CS/Algorithm/BFS.md"},"frontmatter":{"title":"너비 우선 탐색(Breadth-First Search) 알고리즘","createdAt":"2023-03-05","updatedAt":"2023-04-17"},"excerpt":"1. 개요 상태공간이나 그래프를 출발점으로부터 가까운 순으로 탐색해가는 완전탐색 기반의 알고리즘이다. 1.…"},{"id":"5899393c-a6d2-5838-88c1-e6a799518c5a","parent":{"id":"ffd1636c-63d3-5640-9476-4c44cd5db595","name":"Dijkstra","relativePath":"CS/Algorithm/Dijkstra.md"},"frontmatter":{"title":"다익스트라(Dijkstra) 알고리즘","createdAt":"2023-02-27","updatedAt":"2023-04-17"},"excerpt":"1. 개요 음의 가중치가 없는 그래프의 한 노드에서 다른 모드 노드까지의 최단거리를 각각 구하는 알고리즘. 대표적으로 사용되는 그리디 알고리즘이다.…"},{"id":"d98bffa3-facd-5094-8dfc-f56c95a179a5","parent":{"id":"8b34d7b2-eccb-5a97-afe3-c80ffd3f8977","name":"DP","relativePath":"CS/Algorithm/DP.md"},"frontmatter":{"title":"동적 계획법(Dynamic Programming) 알고리즘","createdAt":"2023-03-27","updatedAt":"2023-04-03"},"excerpt":"…"},{"id":"7a4c0e05-95aa-57bb-87b5-525a6257879b","parent":{"id":"31d5f334-eece-5855-aba7-4e432d831130","name":"Backtracking","relativePath":"CS/Algorithm/Backtracking.md"},"frontmatter":{"title":"백트래킹(Backtracking) 알고리즘","createdAt":"2022-08-23","updatedAt":"2023-04-17"},"excerpt":"1. 개요 상태공간이나 그래프의 노드를 모두 탐색하는 완전탐색 기반의 알고리즘이다. 다만, 가지 치기를 통해 탐색할 필요성이 없는 노드(상태)들을 탐색 대상에서 제외함으로써 효율을 높인다.…"},{"id":"273392eb-4169-5932-a9f2-ef0d9c1a9d1a","parent":{"id":"80b4c1d4-dead-509e-b07f-154a02fd9124","name":"BinarySearch","relativePath":"CS/Algorithm/BinarySearch.md"},"frontmatter":{"title":"이진탐색(Binary Search) 알고리즘","createdAt":"2023-04-11","updatedAt":"2023-04-11"},"excerpt":"1. 개요 정렬된 데이터에서 검색 범위를 줄여 나가면서 목적 값을 찾는 알고리즘이다. 데이터가 정렬되어 있을 경우, 데이터를 크기가 같은 두 부분으로 나누고 유효한 데이터집합을 선 1.…"},{"id":"048cb962-4a92-5b64-bbab-c19dc0db92d4","parent":{"id":"2d442956-05a6-52cf-87fc-0aa0f080cf65","name":"Sorting","relativePath":"CS/Algorithm/Sorting.md"},"frontmatter":{"title":"정렬(Sorting) 알고리즘 정리","createdAt":"2023-05-02","updatedAt":"2023-05-03"},"excerpt":"면접에서 탈탈 털린 후 작성한 정렬 관련 알고리즘을 총정리 1. Bubble Sort (거품 정렬) 1.1. 동작 과정 1.2. 복잡도 1.3. Python 구현 2. Selection Sort (선택 정렬) 2.1. 동작 과정 2.2. 복잡도 2.…"},{"id":"3caa8e38-4ccc-5995-aff7-bcae8b32775d","parent":{"id":"4b2887d5-adc3-51ed-9e75-185d33c48940","name":"MST","relativePath":"CS/Algorithm/MST.md"},"frontmatter":{"title":"최소 신장 트리(Minimum Spaaning Tree) 알고리즘","createdAt":"2023-04-17","updatedAt":"2023-04-17"},"excerpt":"1. 개요 신장 트리(Spanning Tree)는 그래프 내의 모든 노드를 포함하는 트리를 의미하며, **최소 신장 트리(Minimum Spanning Tree)**란 간선의 가중치 합이 최소가 되는 신장 트리를 말한다. 최소 신장 트리는 Greedy…"}]}},"pageContext":{"pagePath":"posts/CS/Algorithm/MST.md","regex":"/^(?!.*README).*CS\\/Algorithm.*$/","relativeDirectory":"Algorithm","id":"3caa8e38-4ccc-5995-aff7-bcae8b32775d","parent":{"id":"4b2887d5-adc3-51ed-9e75-185d33c48940","name":"MST","relativePath":"CS/Algorithm/MST.md"}}},"staticQueryHashes":["1484934524","2644037009","4059933791"],"slicesMap":{}}