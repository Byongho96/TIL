{"componentChunkName":"component---src-templates-post-tsx","path":"/posts/CS/DB/Ch08_데이터베이스_설계.md/","result":{"data":{"markdownRemark":{"id":"3fbaec44-30d4-5447-acb3-03d984114460","html":"<p>김연희, 『데이터베이스 개론』, 한빛아카데미(2022.07.20), Chpater 08</p>\n<h1>Ch8. 데이터베이스 설계<!-- omit in toc --></h1>\n<ul>\n<li><a href=\"#81-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EC%84%A4%EA%B3%84-%EB%8B%A8%EA%B3%84\">8.1. 데이터베이스 설계 단계</a></li>\n<li><a href=\"#82-%EC%9A%94%EA%B5%AC-%EC%82%AC%ED%95%AD-%EB%B6%84%EC%84%9D\">8.2. 요구 사항 분석</a></li>\n<li><a href=\"#83-%EA%B0%9C%EB%85%90%EC%A0%81-%EC%84%A4%EA%B3%84\">8.3. 개념적 설계</a>\n<ul>\n<li><a href=\"#831-%EA%B0%9C%EC%B2%B4%EC%99%80-%EC%86%8D%EC%84%B1-%EC%B6%94%EC%B6%9C\">8.3.1. 개체와 속성 추출</a></li>\n<li><a href=\"#832-%EA%B4%80%EA%B3%84-%EC%B6%94%EC%B6%9C\">8.3.2. 관계 추출</a></li>\n<li><a href=\"#833-e-r-%EB%8B%A4%EC%9D%B4%EC%96%B4%EA%B7%B8%EB%9E%A8-%EC%9E%91%EC%84%B1\">8.3.3. E-R 다이어그램 작성</a></li>\n</ul>\n</li>\n<li><a href=\"#84-%EB%85%BC%EB%A6%AC%EC%A0%81-%EC%84%A4%EA%B3%84\">8.4. 논리적 설계</a>\n<ul>\n<li><a href=\"#841-%EB%A6%B4%EB%A0%88%EC%9D%B4%EC%85%98-%EC%8A%A4%ED%82%A4%EB%A7%88-%EB%B3%80%ED%99%98-%EA%B7%9C%EC%B9%99\">8.4.1. 릴레이션 스키마 변환 규칙</a></li>\n<li><a href=\"#842-%EB%A6%B4%EB%A0%88%EC%9D%B4%EC%85%98-%EC%8A%A4%ED%82%A4%EB%A7%88-%EB%B3%80%ED%99%98-%EA%B7%9C%EC%B9%99%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EB%85%BC%EB%A6%AC%EC%A0%81-%EC%84%A4%EA%B3%84\">8.4.2. 릴레이션 스키마 변환 규칙을 이용한 논리적 설계</a></li>\n</ul>\n</li>\n<li><a href=\"#85-%EB%AC%BC%EB%A6%AC%EC%A0%81-%EC%84%A4%EA%B3%84%EC%99%80-%EA%B5%AC%ED%98%84\">8.5. 물리적 설계와 구현</a></li>\n</ul>\n<p>E-R 모델과 릴레이션 변환 규칙을 이용해 데이터베이스를 설계하는 과정을 학습한다.</p>\n<h2>8.1. 데이터베이스 설계 단계</h2>\n<p>데이터베이스는 한 번 구축되면 변경이 어렵기 때문에 설계 과정에서부터 품질 좋은 데이터베이스를 구축해야 한다. 데이터베이스의 설계 방법에는 두 가지가 있다.<br>\n첫째는 E-R 모델과 릴레이션 변환 규칙을 이용하는 방식으로 이 장에서 학습한다.<br>\n둘째는 정규화를 이용한 방식으로 다음 9장에서 학습한다.</p>\n<p><mark style='background-color: #fff5b1'>E-R 모델과 릴레이션 변환 규칙을 이용한 설계는 <strong>5 단계</strong>로 진행된다.</mark></p>\n<ol>\n<li><strong>요구사항 분석</strong><br>\n실제 업무를 처리하는 사용자로부터 필요한 데이터의 종류의 처리 방법을 수집해 요구사항 명세서를 작성한다.</li>\n<li><strong>개념적 설계</strong><br>\n요구 사항 분석 단계에서 파악한 요구사항을 E-R모델(개념적 구조)로 구현한다.</li>\n<li><strong>논리적 설계</strong><br>\n적합한 DBMS를 이용해서 E-R모델을 바탕으로 릴레이션(테이블, 논리적 구조)를 생성한다.</li>\n<li><strong>물리적 설계</strong><br>\n물리적 구조란 데이터베이스를 실제 저장장치에 저장하기 위한 내부구조와 접근 경로 등을 의미한다.\r\n더 구체적으로 말하면, 저장 공간을 효율적으로 활용하면서 처리능력을 향상시킬 수 있는 물리적 구조를 설계해야 한다.</li>\n<li><strong>구현</strong><br>\nDBMS에서 SQL로 작성한 명령문을 실행하여 데이터베이스를 실제로 생성한다.</li>\n</ol>\n<h2>8.2. 요구 사항 분석</h2>\n<p>사용자들이 데이터베이스에 원하는 요구사항을 분석하고 요구사항 명세서를 작성한다. 이를 통해 데이터베이스의 용도를 명확히 파악하는 단계이다.</p>\n<p>이 때, 데이터베이스를 이용할 사용자의 범위를 설정하여. 불필요한 요구사항을 수집하지 않고, 사용자로부터 필요한 데이터를 수집하여 요구사항 명세서로 문서화해야 한다. 예시는 아래와 같다.</p>\n<img src=\"./images/%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD%EB%AA%85%EC%84%B8%EC%84%9C.PNG\" alt=\"요구사항 명세서\" width=\"500\">\n<h2>8.3. 개념적 설계</h2>\n<blockquote>\n<p>요구 사항 분석 결과를 바탕으로 데이터베이스에 저장해둘 필요가 있다고 판단되는 <strong>데이터 요소를 추출</strong>하고, <strong>데이터 요소 간의 관계</strong>를 파악하여 E-R다이어그램(개념적 스키마)으로 표현하는 단계이다.</p>\n</blockquote>\n<h3>8.3.1. 개체와 속성 추출</h3>\n<ul>\n<li>\n<p><strong>개체</strong><br>\n일반적으로 개체는 문장에서 명사로 표현된다. 일반적이거나 광범위한 명사는 제외하고, 의미가 같은 명사는 하나의 대표 명사만 선택한다.</p>\n</li>\n<li>\n<p><strong>속성</strong><br>\n속성 또한 명사로 표현되는데, 속성은 특정 객체에 종속적이라는 특징을 가진다.</p>\n</li>\n<li>\n<p><strong>예시</strong></p>\n<img src=\"./images/%EB%AA%85%EC%84%B8%EC%84%9C_%EB%AA%85%EC%82%AC_1.PNG\" alt=\"명세서\" width=\"500\">\n<ul>\n<li>한빛 마트는 일반적이고 광범위하므로 객체에서 제외한다.</li>\n<li>회원은 독립적인 하나의 객체로 여겨지고, 회원아이디, 비밀번호, 이름, 나이, 직업, 등급, 그리고 적립금은 회원 객체의 속성으로 볼 수 있다.</li>\n<li>회원 아이디는 회원 객체를 식별하는 키로 사용 지정할 수 있다.</li>\n</ul>\n<img src=\"./images/%EB%AA%85%EC%84%B8%EC%84%9C_%EB%AA%85%EC%82%AC_2.PNG\" alt=\"명세서\" width=\"500\">\n<ul>\n<li>회원과 상품은 객체로 분류한다.</li>\n<li>주문번호, 주문수량, 배송지, 주문일자 정보는 주문을 하면 생기는 데이터이지만, 회원이나 상품 객체에 항상 속해있는 속성은 아니다.</li>\n</ul>\n</li>\n<li>\n<p><strong>E-R 다이어그램</strong><br>\n명세서를 바탕으로 각 개체의 E-R다이어그램을 만들면 아래와 같다.<br>\n<img src=\"./images/E_R_%EB%8B%A4%EC%9D%B4%EC%96%B4%EA%B7%B8%EB%9E%A8_1.PNG\" alt=\"E-R 다이어그램\" width=\"500\"><br>\n<img src=\"./images/E_R_%EB%8B%A4%EC%9D%B4%EC%96%B4%EA%B7%B8%EB%9E%A8_2.PNG\" alt=\"E-R 다이어그램\" width=\"500\"><br>\n<img src=\"./images/E_R_%EB%8B%A4%EC%9D%B4%EC%96%B4%EA%B7%B8%EB%9E%A8_3.PNG\" alt=\"E-R 다이어그램\" width=\"500\"></p>\n</li>\n</ul>\n<h3>8.3.2. 관계 추출</h3>\n<ul>\n<li>\n<p><strong>관계</strong><br>\n관계는 개체 간의 의미 있는 연관성을 말한다. 일번적으로 관계는 명세서에서 동사로 표현된다. 단, 개체 간의 연관성을 의미 있게 표현한 동사만 선택하고, 의미가 비슷한 여러 개의 동사 중 대표 동사 하나만 선택한다. 그리고 각 관계에 대한 매핑 카디널리티(1:1, 1:n, n:m)와 참여특성(필수 참여, 선택 참여)을 결정한다.</p>\n</li>\n<li>\n<p><strong>예시</strong><br>\n<img src=\"./images/%EA%B4%80%EA%B3%84_%EC%B6%94%EC%B6%9C_1.PNG\" alt=\"관계추출\" width=\"500\"></p>\n<ul>\n<li>'입력해야 한다', '부여된다', '식별한다'는 모두 개체와 개체의 관계를 표현하는 동사로 볼 수 없다.</li>\n</ul>\n<img src=\"./images/%EA%B4%80%EA%B3%84_%EC%B6%94%EC%B6%9C_1.PNG\" alt=\"관계추출\" width=\"500\">\n<ul>\n<li>'주문할 수 있다'는 회원 개체와 상품 개체가 맺는 관계를 설명한다.회원 한 명이 여러 상품을 주문할 수 있고, 하나의 상품을 여러 회원이 주문할 수 있다고 했으므로 이는 <strong>m:n 관계</strong>이고, 회원이 상품을 반드시 주문해야 하는 것은 아니므로 회원 개체는 주문 관계에 <strong>선택적으로 참여</strong>한다. 또한 회원이 주문하지 않은 상품 또한 존재할 수 있으므로 상품 개체도 주문관계에 <strong>선택적으로 참여</strong>한다.</li>\n<li>주문번호, 주문수량, 배송지, 주문일자는 주문관계의 속성으로 분류할 수 있다.</li>\n</ul>\n<img src=\"./images/%EA%B4%80%EA%B3%84_%EC%B6%94%EC%B6%9C_3.PNG\" alt=\"관계추출\" width=\"500\">\n<ul>\n<li>'공급할 수 있다'는 상품 개체와 제조업체 개체가 맺는 관계를 설명한다. 하나의 상품은 제조업체 하나가 공급하고, 제조업체 하나는 여러 상품을 공급할 수 있으므로 제조업체 개체와 상품 개체가 맺는 관계는 <strong>1:n</strong>이다. 상품은 제조업체가 반드시 공급해야하므로 상품 개체는 공급 관계에 <strong>필수적으로 참여</strong>하고, 상품을 공급하지 않는 제조업체도 존재할 수 있으므로 제조업체 개체는 공급 관계에 <strong>선택적으로 참여</strong>한다.</li>\n</ul>\n<img src=\"./images/%EA%B4%80%EA%B3%84_%EC%B6%94%EC%B6%9C_4.PNG\" alt=\"관계추출\" width=\"500\">\n<ul>\n<li>'작성할 수 있다'는 회원 개체와 게시글 개체가 맺는 관계를 설명한다. 회원 한 명이 게시글을 여러 개 작성할 수 있고, 게시글 하나는 한 명의 회원만 작성할 수 있으므로 회원 개체와 게시글 개체가 맺는 관계는 <strong>1:n</strong>이다. 회원이 게시글을 반드시 작성해야 하는 것은 아니므로 회원 개체는 작성 관계에 <strong>선택적으로 참여</strong>한다. 게시글은 반드시 회원이 작성해야 하므로 게시글 개체는 작성 관계에 <strong>필수적으로 참여</strong>한다.</li>\n</ul>\n</li>\n<li>\n<p><strong>E-R 다이어그램</strong>\r\n명세서를 바탕으로 E-R다이어그램을 만들면 아래와 같다.\r\n<img src=\"./images/E_R_%EB%8B%A4%EC%9D%B4%EC%96%B4%EA%B7%B8%EB%9E%A8_4.PNG\" alt=\"E-R 다이어그램\" width=\"500\">\r\n<img src=\"./images/E_R_%EB%8B%A4%EC%9D%B4%EC%96%B4%EA%B7%B8%EB%9E%A8_5.PNG\" alt=\"E-R 다이어그램\" width=\"500\">\r\n<img src=\"./images/E_R_%EB%8B%A4%EC%9D%B4%EC%96%B4%EA%B7%B8%EB%9E%A8_6.PNG\" alt=\"E-R 다이어그램\" width=\"500\"></p>\n</li>\n</ul>\n<h3>8.3.3. E-R 다이어그램 작성</h3>\n<p>위에서 추출한 내용을 모두 종합하여 E-R 다이어그램을 그리면 다음과 같다.</p>\n<img src=\"./images/E_R_%EB%8B%A4%EC%9D%B4%EC%96%B4%EA%B7%B8%EB%9E%A8_7.PNG\" alt=\"E-R 다이어그램\" width=\"500\">\n<h2>8.4. 논리적 설계</h2>\n<blockquote>\n<p>개념적 스키마(E-R 다이어그램)를 기반으로 하여 DBMS가 처리할 수 있는 논리적 구조(릴레이션 스키마)를 설계하는 단계이다.</p>\n</blockquote>\n<p>E-R 다이어그램과 릴레이션 스키마는 다음과 같은 점에서 다르다.<br>\nE-R 모델에서는 개체와 관계를 구분하지만, 관계데이터모델에서는 개체와 관계를 구분하지 않고 모두 릴레이션으로 표현한다.<br>\nE-R 모델에서는 다중 값 속성이나 복합 속성의 표현을 허용하지만, 관계 데이터 모델에서는 다중값 속성과 복합 속성의 표현을 허용하지 않는다.</p>\n<h3>8.4.1. 릴레이션 스키마 변환 규칙</h3>\n<p>E-R 다이어그램을 릴레이션 스키마로 변환하는 다섯 가지 규칙을 소개한다. 다섯 가지 규칙을 순서대로 적용한 뒤에도, 9장에서 배울 정규화 과정을 통해 검증하는 작업이 필요하다.</p>\n<ul>\n<li>\n<p><strong>규칙1: 모든 개체는 릴레이션으로 변환한다</strong></p>\n<ul>\n<li>개체의 이름을 릴레이션 이름으로 한다.</li>\n<li>개체가 가진 속성은 릴레이션 속성으로 변환한다.\n<ul>\n<li>복합 속성의 경우, 복합 속성을 구성하는 단순 속성들을 풀어 릴레이션 속성을 정의한다.</li>\n</ul>\n</li>\n<li>개체가 가지고 있는 키 속성은 릴레이션의 기본키로 변환한다.</li>\n</ul>\n<img src=\"./images/%EA%B7%9C%EC%B9%991_%EB%B3%B5%ED%95%A9%EC%86%8D%EC%84%B1_%EB%B3%80%ED%99%98.PNG\" alt=\"규칙1_복합속성_변환\" width=\"600\">\n</li>\n<li>\n<p><strong>규칙2: 다대다 n:m 관계는 릴레이션으로 변환한다</strong></p>\n<ul>\n<li>관계의 이름을 릴레이션 이름으로 한다.</li>\n<li>관계의 속성을 릴레이션의 속성으로 한다.</li>\n<li>릴레이션들의 기본키를 관계릴레이션에 외래키로 포함시키고, 이 외래키들의 조합을 관계 릴레이션의 기본키로 지정한다.\n<ul>\n<li>만일 기본키의 이름이 서로 같을 경우, 구분을 위해 한 기본키의 이름을 변경해서 가져온다.</li>\n<li>필요하다면 별도의 기본키를 지정할 수도 있다.</li>\n</ul>\n</li>\n</ul>\n<img src=\"./images/%EA%B7%9C%EC%B9%992_%EB%8B%A4%EB%8C%80%EB%8B%A4%EA%B4%80%EA%B3%84_%EB%B3%80%ED%99%98.PNG\" alt=\"규칙2_다대다관계_변환\" width=\"600\">\n</li>\n<li>\n<p><strong>규칙3: 일대다 1:n 관계는 외래키로 표현한다</strong></p>\n<ul>\n<li>\n<p>일반적인 일대다 관계는 외래키로로만 표현한다. 1측 개체 릴레이션의 기본키를 가져와 n측 개체 릴레이션에 포함시키고 외래키로 지정한다.<br>\n<img src=\"./images/%EA%B7%9C%EC%B9%993_%EC%9D%BC%EB%8C%80%EB%8B%A4%EA%B4%80%EA%B3%84_%EB%B3%80%ED%99%98.PNG\" alt=\"규칙3_일대다관계_변환\" width=\"600\"></p>\n</li>\n<li>\n<p>약한(종속적인) 개체가 참여하는 일대다 관계는 외래키를 포함해서 기본키로 지정한다. 약한 개체는 강한 개체에 다라 존재 여부가 결정되기 때문이다.<br>\n<img src=\"./images/%EA%B7%9C%EC%B9%993_%EC%A2%85%EC%86%8D%EC%A0%81%EC%9D%B8_%EC%9D%BC%EB%8C%80%EB%8B%A4%EA%B4%80%EA%B3%84_%EB%B3%80%ED%99%98.PNG\" alt=\"규칙3_종속적인_일대다관계_변환\" width=\"600\"></p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>규칙4: 일대일 1:1 관계는 외래키로 표현한다</strong></p>\n<ul>\n<li>\n<p>일반적인 일대일 관계는 외래키를 서로 주고 받음으로써 표현할 수 있다.<br>\n<img src=\"./images/%EA%B7%9C%EC%B9%994_%EC%9D%BC%EB%8C%80%EC%9D%BC%EA%B4%80%EA%B3%84_%EB%B3%80%ED%99%98.PNG\" alt=\"규칙4_일대일관계_변환\" width=\"600\"></p>\n</li>\n<li>\n<p>하나의 릴레이션만이 외래키를 가지게 표현할 수도 있다. 만일 관계에 필수적으로 참여하는 개체가 있다면 해당 개체의 릴레이션이 외래키와 기타 관계속성을 가진다.<br>\n<img src=\"./images/%EA%B7%9C%EC%B9%994_%EC%9D%BC%EB%8C%80%EC%9D%BC%EA%B4%80%EA%B3%84_%EB%B3%80%ED%99%982.PNG\" alt=\"규칙4_일대일관계_변환2\" width=\"600\"></p>\n</li>\n<li>\n<p>혹은 새로운 릴레이션을 만들 수도 있다. 그리고 각 개체의 기본키를 외래키로 두고, 이를 조합하여 새로운 릴레이션의 기본키로 사용할 수 있다.<br>\n<img src=\"./images/%EA%B7%9C%EC%B9%994_%EC%9D%BC%EB%8C%80%EC%9D%BC%EA%B4%80%EA%B3%84_%EB%B3%80%ED%99%983.PNG\" alt=\"규칙4_일대일관계_변환3\" width=\"600\"></p>\n</li>\n<li>\n<p>모든 개체가 일대일 관계에 필수적으로 참여한다면 릴레이션을 하나로 합친다.<br>\n<img src=\"./images/%EA%B7%9C%EC%B9%994_%ED%95%84%EC%88%98%EC%B0%B8%EC%97%AC_%EC%9D%BC%EB%8C%80%EC%9D%BC%EA%B4%80%EA%B3%84_%EB%B3%80%ED%99%98.PNG\" alt=\"규칙4_필수참여_일대일관계_변환\" width=\"600\"></p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>규칙5: 다중 값 속성은 릴레이션으로 변환한다</strong></p>\n<ul>\n<li>다중 값 속성을 가질 경우, 해당 다중값 속성을 속성으로 가지는 하나의 릴레이션을 새로 만들어 해당 속성을 가지고 있는 릴레이션을 기본키를 외래키로 둔다.<br>\n<img src=\"./images/%EA%B7%9C%EC%B9%995_%EB%8B%A4%EC%A4%91%EA%B0%92%EC%86%8D%EC%84%B1_%EB%B3%80%ED%99%98.PNG\" alt=\"규칙5_다중값속성_변환\" width=\"600\"></li>\n</ul>\n</li>\n</ul>\n<h3>8.4.2. 릴레이션 스키마 변환 규칙을 이용한 논리적 설계</h3>\n<p>앞 절에서 배운 규칙들을 적용하여 한빛 마트 E-R 다이어그램을 논리적으로 설계하면 아래와 같다.</p>\n<ul>\n<li>\n<p><strong>E-R 다이어그램</strong><br>\n<img src=\"./images/%ED%95%9C%EB%B9%9B%EB%A7%88%ED%8A%B8_E_R%EB%8B%A4%EC%9D%B4%EC%96%B4%EA%B7%B8%EB%9E%A8.PNG\" alt=\"한빛마트_E_R_다이어그램\" width=\"600\"></p>\n</li>\n<li>\n<p><strong>규칙1 적용결과</strong><br>\n<img src=\"./images/%ED%95%9C%EB%B9%9B%EB%A7%88%ED%8A%B8_%EA%B7%9C%EC%B9%991_%EC%A0%81%EC%9A%A9%EA%B2%B0%EA%B3%BC.PNG\" alt=\"한빛마트_규칙1_적용결과\" width=\"600\"></p>\n</li>\n<li>\n<p><strong>규칙2 적용결과</strong><br>\n<img src=\"./images/%ED%95%9C%EB%B9%9B%EB%A7%88%ED%8A%B8_%EA%B7%9C%EC%B9%992_%EC%A0%81%EC%9A%A9%EA%B2%B0%EA%B3%BC.PNG\" alt=\"한빛마트_규칙2_적용결과\" width=\"600\"></p>\n</li>\n<li>\n<p><strong>규칙3 적용결과</strong><br>\n<img src=\"./images/%ED%95%9C%EB%B9%9B%EB%A7%88%ED%8A%B8_%EA%B7%9C%EC%B9%993_%EC%A0%81%EC%9A%A9%EA%B2%B0%EA%B3%BC.PNG\" alt=\"한빛마트_규칙2_적용결과\" width=\"600\"></p>\n</li>\n</ul>\n<h2>8.5. 물리적 설계와 구현</h2>\n<blockquote>\n<p>물리적 설계 단계에서는 하드웨워나 운영체제의 특성을 고려하여 필요한 인덱스 구조, 내부 저장 구조, 접근 경로 등의 물리적이 구조를 설계한다. 그리고 DBMS를 이용해 SQL문을 작성하고 이를 실행시켜 실제 데이터베이스를 생성한다.</p>\n</blockquote>\n<p><a href=\"https://rebro.kr/167\">DB 인덱스 구조에 대한 블로그 글</a></p>"}},"pageContext":{"pagePath":"posts/CS/DB/Ch08_데이터베이스_설계.md","id":"3fbaec44-30d4-5447-acb3-03d984114460","parent":{"id":"24b60f6e-167d-5b22-98b3-2a0735ef836a","name":"Ch08_데이터베이스_설계","relativePath":"CS/DB/Ch08_데이터베이스_설계.md"}}},"staticQueryHashes":["1274812890","3935499650","82772122"],"slicesMap":{}}