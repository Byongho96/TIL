{"componentChunkName":"component---src-templates-post-tsx","path":"/posts/Vue/03_Vue_Vuex_and_Lifecycle_Hooks.md/","result":{"data":{"markdownRemark":{"id":"3dc2e2f4-10ec-502e-ae8d-ec2b1f16577f","html":"<h1>Vuex and Lifecycle Hooks</h1>\n<h2>Index</h2>\n<ul>\n<li><a href=\"#1-vuex\">1. Vuex</a>\n<ul>\n<li><a href=\"#11-stage-management\">1.1. Stage Management</a>\n<ul>\n<li><a href=\"#111-limitations-of-pass-props--emit-events\">1.1.1. Limitations of Pass Props &#x26; Emit Events</a></li>\n<li><a href=\"#112-centralized-store\">1.1.2. Centralized Store</a></li>\n</ul>\n</li>\n<li><a href=\"#12-start-vuex\">1.2. Start Vuex</a>\n<ul>\n<li><a href=\"#121-cli-procedures\">1.2.1. CLI Procedures</a></li>\n<li><a href=\"#122-strcuture-of-vuex-instance\">1.2.2. Strcuture of Vuex Instance</a></li>\n<li><a href=\"#123-data-flow-through-vuex\">1.2.3. Data Flow through Vuex</a></li>\n</ul>\n</li>\n<li><a href=\"#13-practice-vuex\">1.3. Practice Vuex</a></li>\n</ul>\n</li>\n<li><a href=\"#2-lifecycle-hooks\">2. Lifecycle Hooks</a>\n<ul>\n<li><a href=\"#21-lifecycle-hooks\">2.1. Lifecycle Hooks</a></li>\n</ul>\n</li>\n<li><a href=\"#3-todo-list-crud-practice-with-vuex\">3. Todo List CRUD Practice with Vuex</a>\n<ul>\n<li><a href=\"#31-local-storage\">3.1. Local Storage</a>\n<ul>\n<li><a href=\"#311-windowlocalstorage\">3.1.1. Window.localStorage</a></li>\n<li><a href=\"#312-vuex-persistedstate\">3.1.2. vuex-persistedstate</a></li>\n</ul>\n</li>\n<li><a href=\"#32-code\">3.2. Code</a>\n<ul>\n<li><a href=\"#321-indexjs\">3.2.1. index.js</a></li>\n<li><a href=\"#322-appvue\">3.2.2. App.vue</a></li>\n<li><a href=\"#323-todoformvue\">3.2.3. TodoForm.vue</a></li>\n<li><a href=\"#323-todolistvue\">3.2.3. TodoList.vue</a></li>\n<li><a href=\"#323-todolistitemvue\">3.2.3. TodoListItem.vue</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1>1. Vuex</h1>\n<h2>1.1. Stage Management</h2>\n<p><strong>What is state?</strong><br>\nState is <mark>the current data</makr></p>\n<p><strong>What is state management?</strong><br>\nSharing the same data state between multiple independent components</p>\n<h3>1.1.1. Limitations of Pass Props &#x26; Emit Events</h3>\n<p><img src=\"./images/03_limitations_of_pass_props_emit_events.PNG\" alt=\"03_limitations_of_pass_props_emit_events.PNG\"><br>\nIf the depth of the tree is deep, transferring data form to another which is not the parent or a child.</p>\n<h3>1.1.2. Centralized Store</h3>\n<p><img src=\"./images/03_centralized_store.PNG\" alt=\"03_centralized_store.PNG\"><br>\nThe central storage can be accessed by a node regardless of its depth to obtain or change data. It's preferable for a big or complicated project.</p>\n<p><strong>Vuex</strong><br>\nVuex is the central storage of Vue. It also has rules that allow data to change only in predictable ways, therefore it can effectively manage the state.</p>\n<h2>1.2. Start Vuex</h2>\n<h3>1.2.1. CLI Procedures</h3>\n<pre><code>vue create {folder_name}    // Create a Vue project\r\n\r\ncd {folder_name}            // Change directory to the created folder\r\n\r\nvue add vuex                // Apply Vuex to the Vue project\n</code></pre>\n<h3>1.2.2. Strcuture of Vuex Instance</h3>\n<p>If you follow the <a href=\"#121-cli-procedures\">commands above</a>, <code>src/store/index.js</code> will be newly created. 'index.js' contains a Vuex instance which looks similar to Vue instance.</p>\n<p><img src=\"./images/03_vuex_instance_vue_instance.PNG\" alt=\"03_vuex_instance_vue_instance.PNG\"></p>\n<ul>\n<li><strong>state</strong>\n<ul>\n<li>corresponds to the <strong>data</strong> in the Vue instance.</li>\n<li>There's dat which is manged in the centralized storage.</li>\n<li>It can be accessed from othe components by <code>vueInstance.$store.state</code></li>\n</ul>\n</li>\n<li><strong>getters</strong>\n<ul>\n<li>corresponds to the <strong>computed</strong> in the Vue instance.</li>\n<li>It also chaches the processed data.</li>\n<li>All the functions in the mutations get <code>state</code>, <code>getter</code> as the first two arguments.</li>\n</ul>\n</li>\n<li><strong>mutations</strong>\n<ul>\n<li>corresponds to the <strong>methods</strong> in the Vue instance, and it only <strong>0can change the state.</strong></li>\n<li>To specify the moment when the state is changed, all the functions in the mutations should be <strong>synchronous</strong>.</li>\n<li>All the functions in the mutations get <code>state</code> as the first argument.</li>\n<li>It can be called through <code>vuexInstance.commit()</code> method.</li>\n</ul>\n</li>\n<li><strong>actions</strong>\n<ul>\n<li>corresponds to the <strong>methods</strong> in the Vue instance, and it <strong>should not change the state.</strong></li>\n<li>A function in the actions can contain <strong>asynchronous</strong> process. If it calls a function in the mutations to change the state.</li>\n<li>All the functions in the actions get <code>context</code> as the first argument.\r\nIt can be called through <code>vuexInstance.dispatch()</code> method.</li>\n</ul>\n</li>\n</ul>\n<h3>1.2.3. Data Flow through Vuex</h3>\n<p><img src=\"./images/03_vuex_data_flow.PNG\" alt=\"03_vuex_data_flow.PNG\"></p>\n<ul>\n<li>\n<p><strong>Manipulating the state</strong></p>\n<ul>\n<li>component -> (actions) -> mutations -> state</li>\n</ul>\n</li>\n<li>\n<p><strong>Using the state</strong></p>\n<ul>\n<li>state -> (getters) -> component</li>\n</ul>\n</li>\n</ul>\n<h2>1.3. Practice Vuex</h2>\n<p><strong>index.js</strong></p>\n<pre><code class=\"language-js\">export default new Vuex.Store({\r\n  state: {\r\n    message: 'message in store',\r\n  },\r\n  getters: {\r\n    messageLength(state) {\r\n      return state.message.length\r\n    },\r\n  },\r\n  mutations: {\r\n    CHANGE_MESSAGE(state, message) {\r\n      state.message = message\r\n    },\r\n  },\r\n  actions: {\r\n    changeMessage(context, message) {\r\n      context.commit('CHANGE_MESSAGE', message)\r\n    },\r\n  },\r\n  modules: {},\r\n})\n</code></pre>\n<p><strong>App.vue</strong></p>\n<pre><code class=\"language-html\">&#x3C;template>\r\n  &#x3C;div id=\"app\">\r\n    &#x3C;h1>{{ message }}&#x3C;/h1>\r\n    &#x3C;h3>message length: {{ messageLength }}&#x3C;/h3>\r\n    &#x3C;input type=\"text\" @keyup.enter=\"changeMessage\" v-model=\"inputData\" />\r\n  &#x3C;/div>\r\n&#x3C;/template>\r\n\r\n&#x3C;script>\r\n  export default {\r\n    name: 'App',\r\n    data() {\r\n      return {\r\n        inputData: null,\r\n      }\r\n    },\r\n    computed: {\r\n      message() {\r\n        return this.$store.state.message\r\n      },\r\n      messageLength() {\r\n        return this.$store.getters.messageLength\r\n      },\r\n    },\r\n    methods: {\r\n      changeMessage() {\r\n        const newMessage = this.inputData\r\n        this.$store.dispatch('changeMessage', newMessage)\r\n        this.inputData = null\r\n      },\r\n    },\r\n  }\r\n&#x3C;/script>\n</code></pre>\n<hr>\n<h1>2. Lifecycle Hooks</h1>\n<h2>2.1. Lifecycle Hooks</h2>\n<p>There are several points which can be specified in the lifecyle of a Vue instance. It's possible to automatically execute a preset logic at each point.</p>\n<p><img src=\"./images/03_lifecycle_hooks.PNG\" alt=\"03_lifecycle_hooks.PNG\"></p>\n<ul>\n<li>\n<p><strong>create</strong><br>\nThe point when the Vue instance is created</p>\n</li>\n<li>\n<p><strong>mount</strong><br>\nThe point when the Vue instance is linked to the DOM</p>\n</li>\n<li>\n<p><strong>update</strong><br>\nThe point when the DOM is updated</p>\n</li>\n<li>\n<p><strong>destroy</strong><br>\nThe point when the Vue instance is destroyed</p>\n</li>\n</ul>\n<p><strong>Example code</strong></p>\n<pre><code class=\"language-js\">export default {\r\n  ...\r\n  beforeCreate() {\r\n    console.log('beforeCreate')\r\n  },\r\n  created() {\r\n    console.log('created')\r\n  },\r\n  beforeMount() {\r\n    console.log('beforeMount')\r\n  },\r\n  mounted() {\r\n    console.log('mounted')\r\n  },\r\n}\n</code></pre>\n<p>--</p>\n<h1>3. Todo List CRUD Practice with Vuex</h1>\n<h2>3.1. Local Storage</h2>\n<p><strong><a href=\"https://www.daleseo.com/js-web-storage/\">Local Stoarge and Session Storage</a></strong><br>\nA browser storage where data is saved in key-value form. The key is used for distinguising the data source, and the value is sotred as <strong>JSON string</strong>. This sotorage is maintained until it is intentionally deleted.</p>\n<ul>\n<li>F12 -> Application -> Storage -> Local Storage</li>\n</ul>\n<h3>3.1.1. Window.localStorage</h3>\n<p>The object which has mehtods for manipulating local sotrage.</p>\n<p><strong>localStorage.setItem(key: string, value: string)</strong><br>\nStore the value in the local storage with the key.<br>\nTo change JS object into JSON, you can use <code>JSON.stringfy()</code></p>\n<p><strong>localStorage.getItem(key: string)</strong><br>\nGet the value of the key from the local storage.<br>\nTo change JSON into JS object, you can use <code>JSON.parse()</code></p>\n<h3>3.1.2. vuex-persistedstate</h3>\n<p>The library which has function for automatically storing and reloading Vuex state.</p>\n<p><strong>Install</strong><br>\n<code>npm i vuex-persistedstate</code></p>\n<p><strong>Apply</strong></p>\n<pre><code class=\"language-js\">// index.js\r\nimport createPersistedState from 'vuex-persistedstate'\r\n\r\nVue.use(Vuex)\r\n\r\nexport default new Vuex.STore({\r\n  plugins: [createPersistedState()],\r\n})\n</code></pre>\n<h2>3.2. Code</h2>\n<p><img src=\"./images/03_todo_structure.PNG\" alt=\"03_todo_structure.PNG\"></p>\n<h3>3.2.1. index.js</h3>\n<pre><code class=\"language-js\">import Vue from 'vue'\r\nimport Vuex from 'vuex'\r\nimport createPersistedState from 'vuex-persistedstate'\r\n\r\nVue.use(Vuex)\r\n\r\nexport default new Vuex.Store({\r\n  plugins: [createPersistedState()],\r\n  state: {\r\n    todos: [],\r\n  },\r\n  getters: {\r\n    allTodosCount(state) {\r\n      return state.todos.length\r\n    },\r\n    // The number of completed todoItems\r\n    completedTodosCount(state) {\r\n      const completedTodos = state.todos.filter((todo) => {\r\n        return todo.isCompleted === true\r\n      })\r\n      return completedTodos.length\r\n    },\r\n    // The number of uncompleted todoItems\r\n    unCompletedTodosCount(state, getters) {\r\n      return getters.allTodosCount - getters.completedTodosCount\r\n    },\r\n  },\r\n  mutations: {\r\n    CREATE_TODO(state, todoItem) {\r\n      state.todos.push(todoItem)\r\n    },\r\n    DELETE_TODO(state, todoItem) {\r\n      const index = state.todos.indexOf(todoItem)\r\n      state.todos.splice(index, 1)\r\n    },\r\n    // Change isCompleted attribute of todoItem\r\n    UPDATE_TODO_STATUS(state, todoItem) {\r\n      console.log(todoItem)\r\n      state.todos = state.todos.map((todo) => {\r\n        if (todo === todoItem) {\r\n          todo.isCompleted = !todo.isCompleted\r\n        }\r\n        return todo\r\n      })\r\n    },\r\n    // // createPersistedState() replaced this function.\r\n    // LOAD_TODOS(state) {\r\n    //   const localStorageTodos = localStorage.getItem('todos')\r\n    //   const parsedTodos = JSON.parse(localStorageTodos)\r\n    //   state.todos = parsedTodos\r\n    // },\r\n  },\r\n  actions: {\r\n    createTodo(context, todoTitle) {\r\n      const todoItem = {\r\n        title: todoTitle,\r\n        isCompleted: false,\r\n      }\r\n      context.commit('CREATE_TODO', todoItem)\r\n      // context.dispatch('saveTodosToLocalStorage')\r\n    },\r\n    deleteTodo(context, todoItem) {\r\n      context.commit('DELETE_TODO', todoItem)\r\n      // context.dispatch('saveTodosToLocalStorage')\r\n    },\r\n    updateTodoStatus(context, todoItem) {\r\n      context.commit('UPDATE_TODO_STATUS', todoItem)\r\n      // context.dispatch('saveTodosToLocalStorage')\r\n    },\r\n    // // createPersistedState() replaced this function.\r\n    // saveTodosToLocalStorage(context) {\r\n    //   const jsonTodos = JSON.stringify(context.state.todos)\r\n    //   localStorage.setItem('todos', jsonTodos)\r\n    // },\r\n\r\n    // // createPersistedState() replaced this function.\r\n    // loadTodos(context) {\r\n    //   context.commit('LOAD_TODOS')\r\n    // }\r\n  },\r\n  modules: {},\r\n})\n</code></pre>\n<h3>3.2.2. App.vue</h3>\n<pre><code class=\"language-html\">&#x3C;template>\r\n  &#x3C;div id=\"app\">\r\n    &#x3C;h1>Todo List&#x3C;/h1>\r\n    &#x3C;h2>Number of All Todos: {{ allTodosCount }}&#x3C;/h2>\r\n    &#x3C;h2>Number of Completed Todos: {{ completedTodosCount }}&#x3C;/h2>\r\n    &#x3C;h2>Number of Uncompleted Todos: {{ unCompletedTodosCount }}&#x3C;/h2>\r\n    &#x3C;TodoList />\r\n    &#x3C;TodoForm />\r\n    &#x3C;!-- &#x3C;button @click=\"loadTodos\">Reload Todo List&#x3C;/button> -->\r\n  &#x3C;/div>\r\n&#x3C;/template>\r\n\r\n&#x3C;script>\r\n  import TodoList from '@/components/TodoList'\r\n  import TodoForm from '@/components/TodoForm'\r\n\r\n  export default {\r\n    name: 'App',\r\n    components: {\r\n      TodoList,\r\n      TodoForm,\r\n    },\r\n    computed: {\r\n      allTodosCount() {\r\n        return this.$store.getters.allTodosCount\r\n      },\r\n      completedTodosCount() {\r\n        return this.$store.getters.completedTodosCount\r\n      },\r\n      unCompletedTodosCount() {\r\n        return this.$store.getters.unCompletedTodosCount\r\n      },\r\n    },\r\n    methods: {\r\n      loadTodos() {\r\n        this.$store.dispatch('loadTodos')\r\n      },\r\n    },\r\n  }\r\n&#x3C;/script>\r\n\r\n&#x3C;style>\r\n  #app {\r\n    font-family: Avenir, Helvetica, Arial, sans-serif;\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n    text-align: center;\r\n    color: #2c3e50;\r\n    margin-top: 60px;\r\n  }\r\n&#x3C;/style>\n</code></pre>\n<h3>3.2.3. TodoForm.vue</h3>\n<pre><code class=\"language-html\">&#x3C;template>\r\n  &#x3C;div>\r\n    &#x3C;input type=\"text\" v-model.trim=\"todoTitle\" @keyup.enter=\"createTodo\" />\r\n  &#x3C;/div>\r\n&#x3C;/template>\r\n\r\n&#x3C;script>\r\n  export default {\r\n    name: 'TodoForm',\r\n    data() {\r\n      return {\r\n        todoTitle: null,\r\n      }\r\n    },\r\n    methods: {\r\n      createTodo() {\r\n        if (this.todoTitle) {\r\n          this.$store.dispatch('createTodo', this.todoTitle)\r\n        }\r\n        this.todoTitle = null\r\n      },\r\n    },\r\n  }\r\n&#x3C;/script>\n</code></pre>\n<h3>3.2.3. TodoList.vue</h3>\n<pre><code class=\"language-html\">&#x3C;template>\r\n  &#x3C;div>\r\n    &#x3C;TodoListItem v-for=\"(todo, index) in todos\" :key=\"index\" :todo=\"todo\" />\r\n  &#x3C;/div>\r\n&#x3C;/template>\r\n\r\n&#x3C;script>\r\n  import TodoListItem from '@/components/TodoListItem'\r\n\r\n  export default {\r\n    name: 'TodoList',\r\n    components: {\r\n      TodoListItem,\r\n    },\r\n    computed: {\r\n      todos() {\r\n        return this.$store.state.todos\r\n      },\r\n    },\r\n  }\r\n&#x3C;/script>\r\n\r\n&#x3C;style>&#x3C;/style>\n</code></pre>\n<h3>3.2.3. TodoListItem.vue</h3>\n<pre><code class=\"language-html\">&#x3C;template>\r\n  &#x3C;div>\r\n    &#x3C;span\r\n      @click=\"updateTodoStatus\"\r\n      :class=\"{ 'is-completed': todo.isCompleted }\">\r\n      {{ todo.title }}\r\n    &#x3C;/span>\r\n    &#x3C;button @click=\"deleteTodo\">Delete&#x3C;/button>\r\n  &#x3C;/div>\r\n&#x3C;/template>\r\n\r\n&#x3C;script>\r\n  export default {\r\n    name: 'TodoListItem',\r\n    props: {\r\n      todo: Object,\r\n    },\r\n    methods: {\r\n      deleteTodo() {\r\n        this.$store.dispatch('deleteTodo', this.todo)\r\n        // this.$store.commit('DELETE_TODO', this.todo)\r\n      },\r\n      updateTodoStatus() {\r\n        this.$store.dispatch('updateTodoStatus', this.todo)\r\n      },\r\n    },\r\n  }\r\n&#x3C;/script>\r\n\r\n&#x3C;style>\r\n  .is-completed {\r\n    text-decoration: line-through;\r\n  }\r\n&#x3C;/style>\n</code></pre>"}},"pageContext":{"pagePath":"posts/Vue/03_Vue_Vuex_and_Lifecycle_Hooks.md","id":"3dc2e2f4-10ec-502e-ae8d-ec2b1f16577f","parent":{"id":"f3335876-8dd8-5c13-9f76-5049645e1579","name":"03_Vue_Vuex_and_Lifecycle_Hooks","relativePath":"Vue/03_Vue_Vuex_and_Lifecycle_Hooks.md"}}},"staticQueryHashes":["1274812890","3935499650","82772122"],"slicesMap":{}}