{"componentChunkName":"component---src-templates-post-tsx","path":"/posts/Vue/04_Vue_Vue_Router.md/","result":{"data":{"markdownRemark":{"id":"d9fd70ac-2615-5938-b818-4db984243904","html":"<h1>Vue Router</h1>\n<h2>Index</h2>\n<ul>\n<li><a href=\"#1-vue-router\">1. Vue Router</a>\n<ul>\n<li><a href=\"#11-routing\">1.1. Routing</a>\n<ul>\n<li><a href=\"#111-routing-in-ssr\">1.1.1. Routing in SSR</a></li>\n<li><a href=\"#112-routing-in-csr--spa\">1.1.2. Routing in CSR / SPA</a></li>\n</ul>\n</li>\n<li><a href=\"#12-vue-router\">1.2. Vue Router</a>\n<ul>\n<li><a href=\"#121-vue-router-start\">1.2.1. Vue Router Start</a></li>\n</ul>\n</li>\n<li><a href=\"#13-structure-of-vue-router-related-files\">1.3. Structure of Vue Router Related Files</a>\n<ul>\n<li><a href=\"#131-appvue\">1.3.1. App.vue</a></li>\n<li><a href=\"#132-routerindexjs\">1.3.2. router/index.js</a></li>\n<li><a href=\"#133-srcviews\">1.3.3. src/views/</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#2-url-navigation\">2. URL Navigation</a>\n<ul>\n<li><a href=\"#21-declarative-navigation\">2.1. Declarative Navigation</a></li>\n<li><a href=\"#22-programmatic-navigation\">2.2. Programmatic Navigation</a></li>\n<li><a href=\"#23-dynmaic-route-matching\">2.3. Dynmaic Route Matching</a>\n<ul>\n<li><a href=\"#231-declare-a-varibale\">2.3.1. Declare a Varibale</a></li>\n<li><a href=\"#232-pass-a-variable\">2.3.2. Pass a Variable</a></li>\n<li><a href=\"#233-receive-a-variable\">2.3.3. Receive a Variable</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#3-navigation-guard\">3. Navigation Guard</a>\n<ul>\n<li><a href=\"#31-global-guard\">3.1. Global Guard</a></li>\n<li><a href=\"#32-router-guard\">3.2. Router Guard</a></li>\n<li><a href=\"#33-component-guard\">3.3. Component Guard</a></li>\n</ul>\n</li>\n<li><a href=\"#4-404-not-found\">4. 404 Not Found</a>\n<ul>\n<li><a href=\"#41-url-not-matched\">4.1. URL Not Matched</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1>1. Vue Router</h1>\n<h2>1.1. Routing</h2>\n<p>Originally, routing is the process of <strong>selecting the best path</strong> to send communication data within a network</p>\n<p><strong>Routing in web service</strong><br>\nRouting or router in web development is a <mark>mechanism where HTTP requests are routed to the suitable code</mark> that handles them.</p>\n<h3>1.1.1. Routing in SSR</h3>\n<p>The server executes the code only for valid url requests, and responds to the completed HTML as needed.</p>\n<h3>1.1.2. Routing in CSR / SPA</h3>\n<p>After the server provides only one HTML, JavaScript sends AJAX the request. Therefore, there is <strong>only one server-side url requesting HTML documents.</strong></p>\n<p><strong>Why should url be changed?</strong><br>\nTechnically, there is no problem with the operation, but there are the following inconveniences.</p>\n<ul>\n<li>There is no information about the current redering status of the page.\n<ul>\n<li>Return to the default page for the first time when page refreshes</li>\n<li>Only the default page can be shared through link</li>\n</ul>\n</li>\n<li>Browser's Backward feature is not available</li>\n</ul>\n<h2>1.2. Vue Router</h2>\n<p>It's the tool providing <strong>url routing feature on the SPA</strong>, so that SPA works like MPA(Multiple Page Application)</p>\n<h3>1.2.1. Vue Router Start</h3>\n<pre><code>vue create {folder_name}    // Create a Vue project\r\n\r\ncd {folder_name}            // Change directory to the created folder\r\n\r\nvue add router              // Apply Vue router to the Vue project\n</code></pre>\n<p><strong>Alert</strong></p>\n<ul>\n<li><img src=\"./images/04_vue_router_cli_warning.PNG\" alt=\"04_vue_router_cli_warning.PNG\"><br>\nJust recommend you to commit before processing</li>\n<li><img src=\"./images/04_vue_router_cli_history_mode.PNG\" alt=\"04_vue_router_cli_history_mode.PNG\"><br>\nHash mode is the mode that shows url as we normally use. Also You can track url visit records.</li>\n</ul>\n<h2>1.3. Structure of Vue Router Related Files</h2>\n<h3>1.3.1. App.vue</h3>\n<pre><code class=\"language-html\">&#x3C;template>\r\n  &#x3C;div id=\"app\">\r\n    &#x3C;nav>\r\n      &#x3C;router-link to=\"/\">Home&#x3C;/router-link> |\r\n      &#x3C;router-link to=\"/about\">About&#x3C;/router-link>\r\n    &#x3C;/nav>\r\n    &#x3C;router-view />\r\n  &#x3C;/div>\r\n&#x3C;/template>\n</code></pre>\n<ul>\n<li><strong>router-link</strong>\n<ul>\n<li>Although it is expressed as <strong>&#x3C;a></strong> in DOM. But it's not the same because it doesn't reload the whole page</li>\n<li>When the tag is clicked, it routes the page to the url specified in 'to' attribute</li>\n</ul>\n</li>\n<li><strong>router-view</strong>\n<ul>\n<li>Specifies where the components mapped to routes will be rendered</li>\n</ul>\n</li>\n</ul>\n<h3>1.3.2. router/index.js</h3>\n<p>Where <strong>Vue rotuer related information</strong> is written. In particular, there is a <code>routes</code> array which elements are <a href=\"https://im-nc2u.tistory.com/entry/Vue-Router-Router-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4%EC%99%80-Route-%EA%B0%9D%EC%B2%B4-%EB%B9%84%EA%B5%90\"><strong>route object</strong></a>. Route object has properties including a url and a component, which means a url and a component are matched. It's similar to Django's urls.py file.</p>\n<p><img src=\"./images/04_vue_index_django_urls.PNG\" alt=\"04_vue_index_django_urls.PNG\"></p>\n<ul>\n<li><strong>Route Object</strong>\n<ul>\n<li><strong>path</strong>\n<ul>\n<li>a url</li>\n</ul>\n</li>\n<li><strong>name</strong>\n<ul>\n<li>a distinguisable name of the route object</li>\n</ul>\n</li>\n<li><strong>component</strong>\n<ul>\n<li>a component</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><strong>lazy-loading</strong>\n<pre><code class=\"language-js\">component: () => import('../views/AboutView.vue')\n</code></pre>\n<ul>\n<li><a href=\"https://kyounghwan01.github.io/blog/Vue/vue/lazy-loading/#%E1%84%8B%E1%85%B5%E1%84%80%E1%85%A5%E1%86%BA%E1%84%8B%E1%85%B3%E1%86%AF-%E1%84%92%E1%85%A1%E1%84%82%E1%85%B3%E1%86%AB-%E1%84%8B%E1%85%B5%E1%84%8B%E1%85%B2\">'lazy-loading'</a> does not load components at the time of the first build, but loads components when actually approaching them. <strong>The first loading speed is faster.</strong></li>\n</ul>\n</li>\n</ul>\n<h3>1.3.3. src/views/</h3>\n<p>This folder stores Vue components like 'src/components/'. But the only difference is that this folder stores only the components mapped to the <code>routes</code> array in index.js. It's just a semantic distinction. It's recommended to name the components in this folder <strong>to end with 'View'</strong>.</p>\n<hr>\n<h1>2. URL Navigation</h1>\n<h2>2.1. Declarative Navigation</h2>\n<p>Declarative navigation method can be used with &#x3C;router-link> by adding 'to' attirbute.</p>\n<pre><code class=\"language-html\">&#x3C;template>\r\n  &#x3C;div id=\"app\">\r\n    &#x3C;nav>\r\n      &#x3C;router-link to=\"/\">Home&#x3C;/router-link> |\r\n      &#x3C;router-link :to=\"{ name: 'home'}\">Home&#x3C;/router-link>\r\n    &#x3C;/nav>\r\n    &#x3C;router-view />\r\n  &#x3C;/div>\r\n&#x3C;/template>\n</code></pre>\n<ul>\n<li><strong>to</strong>\n<ul>\n<li>insert the url to be routed</li>\n</ul>\n</li>\n<li><strong>:to</strong>\n<ul>\n<li>insert the object with the 'name' key announced in <code>routes</code> array.</li>\n</ul>\n</li>\n</ul>\n<h2>2.2. Programmatic Navigation</h2>\n<p>Programmatic navigation uses a <a href=\"https://im-nc2u.tistory.com/entry/Vue-Router-Router-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4%EC%99%80-Route-%EA%B0%9D%EC%B2%B4-%EB%B9%84%EA%B5%90\">Router object</a>'s mehtod. <code>this.$router.push()</code> push the URL to move into the history stack, which means moving to the new url.</p>\n<pre><code class=\"language-html\">&#x3C;template>\r\n  &#x3C;div id=\"app\">\r\n    &#x3C;nav>\r\n      &#x3C;router-link to=\"/\">Home&#x3C;/router-link> |\r\n      &#x3C;button @click=\"toHome\">Home&#x3C;/button>\r\n    &#x3C;/nav>\r\n    &#x3C;router-view />\r\n  &#x3C;/div>\r\n&#x3C;/template>\r\n\r\n&#x3C;script>\r\n  export default {\r\n    name: 'App',\r\n    methods: {\r\n      toHome() {\r\n        this.$router.push({ name: 'home' })\r\n      },\r\n    },\r\n  }\r\n&#x3C;/script>\n</code></pre>\n<ul>\n<li><strong>router.push()</strong>\n<ul>\n<li>receives <strong>an object with the name of the target Route object</strong> as a argument.</li>\n</ul>\n</li>\n</ul>\n<h2>2.3. Dynmaic Route Matching</h2>\n<p>You can use part of url as a variable.</p>\n<h3>2.3.1. Declare a Varibale</h3>\n<pre><code class=\"language-js\">const routes = [\r\n  {\r\n    path: '/hello/:userName',\r\n    name: 'hello',\r\n    component: MovieView,\r\n  },\r\n]\n</code></pre>\n<ul>\n<li>add <strong>' : '</strong> in front of the string that you want to announce as a vairable.</li>\n</ul>\n<h3>2.3.2. Pass a Variable</h3>\n<pre><code class=\"language-html\">&#x3C;template>\r\n  &#x3C;div id=\"app\">\r\n    &#x3C;nav>\r\n      &#x3C;router-link :to=\"{ name: 'home', params: { userName: 'Harry'}}\"\r\n        >Hello&#x3C;/router-link\r\n      >\r\n      &#x3C;button @click=\"toHello\">Hello&#x3C;/button>\r\n    &#x3C;/nav>\r\n    &#x3C;router-view />\r\n  &#x3C;/div>\r\n&#x3C;/template>\r\n\r\n&#x3C;script>\r\n  export default {\r\n    name: 'App',\r\n    methods: {\r\n      toHello() {\r\n        this.$router.push({ name: 'hello', params: { userName: 'Harry' } })\r\n      },\r\n    },\r\n  }\r\n&#x3C;/script>\n</code></pre>\n<ul>\n<li>Add a 'params' key in the original object. and the 'params' has an object of parameters as the value.</li>\n</ul>\n<h3>2.3.3. Receive a Variable</h3>\n<pre><code class=\"language-html\">&#x3C;template>\r\n  &#x3C;div>\r\n    &#x3C;h1>Hello, {{ $route.params.userName }}&#x3C;/h1>\r\n    &#x3C;h1>Hello, {{ userName }}&#x3C;/h1>\r\n  &#x3C;/div>\r\n&#x3C;/template>\r\n\r\n&#x3C;script>\r\n  export default {\r\n    name: 'Hello',\r\n    data() {\r\n      return {\r\n        userName: this.$route.params.userName,\r\n      }\r\n    },\r\n  }\r\n&#x3C;/script>\n</code></pre>\n<ul>\n<li>You can get variables by <strong>accessing the Route object</strong>.</li>\n</ul>\n<hr>\n<h1>3. Navigation Guard</h1>\n<p>Setting logic that occurs <strong>when url changes</strong></p>\n<h2>3.1. Global Guard</h2>\n<p>Works across the App</p>\n<pre><code class=\"language-js\">const router = new VueRouter({\r\n  mode: 'history',\r\n  base: process.env.BASE_URL,\r\n  routes,\r\n})\r\n\r\nrouter.beforeEach((to, from, next) => {\r\n  console.log('to', to)\r\n  console.log('from', from)\r\n  console.log('next', next)\r\n  next()\r\n})\r\n\r\nexport default router\n</code></pre>\n<ul>\n<li><strong>router.beforeEach(to, from ,next)</strong><br>\nThe inner logic is exucted each time you move from one Route object to another\n<ul>\n<li><strong>to</strong><br>\ninformation about the route to move</li>\n<li><strong>from</strong><br>\ninforamtion about the current route</li>\n<li><strong>next</strong>\n<ul>\n<li><strong>If the beforeEach function is declared, route conversion occurs only when the 'next()' is executed</strong></li>\n<li>receives a route object as an argument</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2>3.2. Router Guard</h2>\n<p>Works for the specific route</p>\n<pre><code class=\"language-js\">const routes = [\r\n  {\r\n    path: '/login',\r\n    name: 'login',\r\n    component: LoginView,\r\n    beforeEach(to, from, next) {\r\n      if (isLoggined === true) {\r\n        console.log('loggined')\r\n        next({ name: 'home' })\r\n      } else {\r\n        next()\r\n      }\r\n    },\r\n  },\r\n]\n</code></pre>\n<ul>\n<li><strong>beforeEnter(to, from ,next)</strong><br>\nThe inner logic is exucted each time you move to the route object\n<ul>\n<li><strong>to</strong><br>\ninformation about the route to move</li>\n<li><strong>from</strong><br>\ninforamtion about the current route</li>\n<li><strong>next</strong>\n<ul>\n<li><strong>If the beforeEnter function is declared, route conversion occurs only when the 'next()' is executed</strong></li>\n<li>receives a route object as an argument</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2>3.3. Component Guard</h2>\n<p>Detects parameters change of url corresponding to component path</p>\n<pre><code class=\"language-html\">&#x3C;script>\r\n  export default {\r\n    name: 'HelloView',\r\n    data() {\r\n      return {\r\n        userName: this.$route.params.userName,\r\n      }\r\n    },\r\n    beforeRouteUpdate(to, from, next) {\r\n      this.userName = to.params.userName\r\n      next()\r\n    },\r\n  }\r\n&#x3C;/script>\n</code></pre>\n<ul>\n<li><strong>beforeRouteUpdate(to, from ,next)</strong><br>\nEven if there is no change in the route object, internal logic is executed if the url address is changed.\n<ul>\n<li><strong>to</strong><br>\ninformation about the route to move</li>\n<li><strong>from</strong><br>\ninforamtion about the current route</li>\n<li><strong>next</strong>\n<ul>\n<li><strong>If the beforeEnter function is declared, route conversion occurs only when the 'next()' is executed</strong></li>\n<li>receives a route object as an argument</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1>4. 404 Not Found</h1>\n<p>When there's no matching url. Vue just doesn't render the &#x3C;router-view> tag. Therfore additional code is required.</p>\n<h2>4.1. URL Not Matched</h2>\n<p><strong>views/NotFound404.vue</strong></p>\n<pre><code class=\"language-html\">&#x3C;template>\r\n  &#x3C;div>\r\n    &#x3C;h1>404 Not Found&#x3C;/h1>\r\n  &#x3C;/div>\r\n&#x3C;/template>\r\n\r\n&#x3C;script>\r\n  export default {\r\n    name: 'NotFound404',\r\n  }\r\n&#x3C;/script>\n</code></pre>\n<p><strong>router/index.js</strong></p>\n<pre><code class=\"language-js\">const routes = [\r\n  ...{\r\n    path: '/404',\r\n    name: 'NotFound404',\r\n    component: NotFound404,\r\n  },\r\n  ...// All the urls not matched above will be redirected to NotFound404\r\n  {\r\n    path: '*',\r\n    name: '/404',\r\n    component: NotFound404,\r\n  },\r\n]\n</code></pre>"}},"pageContext":{"pagePath":"posts/Vue/04_Vue_Vue_Router.md","id":"d9fd70ac-2615-5938-b818-4db984243904","parent":{"id":"74761f82-dc91-5f31-944d-b500db98e91e","name":"04_Vue_Vue_Router","relativePath":"Vue/04_Vue_Vue_Router.md"}}},"staticQueryHashes":["1274812890","3935499650","82772122"],"slicesMap":{}}