{"componentChunkName":"component---src-templates-post-index-tsx","path":"/posts/Knowledge/Algorithm/Backtracking/","result":{"data":{"markdownRemark":{"id":"d9e89351-096d-5259-a4ba-2e501389b537","html":"<h1 id=\"1-개요\" style=\"position:relative;\"><a href=\"#1-%EA%B0%9C%EC%9A%94\" aria-label=\"1 개요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 개요</h1>\n<p>상태공간이나 그래프의 노드를 모두 탐색하는 <strong>완전탐색</strong> 기반의 알고리즘이다.</p>\n<p>다만, <strong>가지 치기</strong>를 통해 탐색할 필요성이 없는 노드(상태)들을 탐색 대상에서 제외함으로써 효율을 높인다.</p>\n<h1 id=\"2-동작\" style=\"position:relative;\"><a href=\"#2-%EB%8F%99%EC%9E%91\" aria-label=\"2 동작 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 동작</h1>\n<ol>\n<li>모든 상태를 트리 형태로 구조화한다.</li>\n<li>루트 노드부터 탐색을 시작한다.</li>\n<li>자식 노드 중 탐색하지 않은 노드를 깊이 우선 탐색한다.</li>\n<li>노드가 유망하지 않다고 판단 되면, 이전 분기점(부모 노드)로 돌아간다.</li>\n<li>완전 탐색하거나 해를 구할 때까지 3 ~ 4의 과정을 반복한다.</li>\n</ol>\n<h1 id=\"3-시간-복잡도\" style=\"position:relative;\"><a href=\"#3-%EC%8B%9C%EA%B0%84-%EB%B3%B5%EC%9E%A1%EB%8F%84\" aria-label=\"3 시간 복잡도 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 시간 복잡도</h1>\n<ul>\n<li><strong>O(V + E)</strong><br>\n최대 V개의 노드를 다 탐색하거나, 또는 모든 간선의 연결관계를 탐색해야 한다.\n<ul>\n<li>인접 행렬의 경우, 노드의 갯수가 N^2 이고 간선의 갯수가 4*N^2이므로 <strong>O(N^2)</strong></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"4-예시\" style=\"position:relative;\"><a href=\"#4-%EC%98%88%EC%8B%9C\" aria-label=\"4 예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 예시</h1>\n<p>백트래킹의 경우, 크게 <strong>종료조건, 가지치기(가능할 경우), 자식 상태 탐색</strong>에 대응하는 로직을 가진다.\n문제 상황에 따라 다양하게 수정 및 적용이 가능하다. 아래는 백트래킹의 예시 중 하나인 백준의 알파 틱택토 문제에 대한 정답 로직을 첨부한다.</p>\n<p><a href=\"https://www.acmicpc.net/problem/16571\">백준 16571번 알파 틱택토</a>\n백트래킹이 완전탐색 기반 알고리즘이라는 것을 잘 활용한 문제이다. 다음 자식 상태의 모든 값을 비교하여 최선의 결과를 반환함으로써 최종 결과 또한 최선의 결과를 도출한다.</p>\n<ul>\n<li>\n<p><strong>Python</strong></p>\n<pre><code class=\"language-python\">'''\n&#x3C;input>\nN: 최대 단계\nstep: 현재 단계\nboard: 틱택토 현재 상황\n\n&#x3C;output>\n0: 현재 플레이어의 패배\n1: 비김\n2: 현재 플레이어의 승리\n'''\ndef backtracking(N, step, board, player1, player2):\n\n  current = player1\n  previous = player2\n  if step % 2:\n      current = player2\n      previous = player1\n\n  # 종료조건1: 승패 판정\n  if isWin(board, previous):\n      return 0\n\n  # 종료조건2: 게임이 더 진행될 수 없는 경우\n  if N == step:\n      return 1\n\n  # 내가 둘 수 있는 경우의 수 중 최선을 반납\n  best_result = 0\n  for n in range(9):\n      i, j = divmod(n, 3)\n      if not board[i][j]:\n          board[i][j] = current\n          result = 2 - backtracking(N, step + 1, board, player1, player2)\n          board[i][j] = 0\n          best_result = max(best_result, result)\n          if best_result == 2:\n              break\n\n  return best_result\n</code></pre>\n</li>\n</ul>","tableOfContents":"<ul>\n<li><a href=\"#1-%EA%B0%9C%EC%9A%94\">1. 개요</a></li>\n<li><a href=\"#2-%EB%8F%99%EC%9E%91\">2. 동작</a></li>\n<li><a href=\"#3-%EC%8B%9C%EA%B0%84-%EB%B3%B5%EC%9E%A1%EB%8F%84\">3. 시간 복잡도</a></li>\n<li><a href=\"#4-%EC%98%88%EC%8B%9C\">4. 예시</a></li>\n</ul>","frontmatter":{"title":"백트래킹(Backtracking) 알고리즘","createdAt":"2022-08-23","updatedAt":"2023-04-17","tags":null,"description":null,"reference":null}},"allMarkdownRemark":{"nodes":[{"id":"c2d5d6ed-d279-5dc9-9f23-c4512a66fe6b","excerpt":"1. 핵심 요약 P-NP 개념에 대해 구글링하면 온갖 수학적 개념이 튀어나와 사람을 기죽이고 그런다. 명제만으로 개념을 설명하기 위한 수학자들의 변태적 성향 때문인 것 같다. 따라서 나처럼 평범한 사람도 알아들을 법한 언어로 정리하면 다음과 같다. P…","parent":{"id":"4bbd300c-119d-54c0-a510-85c157669bde","name":"P_NP","relativePath":"Knowledge/Algorithm/P_NP.md"},"frontmatter":{"title":"\"P, NP, NP 난해, NP 완전\" 이해하기","createdAt":"2023-09-04","updatedAt":"2023-09-04"},"fields":{"slug":"/posts/Knowledge/Algorithm/P_NP/"}},{"id":"748adb51-0c5a-592d-ac78-0fc432795b06","excerpt":"면접에서 탈탈 털린 후 작성한 정렬 관련 알고리즘을 총정리 1. Bubble Sort (거품 정렬) 1.1. 동작 과정 1.2. 복잡도 1.3. Python 구현 2. Selection Sort (선택 정렬) 2.1. 동작 과정 2.2. 복잡도 2.…","parent":{"id":"fccef43b-c33a-5da5-87aa-38645c71a10c","name":"Sorting","relativePath":"Knowledge/Algorithm/Sorting.md"},"frontmatter":{"title":"정렬(Sorting) 알고리즘 정리","createdAt":"2023-05-02","updatedAt":"2023-05-03"},"fields":{"slug":"/posts/Knowledge/Algorithm/Sorting/"}},{"id":"52921f0e-79ea-5032-9348-d29691eba9fa","excerpt":"1. 개요 신장 트리(Spanning Tree)는 그래프 내의 모든 노드를 포함하는 트리를 의미하며, **최소 신장 트리(Minimum Spanning Tree)**란 간선의 가중치 합이 최소가 되는 신장 트리를 말한다. 최소 신장 트리는 Greedy…","parent":{"id":"1512b8ac-0e1f-5289-bd74-f1666316e889","name":"MST","relativePath":"Knowledge/Algorithm/MST.md"},"frontmatter":{"title":"최소 신장 트리(Minimum Spaaning Tree) 알고리즘","createdAt":"2023-04-17","updatedAt":"2023-04-17"},"fields":{"slug":"/posts/Knowledge/Algorithm/MST/"}},{"id":"2a872d3e-74c2-5d9d-a981-491f2008d742","excerpt":"1. 개요 정렬된 데이터에서 검색 범위를 줄여 나가면서 목적 값을 찾는 알고리즘이다. 데이터가 정렬되어 있을 경우, 데이터를 크기가 같은 두 부분으로 나누고 유효한 데이터집합을 선 1.…","parent":{"id":"fa180fc0-4cc4-5a02-9216-c62a0f723d6a","name":"BinarySearch","relativePath":"Knowledge/Algorithm/BinarySearch.md"},"frontmatter":{"title":"이진탐색(Binary Search) 알고리즘","createdAt":"2023-04-11","updatedAt":"2023-04-11"},"fields":{"slug":"/posts/Knowledge/Algorithm/BinarySearch/"}},{"id":"ec5c8f48-0db4-5505-934f-a6a9b277b3bc","excerpt":"…","parent":{"id":"dd0a76a3-18a5-5081-9481-38059237d9d9","name":"DP","relativePath":"Knowledge/Algorithm/DP.md"},"frontmatter":{"title":"동적 계획법(Dynamic Programming) 알고리즘","createdAt":"2023-03-27","updatedAt":"2023-04-03"},"fields":{"slug":"/posts/Knowledge/Algorithm/DP/"}},{"id":"17e36b13-5f73-5ae0-9a67-52ead48d4c9d","excerpt":"1. 개요 상태공간이나 그래프를 출발점에서 시작하여 모든 리프노드까지 순서대로 탐색하는 완전탐색 기반의 알고리즘이다. 1.…","parent":{"id":"c7c369bf-ca93-5340-8f30-de603d6abb41","name":"DFS","relativePath":"Knowledge/Algorithm/DFS.md"},"frontmatter":{"title":"깊이 우선 탐색(Depth-First Search) 알고리즘","createdAt":"2023-03-14","updatedAt":"2023-04-17"},"fields":{"slug":"/posts/Knowledge/Algorithm/DFS/"}},{"id":"f5b89fe5-344c-5160-917a-32e1bf4a9e62","excerpt":"1. 개요 상태공간이나 그래프를 출발점으로부터 가까운 순으로 탐색해가는 완전탐색 기반의 알고리즘이다. 1.…","parent":{"id":"5d349556-f03d-5622-884a-9cc16f7fb179","name":"BFS","relativePath":"Knowledge/Algorithm/BFS.md"},"frontmatter":{"title":"너비 우선 탐색(Breadth-First Search) 알고리즘","createdAt":"2023-03-05","updatedAt":"2023-04-17"},"fields":{"slug":"/posts/Knowledge/Algorithm/BFS/"}},{"id":"e1ae7474-f48b-5c57-906f-18ad82ad0d5f","excerpt":"1. 개요 음의 가중치가 없는 그래프의 한 노드에서 다른 모드 노드까지의 최단거리를 각각 구하는 알고리즘. 대표적으로 사용되는 그리디 알고리즘이다.…","parent":{"id":"aaf42c2e-c693-5997-a7a3-3c71e17a3b28","name":"Dijkstra","relativePath":"Knowledge/Algorithm/Dijkstra.md"},"frontmatter":{"title":"다익스트라(Dijkstra) 알고리즘","createdAt":"2023-02-27","updatedAt":"2023-04-17"},"fields":{"slug":"/posts/Knowledge/Algorithm/Dijkstra/"}},{"id":"d9e89351-096d-5259-a4ba-2e501389b537","excerpt":"1. 개요 상태공간이나 그래프의 노드를 모두 탐색하는 완전탐색 기반의 알고리즘이다. 다만, 가지 치기를 통해 탐색할 필요성이 없는 노드(상태)들을 탐색 대상에서 제외함으로써 효율을 높인다.…","parent":{"id":"ceb0d70a-d36c-5b9a-b5b5-d0b31632870d","name":"Backtracking","relativePath":"Knowledge/Algorithm/Backtracking.md"},"frontmatter":{"title":"백트래킹(Backtracking) 알고리즘","createdAt":"2022-08-23","updatedAt":"2023-04-17"},"fields":{"slug":"/posts/Knowledge/Algorithm/Backtracking/"}}]}},"pageContext":{"pagePath":"/posts/Knowledge/Algorithm/Backtracking/","siblingPostsPathRegex":"/^(?!.*README).*Knowledge\\/Algorithm\\/.*$/","relativeDirectory":"Algorithm","id":"d9e89351-096d-5259-a4ba-2e501389b537","parent":{"id":"ceb0d70a-d36c-5b9a-b5b5-d0b31632870d","name":"Backtracking","relativePath":"Knowledge/Algorithm/Backtracking.md"},"fields":{"slug":"/posts/Knowledge/Algorithm/Backtracking/"}}},"staticQueryHashes":["24302420","4059933791"],"slicesMap":{}}