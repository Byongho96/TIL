{"componentChunkName":"component---src-templates-post-index-tsx","path":"/posts/Knowledge/Algorithm/MST/","result":{"data":{"markdownRemark":{"id":"52921f0e-79ea-5032-9348-d29691eba9fa","html":"<h1 id=\"1-개요\" style=\"position:relative;\"><a href=\"#1-%EA%B0%9C%EC%9A%94\" aria-label=\"1 개요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 개요</h1>\n<p>신장 트리(Spanning Tree)는 그래프 내의 모든 노드를 포함하는 트리를 의미하며, **최소 신장 트리(Minimum Spanning Tree)**란 간선의 가중치 합이 최소가 되는 신장 트리를 말한다.</p>\n<p>최소 신장 트리는 Greedy 기법을 이용하여 구할 수 있으며, 대표적으로 프림 알고리즘(Prim's algorithm)과 크루스칼 알고리즘(Kruskal's algorithm)이 있다.</p>\n<h1 id=\"2-동작\" style=\"position:relative;\"><a href=\"#2-%EB%8F%99%EC%9E%91\" aria-label=\"2 동작 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 동작</h1>\n<h2 id=\"21-프림-알고리즘\" style=\"position:relative;\"><a href=\"#21-%ED%94%84%EB%A6%BC-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\" aria-label=\"21 프림 알고리즘 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.1. 프림 알고리즘</h2>\n<ol>\n<li>임의의 정점을 선택하여 하나의 정점을 갖는 최초의 트리를 구성한다.</li>\n<li>트리에 포함된 정점과 트리에 포함되지 않은 정점 간의 간선 중 가장 작은 가중치를 가지는 간선을 선택하여 트리에 추가한다.</li>\n<li>모든 정점이 트리에 포함될 때 까지 2를 반복한다.</li>\n</ol>\n<h2 id=\"22-크루스칼-알고리즘\" style=\"position:relative;\"><a href=\"#22-%ED%81%AC%EB%A3%A8%EC%8A%A4%EC%B9%BC-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\" aria-label=\"22 크루스칼 알고리즘 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.2. 크루스칼 알고리즘</h2>\n<ol>\n<li>그래프의 모든 간선의 집합 E을 만든다.</li>\n<li>E의 간선들 중 가중치가 최소인 간선을 지운다.</li>\n<li>삭제된 간선이 가리키는 두 정점 x,y를 연결하여도 사이클이 발생하지 않는다면 연결한다.</li>\n<li>모든 정점이 연결되거나 E가 비워질 때까지 2~3을 반복한다.</li>\n</ol>\n<h1 id=\"3-시간-복잡도\" style=\"position:relative;\"><a href=\"#3-%EC%8B%9C%EA%B0%84-%EB%B3%B5%EC%9E%A1%EB%8F%84\" aria-label=\"3 시간 복잡도 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 시간 복잡도</h1>\n<p>V: 노드의 갯수<br>\nE: 간선이 갯수</p>\n<p>간선이 많을수록 그래프의 경우 prim알고리즘이 유리하고, 간선이 적을수록 Kruskal 알고리즘이 유리하다.</p>\n<h2 id=\"31-프림-알고리즘\" style=\"position:relative;\"><a href=\"#31-%ED%94%84%EB%A6%BC-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\" aria-label=\"31 프림 알고리즘 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.1. 프림 알고리즘</h2>\n<p>O((V+E)logV)</p>\n<ul>\n<li>V개의 노드를 heap에서 V번 탐색하는 알고리즘 O(VlogV)</li>\n<li>E개의 간선을 탐색하는 과정 O(E)</li>\n<li>E개의 간선을 heap에 push하는 과정 O(ElogV)</li>\n</ul>\n<h2 id=\"32-크루스칼-알고리즘\" style=\"position:relative;\"><a href=\"#32-%ED%81%AC%EB%A3%A8%EC%8A%A4%EC%B9%BC-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\" aria-label=\"32 크루스칼 알고리즘 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.2. 크루스칼 알고리즘</h2>\n<p>O(ElogE)</p>\n<ul>\n<li>E개의 간선을 정렬하는 과정 O(ElogE)</li>\n<li>E개의 간선을 탐색하는 과정 O(E)</li>\n</ul>\n<h1 id=\"4-구현\" style=\"position:relative;\"><a href=\"#4-%EA%B5%AC%ED%98%84\" aria-label=\"4 구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4 구현</h1>\n<h2 id=\"41-prim\" style=\"position:relative;\"><a href=\"#41-prim\" aria-label=\"41 prim permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.1. Prim</h2>\n<ul>\n<li>\n<p><strong>Python</strong></p>\n<pre><code class=\"language-python\">'''\nN     : 노드 갯수\nstart : 시작 노드\nadjLst: 특정 노드의 인접 노드들과 가중치를 알 수 있는 컨테이너 자료\n'''\ndef prim(N, start, adjLst):\n    # 초깃값 셋팅\n    weight = [INF] * N\n    visited = [0] * N\n\n    # 시작점 지정\n    weight[start] = 0\n\n    for _ in range(N):\n        # MST 인접 노드 중 최소 가중치의 노드를 탐색\n        mn = INF\n        nearest = -1\n        for node in range(N):\n            if not visited[node] and weight[node] &#x3C; mn:\n                mn = weight[node]\n                nearest = node\n\n        visited[nearest] = True # 해당 노드 MST에 포함\n\n        # 새로 확정된 노드의 인접 노드들 거리 갱신\n        for adj, adj_w in adjLst[nearest]:\n            if not visited[adj]:\n                weight[adj] = min(weight[adj], adj_w)\n\n    return sum(weight)\n</code></pre>\n</li>\n</ul>\n<h2 id=\"42-prim-with-heap\" style=\"position:relative;\"><a href=\"#42-prim-with-heap\" aria-label=\"42 prim with heap permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.2. Prim with heap</h2>\n<ul>\n<li>\n<p><strong>Python</strong></p>\n<pre><code class=\"language-python\">'''\nN     : 노드 갯수\nstart : 시작 노드\nadjLst: 특정 노드의 인접 노드들과 가중치를 알 수 있는 컨테이너 자료\n'''\ndef prim_with_heap(N, start, adjLst):\n    # 초깃값 셋팅\n    weight = [INF] * N\n    visited = [0] * N\n\n    # 시작점 셋팅\n    heap = []\n    heapq.heappush(heap, (0, start))\n    weight[start] = 0\n\n    while heap:\n        w, nearest = heapq.heappop(heap)\n\n        if weight[nearest] &#x3C; w: # 새로 거리가 갱신된 노드는 무시\n            continue\n\n        visited[nearest] = 1    # MST에 해당 노드 포함\n\n        # 새로 확정된 노드의 인접 노드들 거리 갱신\n        for adj, adj_w in adjLst[nearest]:\n            if not visited[adj] and adj_w &#x3C; weight[adj]:\n                weight[adj] = adj_w\n                heapq.heappush(heap, (adj_w, adj))\n\n    return sum(weight)\n</code></pre>\n</li>\n</ul>\n<h2 id=\"43-kruskal\" style=\"position:relative;\"><a href=\"#43-kruskal\" aria-label=\"43 kruskal permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.3. Kruskal</h2>\n<ul>\n<li>\n<p><strong>Python</strong></p>\n<pre><code class=\"language-python\">'''\nN     : 노드 갯수\nadjLst: 특정 노드의 인접 노드들과 가중치를 알 수 있는 컨테이너 자료\n'''\n# 트리의 루트 노드를 찾는 함수\ndef find_set(par, x):\n  while x != par[x]:\n      x = par[x]\n  return x\n\n# 두 트리를 병합하는 함수\ndef union_by_rank(par, rank, x, y):\n    X = find_set(par, x)\n    Y = find_set(par, y)\n\n    X_rank = rank[X]\n    Y_rank = rank[Y]\n\n    # 트리의 rank(depth)를 기준으로, 작은 것을 큰 것에 병합\n    if X_rank == Y_rank:\n        par[Y] = X\n        rank[X] += 1\n    elif rank[X] > rank[Y]:\n        par[Y] = X\n    else:\n        par[X] = Y\n\ndef kruskal(N, adjLst):\n  par = [node for node in range(N)]   # 부모 노두 정보를 담는 리스트\n  rank = [1] * N                      # 루트 노드의 depth\n\n  # 간선 리스트를 만드는 과정. input에 따라 적절하게 설계\n  edges = []\n  for node1 in adjLst:\n      for node2, weight in adjLst[node1]:\n          edges.append((weight, node1, node2))\n  edges.sort() # 간선정보를 가중치를 기준으로 오름차순 정렬\n\n  mst_size = 0    # MST로 연결된 노드의 갯수\n  sum_weight = 0  # MST를 연결하기 위한 총 비용\n\n  for n1, ne, weight in edges:\n      if find_set(par, n1) != find_set(par, n2):  # n1, n2가 다른 집합에 속해있을 경우\n          union_by_rank(par, rank, n1, n2)  # par, rank모두 참조형 타입으로 넘겨줌\n          sum_weight += weight\n          mst_size += 1\n          if mst_size == N:   # 모든 노드를 연결했다면 종료\n              break\n\n  return sum_weight\n</code></pre>\n</li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#1-%EA%B0%9C%EC%9A%94\">1. 개요</a></p>\n</li>\n<li>\n<p><a href=\"#2-%EB%8F%99%EC%9E%91\">2. 동작</a></p>\n<ul>\n<li><a href=\"#21-%ED%94%84%EB%A6%BC-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\">2.1. 프림 알고리즘</a></li>\n<li><a href=\"#22-%ED%81%AC%EB%A3%A8%EC%8A%A4%EC%B9%BC-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\">2.2. 크루스칼 알고리즘</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#3-%EC%8B%9C%EA%B0%84-%EB%B3%B5%EC%9E%A1%EB%8F%84\">3. 시간 복잡도</a></p>\n<ul>\n<li><a href=\"#31-%ED%94%84%EB%A6%BC-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\">3.1. 프림 알고리즘</a></li>\n<li><a href=\"#32-%ED%81%AC%EB%A3%A8%EC%8A%A4%EC%B9%BC-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\">3.2. 크루스칼 알고리즘</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#4-%EA%B5%AC%ED%98%84\">4 구현</a></p>\n<ul>\n<li><a href=\"#41-prim\">4.1. Prim</a></li>\n<li><a href=\"#42-prim-with-heap\">4.2. Prim with heap</a></li>\n<li><a href=\"#43-kruskal\">4.3. Kruskal</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"최소 신장 트리(Minimum Spaaning Tree) 알고리즘","createdAt":"2023-04-17","updatedAt":"2023-04-17","tags":null,"description":null,"reference":null}},"allMarkdownRemark":{"nodes":[{"id":"c2d5d6ed-d279-5dc9-9f23-c4512a66fe6b","excerpt":"1. 핵심 요약 P-NP 개념에 대해 구글링하면 온갖 수학적 개념이 튀어나와 사람을 기죽이고 그런다. 명제만으로 개념을 설명하기 위한 수학자들의 변태적 성향 때문인 것 같다. 따라서 나처럼 평범한 사람도 알아들을 법한 언어로 정리하면 다음과 같다. P…","parent":{"id":"4bbd300c-119d-54c0-a510-85c157669bde","name":"P_NP","relativePath":"Knowledge/Algorithm/P_NP.md"},"frontmatter":{"title":"\"P, NP, NP 난해, NP 완전\" 이해하기","createdAt":"2023-09-04","updatedAt":"2023-09-04"},"fields":{"slug":"/posts/Knowledge/Algorithm/P_NP/"}},{"id":"17e36b13-5f73-5ae0-9a67-52ead48d4c9d","excerpt":"1. 개요 상태공간이나 그래프를 출발점에서 시작하여 모든 리프노드까지 순서대로 탐색하는 완전탐색 기반의 알고리즘이다. 1.…","parent":{"id":"c7c369bf-ca93-5340-8f30-de603d6abb41","name":"DFS","relativePath":"Knowledge/Algorithm/DFS.md"},"frontmatter":{"title":"깊이 우선 탐색(Depth-First Search) 알고리즘","createdAt":"2023-03-14","updatedAt":"2023-04-17"},"fields":{"slug":"/posts/Knowledge/Algorithm/DFS/"}},{"id":"f5b89fe5-344c-5160-917a-32e1bf4a9e62","excerpt":"1. 개요 상태공간이나 그래프를 출발점으로부터 가까운 순으로 탐색해가는 완전탐색 기반의 알고리즘이다. 1.…","parent":{"id":"5d349556-f03d-5622-884a-9cc16f7fb179","name":"BFS","relativePath":"Knowledge/Algorithm/BFS.md"},"frontmatter":{"title":"너비 우선 탐색(Breadth-First Search) 알고리즘","createdAt":"2023-03-05","updatedAt":"2023-04-17"},"fields":{"slug":"/posts/Knowledge/Algorithm/BFS/"}},{"id":"e1ae7474-f48b-5c57-906f-18ad82ad0d5f","excerpt":"1. 개요 음의 가중치가 없는 그래프의 한 노드에서 다른 모드 노드까지의 최단거리를 각각 구하는 알고리즘. 대표적으로 사용되는 그리디 알고리즘이다.…","parent":{"id":"aaf42c2e-c693-5997-a7a3-3c71e17a3b28","name":"Dijkstra","relativePath":"Knowledge/Algorithm/Dijkstra.md"},"frontmatter":{"title":"다익스트라(Dijkstra) 알고리즘","createdAt":"2023-02-27","updatedAt":"2023-04-17"},"fields":{"slug":"/posts/Knowledge/Algorithm/Dijkstra/"}},{"id":"ec5c8f48-0db4-5505-934f-a6a9b277b3bc","excerpt":"…","parent":{"id":"dd0a76a3-18a5-5081-9481-38059237d9d9","name":"DP","relativePath":"Knowledge/Algorithm/DP.md"},"frontmatter":{"title":"동적 계획법(Dynamic Programming) 알고리즘","createdAt":"2023-03-27","updatedAt":"2023-04-03"},"fields":{"slug":"/posts/Knowledge/Algorithm/DP/"}},{"id":"d9e89351-096d-5259-a4ba-2e501389b537","excerpt":"1. 개요 상태공간이나 그래프의 노드를 모두 탐색하는 완전탐색 기반의 알고리즘이다. 다만, 가지 치기를 통해 탐색할 필요성이 없는 노드(상태)들을 탐색 대상에서 제외함으로써 효율을 높인다.…","parent":{"id":"ceb0d70a-d36c-5b9a-b5b5-d0b31632870d","name":"Backtracking","relativePath":"Knowledge/Algorithm/Backtracking.md"},"frontmatter":{"title":"백트래킹(Backtracking) 알고리즘","createdAt":"2022-08-23","updatedAt":"2023-04-17"},"fields":{"slug":"/posts/Knowledge/Algorithm/Backtracking/"}},{"id":"2a872d3e-74c2-5d9d-a981-491f2008d742","excerpt":"1. 개요 정렬된 데이터에서 검색 범위를 줄여 나가면서 목적 값을 찾는 알고리즘이다. 데이터가 정렬되어 있을 경우, 데이터를 크기가 같은 두 부분으로 나누고 유효한 데이터집합을 선 1.…","parent":{"id":"fa180fc0-4cc4-5a02-9216-c62a0f723d6a","name":"BinarySearch","relativePath":"Knowledge/Algorithm/BinarySearch.md"},"frontmatter":{"title":"이진탐색(Binary Search) 알고리즘","createdAt":"2023-04-11","updatedAt":"2023-04-11"},"fields":{"slug":"/posts/Knowledge/Algorithm/BinarySearch/"}},{"id":"748adb51-0c5a-592d-ac78-0fc432795b06","excerpt":"면접에서 탈탈 털린 후 작성한 정렬 관련 알고리즘을 총정리 1. Bubble Sort (거품 정렬) 1.1. 동작 과정 1.2. 복잡도 1.3. Python 구현 2. Selection Sort (선택 정렬) 2.1. 동작 과정 2.2. 복잡도 2.…","parent":{"id":"fccef43b-c33a-5da5-87aa-38645c71a10c","name":"Sorting","relativePath":"Knowledge/Algorithm/Sorting.md"},"frontmatter":{"title":"정렬(Sorting) 알고리즘 정리","createdAt":"2023-05-02","updatedAt":"2023-05-03"},"fields":{"slug":"/posts/Knowledge/Algorithm/Sorting/"}},{"id":"52921f0e-79ea-5032-9348-d29691eba9fa","excerpt":"1. 개요 신장 트리(Spanning Tree)는 그래프 내의 모든 노드를 포함하는 트리를 의미하며, **최소 신장 트리(Minimum Spanning Tree)**란 간선의 가중치 합이 최소가 되는 신장 트리를 말한다. 최소 신장 트리는 Greedy…","parent":{"id":"1512b8ac-0e1f-5289-bd74-f1666316e889","name":"MST","relativePath":"Knowledge/Algorithm/MST.md"},"frontmatter":{"title":"최소 신장 트리(Minimum Spaaning Tree) 알고리즘","createdAt":"2023-04-17","updatedAt":"2023-04-17"},"fields":{"slug":"/posts/Knowledge/Algorithm/MST/"}}]}},"pageContext":{"pagePath":"/posts/Knowledge/Algorithm/MST/","siblingPostsPathRegex":"/^(?!.*README).*Knowledge\\/Algorithm.*$/","relativeDirectory":"Algorithm","id":"52921f0e-79ea-5032-9348-d29691eba9fa","parent":{"id":"1512b8ac-0e1f-5289-bd74-f1666316e889","name":"MST","relativePath":"Knowledge/Algorithm/MST.md"},"fields":{"slug":"/posts/Knowledge/Algorithm/MST/"}}},"staticQueryHashes":["24302420","4059933791"],"slicesMap":{}}