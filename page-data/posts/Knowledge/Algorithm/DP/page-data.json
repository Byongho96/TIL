{"componentChunkName":"component---src-templates-post-index-tsx","path":"/posts/Knowledge/Algorithm/DP/","result":{"data":{"markdownRemark":{"id":"ec5c8f48-0db4-5505-934f-a6a9b277b3bc","html":"<h1 id=\"1-개요\" style=\"position:relative;\"><a href=\"#1-%EA%B0%9C%EC%9A%94\" aria-label=\"1 개요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 개요</h1>\n<p>상태공간이나 그래프의 노드를 모두 탐색하는 <strong>완전탐색</strong> 기반의 알고리즘이다.\n다만 하위 집합의 최적해를 기억해 재활용함으로써, 상위 집합의 해를 구하는 과정의 복잡도를 줄인다는 특징을 가진다.</p>\n<p>동적계획법은 접근방식에 따라 크게 두가지로 나눌 수 있다. 문제 조건에 따라 더 적절한 방식을 골라 사용할 수 있따.</p>\n<ul>\n<li><strong>동적 계획법(상향식 접근)</strong><br>\n보통 말하는 동적 계획법은 상향식 접근을 말한다. 원하는 집합의 해를 얻기 위해서 가장 작은 부분 집합부터 해를 계산해 나간다.\n반복문을 사용해 비교적 빠른 한 편, 모든 부분 집합의 해를 계산해야한다.</li>\n<li><strong>메모이제이션(하향식 접근)</strong><br>\n메모이제이션을 동적 계획법을 하향식 접근으로 구현한 것이다. 원하는 집합의 해를 얻기 위해 필요한 부분집합의 해를 계산해 나간다.\n필요한 부분 집합의 해만 구할 수 있지만, 재귀로 구현되어 반복문보다 속도가 느릴 수 있다.</li>\n</ul>\n<h1 id=\"2-동작\" style=\"position:relative;\"><a href=\"#2-%EB%8F%99%EC%9E%91\" aria-label=\"2 동작 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 동작</h1>\n<ol>\n<li>크기가 N인 집합과 (N - k)인 부분집합의 관계를 찾는다.<br>\nk는 1 이상의 정수이며, 한 개 이상의 값이 할당 될 수 있다.</li>\n<li>가장 작은 부분집합의 해를 구한다.</li>\n<li>1에서 찾은 규칙과 2의 값을 이용하여 크기가 N인 부분집합까지의 해를 구한다.</li>\n</ol>\n<h1 id=\"3-시간-복잡도\" style=\"position:relative;\"><a href=\"#3-%EC%8B%9C%EA%B0%84-%EB%B3%B5%EC%9E%A1%EB%8F%84\" aria-label=\"3 시간 복잡도 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 시간 복잡도</h1>\n<ul>\n<li><strong>O(N)</strong><br>\n보통 크기가 N인 집합의 해를 구하기 위해 크기가 1인 집합부터 반복문을 활용하여 탐색해나가므로, N번의 반복을 통해 해를 구할 수 있다.</li>\n</ul>\n<h1 id=\"4-예시\" style=\"position:relative;\"><a href=\"#4-%EC%98%88%EC%8B%9C\" aria-label=\"4 예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 예시</h1>\n<p>DP의 대표 문제 중 하나인 배낭싸기 문제를 예로 든다.</p>\n<p>배낭싸기 문제는 기본적으로 2차원의 DP배열을 만들어서 풀이할 수 있다. 아래에서 행은 배낭의 최대 무게가 w(&#x3C; W)인 부분집함를 말하고, 열은 첫번째 물건부터 n(&#x3C; N)개의 물건이 주어진 부분집합을 말한다. 그리고 DP배열 안에 들어가는 값은 해당 부분집합에서 배낭에 넣을 수 있는 최대 가치를 말한다.</p>\n<table>\n<tr>\n<td>\n무게\\물건 갯수\n</td>\n<td>\n0\n</td>\n<td>\n1\n</td>\n<td>\n2\n</td>\n<td>\n3\n</td>\n<td>\n...\n</td>\n<td>\nN-2\n</td>\n<td>\nN-1\n</td>\n<td>\nN\n</td>\n</tr>\n<tr>\n<td>\n0\n</td>\n<td>\n0\n</td>\n<td>\n0\n</td>\n<td>\n0\n</td>\n<td>\n0\n</td>\n<td>\n...\n</td>\n<td>\n0\n</td>\n<td>\n0\n</td>\n<td>\n0\n</td>\n</tr>\n<tr>\n<td>\n1\n</td>\n<td>\n0\n</td>\n<td>\n</td>\n<td>\n</td>\n<td>\n</td>\n<td>\n</td>\n<td>\n</td>\n<td>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n2\n</td>\n<td>\n0\n</td>\n<td>\n</td>\n<td>\n</td>\n<td>\n</td>\n<td>\n</td>\n<td>\n</td>\n<td>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n3\n</td>\n<td>\n0\n</td>\n<td>\n</td>\n<td>\n</td>\n<td>\n</td>\n<td>\n</td>\n<td>\n</td>\n<td>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n...\n</td>\n<td>\n...\n</td>\n<td>\n</td>\n<td>\n</td>\n<td>\n</td>\n<td>\n</td>\n<td>\n</td>\n<td>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\nW-2\n</td>\n<td>\n0\n</td>\n<td>\n</td>\n<td>\n</td>\n<td>\n</td>\n<td>\n</td>\n<td>\n</td>\n<td>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\nW-1\n</td>\n<td>\n0\n</td>\n<td>\n</td>\n<td>\n</td>\n<td>\n</td>\n<td>\n</td>\n<td>\n</td>\n<td>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\nW\n</td>\n<td>\n0\n</td>\n<td>\n</td>\n<td>\n</td>\n<td>\n</td>\n<td>\n</td>\n<td>\n</td>\n<td>\n</td>\n<td>\n</td>\n</tr>\n</table>\n<ul>\n<li><strong>초깃값 셋팅하기</strong>\n<ul>\n<li>배낭의 최대 무게가 0일 경우, 배낭에 넣을 수 있는 최대 가치는 0이다.</li>\n<li>주어진 물건이 0개 일 경우, 배낭에 넣을 수 있는 최대 가치는 0이다.</li>\n</ul>\n</li>\n<li><strong>부분집합의 최적해와 상위집합의 최적해 관계 찾기</strong>\n<ul>\n<li>DP[w][n] (1 &#x3C;= w &#x3C;= W, 1 &#x3C;= n &#x3C;= N) 의 경우를 생각해보자.<br>\n즉 가방의 최대 무게가 w이고, 첫번째 물건부터 n번째 물건이 주어졌을 때 가방에 최대로 넣을 수 있는 가치를 부분집합의 관계를 이용해 설명하면 다음과 같다.</li>\n<li>DP[w][n] = max(DP[w][n-1], DP[w-k][n-1] + v) (k는 n번째 물건의 무게이고, v는 n번째 물건의 가치이다.)<br>\nn번째 까지의 물건이 주어졌을 때 모든 가짓 수는, n번째 물건을 넣지 못한 경우와 n번째 물건을 넣은 두 가지로 분리할 수 있다. 따라서 각각의 경우에 대한 최적해를 비교함으로써 n번째 까지의 물건이 주어졌을 때의 최적해를 얻을 수 있다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"41-dp\" style=\"position:relative;\"><a href=\"#41-dp\" aria-label=\"41 dp permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.1. DP</h2>\n<pre><code class=\"language-python\">def DP(N, MAX_WEIGHT, weight, value):\n    # 행 : 가방의 최대 무게/ 열: i번째 물건\n    # DP[i][j] : 무게가 i인 가방에 j번째 물건가지 고려했을 때, 최대로 넣을 수 있는 가치\n    DP = [[0] * (N + 1) for _ in range(MAX_WEIGHT + 1)]\n\n    for bag_weight in range(1, MAX_WEIGHT + 1):\n        for obj_idx in range(1, N + 1):\n            obj_weight = weight[obj_idx]  # n번째 물건의 무게\n            obj_value = value[obj_idx]    # n번째 물건의 가치\n\n            include_case = 0              # n번째 물건의 무게가 가방의 무게를 초과할 경우, default 값으로 0을 설정\n            if bag_weight >= obj_weight:\n                include_case = DP[bag_weight-obj_weight][obj_idx - 1] + obj_value\n            exclude_case = DP[bag_weight][obj_idx - 1]\n            DP[bag_weight][obj_idx] = max(include_case, exclude_case)  # max(n번째 물건을 넣는 경우, n번째 물건을 넣지 않는 경우)\n\n    return DP[-1][-1]\n\nif __name__ == \"__main__\":\n    N, MAX_WEIGHT = map(int, input().split())\n\n    weight = [0] * (N + 1)\n    value = [0] * (N + 1)\n    for i in range(1, N + 1):\n        weight[i], value[i] = map(int, input().split())\n\n    answer = DP_top_down(N, MAX_WEIGHT, weight, value)\n    print(answer)\n\n</code></pre>\n<h2 id=\"42-memoization\" style=\"position:relative;\"><a href=\"#42-memoization\" aria-label=\"42 memoization permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.2. Memoization</h2>\n<pre><code class=\"language-python\">def DP_top_down(N, MAX_WEIGHT, weight, value):\n    # 행 : 가방의 최대 무게/ 열: i번째 물건\n    # DP[i][j] : 무게가 i인 가방에 j번째 물건가지 고려했을 때, 최대로 넣을 수 있는 가치\n    DP = [[0] * (N + 1) for _ in range(MAX_WEIGHT + 1)]\n\n    def memoization(bag_weight, obj_idx):\n        # 베이스 조건\n        if bag_weight &#x3C;= 0 or obj_idx &#x3C;= 0:\n            return 0\n\n        # memoization한 값이 있을 경우, 해당 값을 반환\n        if DP[bag_weight][obj_idx]:\n            return DP[bag_weight][obj_idx]\n\n        # memoization한 값이 없을 경우, DP와 같은 방식으로 계산\n        obj_weight = weight[obj_idx]\n        obj_value = value[obj_idx]\n\n        include_case = 0              # n번째 물건의 무게가 가방의 무게를 초과할 경우, default 값으로 0을 설정\n        if bag_weight >= obj_weight:\n            include_case = memoization(bag_weight-obj_weight, obj_idx - 1) + obj_value  # n번째 물건을 넣는 경우\n        exclude_case = memoization(bag_weight, obj_idx - 1)                         # n번째 물건을 넣지 않는 경우\n        DP[bag_weight][obj_idx] = max(include_case, exclude_case)                   # 결괏값 memoization\n\n        return DP[bag_weight][obj_idx]  # 결괏값 반환\n\n    return memoization(MAX_WEIGHT, N)  # 목표값부터 top-down방식으로 재귀호출\n\nif __name__ == \"__main__\":\n    N, MAX_WEIGHT = map(int, input().split())\n\n    weight = [0] * (N + 1)\n    value = [0] * (N + 1)\n    for i in range(1, N + 1):\n        weight[i], value[i] = map(int, input().split())\n\n    answer = DP_top_down(N, MAX_WEIGHT, weight, value)\n    print(answer)\n</code></pre>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#1-%EA%B0%9C%EC%9A%94\">1. 개요</a></p>\n</li>\n<li>\n<p><a href=\"#2-%EB%8F%99%EC%9E%91\">2. 동작</a></p>\n</li>\n<li>\n<p><a href=\"#3-%EC%8B%9C%EA%B0%84-%EB%B3%B5%EC%9E%A1%EB%8F%84\">3. 시간 복잡도</a></p>\n</li>\n<li>\n<p><a href=\"#4-%EC%98%88%EC%8B%9C\">4. 예시</a></p>\n<ul>\n<li><a href=\"#41-dp\">4.1. DP</a></li>\n<li><a href=\"#42-memoization\">4.2. Memoization</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"동적 계획법(Dynamic Programming) 알고리즘","createdAt":"2023-03-27","updatedAt":"2023-04-03","tags":null,"description":null,"reference":null}},"allMarkdownRemark":{"nodes":[{"id":"c2d5d6ed-d279-5dc9-9f23-c4512a66fe6b","excerpt":"1. 핵심 요약 P-NP 개념에 대해 구글링하면 온갖 수학적 개념이 튀어나와 사람을 기죽이고 그런다. 명제만으로 개념을 설명하기 위한 수학자들의 변태적 성향 때문인 것 같다. 따라서 나처럼 평범한 사람도 알아들을 법한 언어로 정리하면 다음과 같다. P…","parent":{"id":"4bbd300c-119d-54c0-a510-85c157669bde","name":"P_NP","relativePath":"Knowledge/Algorithm/P_NP.md"},"frontmatter":{"title":"\"P, NP, NP 난해, NP 완전\" 이해하기","createdAt":"2023-09-04","updatedAt":"2023-09-04"},"fields":{"slug":"/posts/Knowledge/Algorithm/P_NP/"}},{"id":"17e36b13-5f73-5ae0-9a67-52ead48d4c9d","excerpt":"1. 개요 상태공간이나 그래프를 출발점에서 시작하여 모든 리프노드까지 순서대로 탐색하는 완전탐색 기반의 알고리즘이다. 1.…","parent":{"id":"c7c369bf-ca93-5340-8f30-de603d6abb41","name":"DFS","relativePath":"Knowledge/Algorithm/DFS.md"},"frontmatter":{"title":"깊이 우선 탐색(Depth-First Search) 알고리즘","createdAt":"2023-03-14","updatedAt":"2023-04-17"},"fields":{"slug":"/posts/Knowledge/Algorithm/DFS/"}},{"id":"f5b89fe5-344c-5160-917a-32e1bf4a9e62","excerpt":"1. 개요 상태공간이나 그래프를 출발점으로부터 가까운 순으로 탐색해가는 완전탐색 기반의 알고리즘이다. 1.…","parent":{"id":"5d349556-f03d-5622-884a-9cc16f7fb179","name":"BFS","relativePath":"Knowledge/Algorithm/BFS.md"},"frontmatter":{"title":"너비 우선 탐색(Breadth-First Search) 알고리즘","createdAt":"2023-03-05","updatedAt":"2023-04-17"},"fields":{"slug":"/posts/Knowledge/Algorithm/BFS/"}},{"id":"e1ae7474-f48b-5c57-906f-18ad82ad0d5f","excerpt":"1. 개요 음의 가중치가 없는 그래프의 한 노드에서 다른 모드 노드까지의 최단거리를 각각 구하는 알고리즘. 대표적으로 사용되는 그리디 알고리즘이다.…","parent":{"id":"aaf42c2e-c693-5997-a7a3-3c71e17a3b28","name":"Dijkstra","relativePath":"Knowledge/Algorithm/Dijkstra.md"},"frontmatter":{"title":"다익스트라(Dijkstra) 알고리즘","createdAt":"2023-02-27","updatedAt":"2023-04-17"},"fields":{"slug":"/posts/Knowledge/Algorithm/Dijkstra/"}},{"id":"ec5c8f48-0db4-5505-934f-a6a9b277b3bc","excerpt":"…","parent":{"id":"dd0a76a3-18a5-5081-9481-38059237d9d9","name":"DP","relativePath":"Knowledge/Algorithm/DP.md"},"frontmatter":{"title":"동적 계획법(Dynamic Programming) 알고리즘","createdAt":"2023-03-27","updatedAt":"2023-04-03"},"fields":{"slug":"/posts/Knowledge/Algorithm/DP/"}},{"id":"d9e89351-096d-5259-a4ba-2e501389b537","excerpt":"1. 개요 상태공간이나 그래프의 노드를 모두 탐색하는 완전탐색 기반의 알고리즘이다. 다만, 가지 치기를 통해 탐색할 필요성이 없는 노드(상태)들을 탐색 대상에서 제외함으로써 효율을 높인다.…","parent":{"id":"ceb0d70a-d36c-5b9a-b5b5-d0b31632870d","name":"Backtracking","relativePath":"Knowledge/Algorithm/Backtracking.md"},"frontmatter":{"title":"백트래킹(Backtracking) 알고리즘","createdAt":"2022-08-23","updatedAt":"2023-04-17"},"fields":{"slug":"/posts/Knowledge/Algorithm/Backtracking/"}},{"id":"2a872d3e-74c2-5d9d-a981-491f2008d742","excerpt":"1. 개요 정렬된 데이터에서 검색 범위를 줄여 나가면서 목적 값을 찾는 알고리즘이다. 데이터가 정렬되어 있을 경우, 데이터를 크기가 같은 두 부분으로 나누고 유효한 데이터집합을 선 1.…","parent":{"id":"fa180fc0-4cc4-5a02-9216-c62a0f723d6a","name":"BinarySearch","relativePath":"Knowledge/Algorithm/BinarySearch.md"},"frontmatter":{"title":"이진탐색(Binary Search) 알고리즘","createdAt":"2023-04-11","updatedAt":"2023-04-11"},"fields":{"slug":"/posts/Knowledge/Algorithm/BinarySearch/"}},{"id":"748adb51-0c5a-592d-ac78-0fc432795b06","excerpt":"면접에서 탈탈 털린 후 작성한 정렬 관련 알고리즘을 총정리 1. Bubble Sort (거품 정렬) 1.1. 동작 과정 1.2. 복잡도 1.3. Python 구현 2. Selection Sort (선택 정렬) 2.1. 동작 과정 2.2. 복잡도 2.…","parent":{"id":"fccef43b-c33a-5da5-87aa-38645c71a10c","name":"Sorting","relativePath":"Knowledge/Algorithm/Sorting.md"},"frontmatter":{"title":"정렬(Sorting) 알고리즘 정리","createdAt":"2023-05-02","updatedAt":"2023-05-03"},"fields":{"slug":"/posts/Knowledge/Algorithm/Sorting/"}},{"id":"52921f0e-79ea-5032-9348-d29691eba9fa","excerpt":"1. 개요 신장 트리(Spanning Tree)는 그래프 내의 모든 노드를 포함하는 트리를 의미하며, **최소 신장 트리(Minimum Spanning Tree)**란 간선의 가중치 합이 최소가 되는 신장 트리를 말한다. 최소 신장 트리는 Greedy…","parent":{"id":"1512b8ac-0e1f-5289-bd74-f1666316e889","name":"MST","relativePath":"Knowledge/Algorithm/MST.md"},"frontmatter":{"title":"최소 신장 트리(Minimum Spaaning Tree) 알고리즘","createdAt":"2023-04-17","updatedAt":"2023-04-17"},"fields":{"slug":"/posts/Knowledge/Algorithm/MST/"}}]}},"pageContext":{"pagePath":"/posts/Knowledge/Algorithm/DP/","siblingPostsPathRegex":"/^(?!.*README).*Knowledge\\/Algorithm.*$/","relativeDirectory":"Algorithm","id":"ec5c8f48-0db4-5505-934f-a6a9b277b3bc","parent":{"id":"dd0a76a3-18a5-5081-9481-38059237d9d9","name":"DP","relativePath":"Knowledge/Algorithm/DP.md"},"fields":{"slug":"/posts/Knowledge/Algorithm/DP/"}}},"staticQueryHashes":["24302420","4059933791"],"slicesMap":{}}