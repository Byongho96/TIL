{"componentChunkName":"component---src-templates-post-index-tsx","path":"/posts/Knowledge/Interview/03_04_CPU_스케줄링_알고리즘/","result":{"data":{"markdownRemark":{"id":"ea9a829c-0a5d-5d7b-9b5e-cd29f42287c1","html":"<h3 id=\"cpu-스케쥴링-알고리즘이란-무엇인가요\" style=\"position:relative;\"><a href=\"#cpu-%EC%8A%A4%EC%BC%80%EC%A5%B4%EB%A7%81-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80%EC%9A%94\" aria-label=\"cpu 스케쥴링 알고리즘이란 무엇인가요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CPU 스케쥴링 알고리즘이란 무엇인가요?</h3>\n<p>CPU 스케쥴링 알고리즘은 어떤 프로세스에게 CPU를 할당할 지 결정하는 알고리즘 입니다. CPU 알고리즘은 CPU 이용률은 높게, 준비 큐에 있는 프로세스는 적게, 그리고 응답시간은 짧게 구현하는 거을 목표로 합니다.</p>\n<h2 id=\"341-비선점형-방식\" style=\"position:relative;\"><a href=\"#341-%EB%B9%84%EC%84%A0%EC%A0%90%ED%98%95-%EB%B0%A9%EC%8B%9D\" aria-label=\"341 비선점형 방식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.4.1. 비선점형 방식</h2>\n<h3 id=\"비선점형-cpu-스케쥴링과-그-종류에-대해-설명해주세요\" style=\"position:relative;\"><a href=\"#%EB%B9%84%EC%84%A0%EC%A0%90%ED%98%95-cpu-%EC%8A%A4%EC%BC%80%EC%A5%B4%EB%A7%81%EA%B3%BC-%EA%B7%B8-%EC%A2%85%EB%A5%98%EC%97%90-%EB%8C%80%ED%95%B4-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94\" aria-label=\"비선점형 cpu 스케쥴링과 그 종류에 대해 설명해주세요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>비선점형 CPU 스케쥴링과 그 종류에 대해 설명해주세요</h3>\n<p>비선점형 CPU 스케쥴링은, 현재 동작 중인 프로세스로부터 CPU 소유권을 강제로 빼앗지 않는 스케쥴링 방식입니다. 따라서 프로세스가 스스로 소유권을 반납하기 전까지, CPU를 사용할 수 있기 때문에 <strong>컨텍스트 스위칭이 적게 일어납니다.</strong> 반면 <strong>우선순위가 낮은 프로세스들이 오랫동안 대기할 수 있는 문제</strong>가 발생합니다.</p>\n<p>비선점형 CPU 스케쥴링 알고리즘에는 다음과 같은 종류가 있습니다.</p>\n<ul>\n<li>\n<p><strong>FCFS (First-Come, First-Served)</strong><br>\n먼저 도착한 프로세스부터 순서대로 CPU를 할당하는 알고리즘입니다. 프로세스의 도착 시간과 실행 시간에 따라 대기 시간이 크게 달라질 수 있습니다. 예를 들어 길게 수행되는 프로세스가 먼저 도착할 경우, 뒤에 대기하는 프로세스가 많아집니다.</p>\n</li>\n<li>\n<p><strong>SJF (Shortest Job First)</strong><br>\n실행 시간이 가장 짧은 프로세스엑 CPU를 할당하는 알고리즘입니다. 실행 시간은 과거의 실행 시간을 바타으로 계산해 추측합니다. 평균 대기 시간을 최소화하는데 효과적이지만, 긴 시간을 가진 프로셋가 실행되지 않는 <mark>스타베이션(startvation)</mark>이 발생할 수 있습니다.</p>\n</li>\n<li>\n<p><strong>우선순위 (Priority Scheduling)</strong><br>\n각 프로세스마다 우선순위를 할당하고, 우선순위가 가장 높은 프로세스에게 CPU를 할당하는 알고리즘입니다. 동일 우선순위에 대해서는 FCFS와 같은 다른 알고리즘을 적용할 수 있습니다.</p>\n</li>\n<li>\n<p><strong>최상 응답 비율 순서 (HRRN, Highest Response Ratio Next)</strong><br>\n대기 시간과 실행 시간을 고려하여 우선순위를 결정하는 알고리즘입니다. 실행 시간이 길어질수록 우선순위가 높아지는 방식으로 동작합니다. SJF 스케쥴링의 Starvation을 보완하기 위해 만들어진 알고리즘입니다.<br>\n$${\\displaystyle Priority={\\frac {대기\\ 시간+실행\\ 시간}{실행\\ 시간}}}$$</p>\n</li>\n</ul>\n<h2 id=\"342-선점형-방식\" style=\"position:relative;\"><a href=\"#342-%EC%84%A0%EC%A0%90%ED%98%95-%EB%B0%A9%EC%8B%9D\" aria-label=\"342 선점형 방식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.4.2. 선점형 방식</h2>\n<h3 id=\"선점형-cpu-스케쥴링과-그-종류에-대해-설명해주세요\" style=\"position:relative;\"><a href=\"#%EC%84%A0%EC%A0%90%ED%98%95-cpu-%EC%8A%A4%EC%BC%80%EC%A5%B4%EB%A7%81%EA%B3%BC-%EA%B7%B8-%EC%A2%85%EB%A5%98%EC%97%90-%EB%8C%80%ED%95%B4-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94\" aria-label=\"선점형 cpu 스케쥴링과 그 종류에 대해 설명해주세요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>선점형 CPU 스케쥴링과 그 종류에 대해 설명해주세요</h3>\n<p>선점형 CPU 스케쥴링은 실행 중인 프로세스로부터 CPU 소유권을 강제로 가져올 수 있는 스케쥴링 방식입니다. 비선점형 방식에 비해 <strong>컨텍스트 스위칭이 많이 일어나지만,</strong> 유연하게 멀티 프로세싱(스레딩)을 지원할 수 있기 때문에 현대 운영체제에서 채택한 방식입니다.</p>\n<p>선점형 CPU 스케쥴링 알고리즘에는 다음과 같은 종류가 있습니다.</p>\n<ul>\n<li>\n<p><strong>라운드 로빈(Round Robin)</strong><br>\n각 프로세스마다 CPU 할당 시간을 일정하게 분배합니다. 예를 들어 할당 시간이 q이고, 총 프로세스가 N개라면, q*(N-1)의 시간마다 CPU를 할당 받게 됩니다.<br>\n할당 시간이 너무 짧을 경우, 잦은 컨텍스트 스위칭으로 오버헤드가 발생합니다.<br>\n반면 할당 시간이 너무 길 경우, 프로세스의 평균 응답 시간이 짧아집니다.</p>\n</li>\n<li>\n<p><strong>SRTF(Shortest Remaining Time First)</strong><br>\n현재 프로세스 중 실행 시간이 가장 짧은 프로세스에게 CPU를 할당하는 알고리즘입니다. SJF 방식과 다르게 현재 프로세스가 실행도는 중이라도, 더 짧은 시간을 가진 프로세스가 들어오면 CPU 소유권을 넘겨줍니다.</p>\n</li>\n<li>\n<p><strong>다단계 큐(Multilevel Queue)</strong><br>\n프로세스들을 여러 개의 우선순위 큐로 분리하여 관리하는 알고리즘입니다. 각 큐마다 라운드 로빈이나 FCFS와 같은 서로 다른 스케줄링 알고리즘을 적용할 수 있습니다.</p>\n</li>\n</ul>","tableOfContents":"<ul>\n<li>\n<ul>\n<li><a href=\"#cpu-%EC%8A%A4%EC%BC%80%EC%A5%B4%EB%A7%81-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80%EC%9A%94\">CPU 스케쥴링 알고리즘이란 무엇인가요?</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#341-%EB%B9%84%EC%84%A0%EC%A0%90%ED%98%95-%EB%B0%A9%EC%8B%9D\">3.4.1. 비선점형 방식</a></p>\n<ul>\n<li><a href=\"#%EB%B9%84%EC%84%A0%EC%A0%90%ED%98%95-cpu-%EC%8A%A4%EC%BC%80%EC%A5%B4%EB%A7%81%EA%B3%BC-%EA%B7%B8-%EC%A2%85%EB%A5%98%EC%97%90-%EB%8C%80%ED%95%B4-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94\">비선점형 CPU 스케쥴링과 그 종류에 대해 설명해주세요</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#342-%EC%84%A0%EC%A0%90%ED%98%95-%EB%B0%A9%EC%8B%9D\">3.4.2. 선점형 방식</a></p>\n<ul>\n<li><a href=\"#%EC%84%A0%EC%A0%90%ED%98%95-cpu-%EC%8A%A4%EC%BC%80%EC%A5%B4%EB%A7%81%EA%B3%BC-%EA%B7%B8-%EC%A2%85%EB%A5%98%EC%97%90-%EB%8C%80%ED%95%B4-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94\">선점형 CPU 스케쥴링과 그 종류에 대해 설명해주세요</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"CS 인터뷰: CPU 스케쥴링 알고리즘","createdAt":"2023-07-04","updatedAt":"2023-07-04","tags":["CS","면접 대비","운영체제","스케쥴링"],"description":"운영체제 CPU 스케쥴링 알고리즘에 관한 면접 QnA","reference":"주홍철, 『면접을 위한 CS 전공지식 노트』, 길벗(2023), 3장"}},"allMarkdownRemark":{"nodes":[{"id":"e16e25bc-91f6-50d5-8416-a16926802510","excerpt":"3.1.1. 운영체제의 역할과 구조 운영체제의 역할을 설명해주세요 운영체제의 역할은 크게 4가지가 있습니다. 프로세스 관리 CPU 스케쥴링을 통해 CPU…","parent":{"id":"c7f3ea5a-bc1b-5025-b015-85e12f50a657","name":"03_01_운영체제와_컴퓨터","relativePath":"Knowledge/Interview/03_01_운영체제와_컴퓨터.md"},"frontmatter":{"title":"CS 인터뷰: 운영체제와 컴퓨터","createdAt":"2023-06-20","updatedAt":"2023-06-20"},"fields":{"slug":"/posts/Knowledge/Interview/03_01_운영체제와_컴퓨터/"}},{"id":"c0ecb8c7-bdf8-511d-bd36-b0e3764e3cb9","excerpt":"3.2.1. 메모리 계층 메모리 계층 구조에 대해 설명해주세요 컴퓨터의 메모리는 계층 구조로 이루어져 있습니다. 지역성의 원리를 바탕으로, 자주 사용되는 데이터를 더 빠르게 접근하게 함으로써 CPU의 성능을 높일 수 있기 때문입니다. CPU…","parent":{"id":"1e38710d-a1ee-5565-b323-8cd10920c616","name":"03_02_메모리","relativePath":"Knowledge/Interview/03_02_메모리.md"},"frontmatter":{"title":"CS 인터뷰: 메모리","createdAt":"2023-06-21","updatedAt":"2023-06-21"},"fields":{"slug":"/posts/Knowledge/Interview/03_02_메모리/"}},{"id":"79e2ff65-f38a-592a-9c22-868a572549d9","excerpt":"3.3.1. 프로세스와 컴파일 과정 컴파일 과정에 대해 설명해주세요 프로그램의 컴파일 과정은 다음과 같은 과정으로 이뤄집니다. 전처리(Preprocessing…","parent":{"id":"3354d630-9fd4-5cd4-ba01-d245f3b0fa2c","name":"03_03_프로세스와_스레드","relativePath":"Knowledge/Interview/03_03_프로세스와_스레드.md"},"frontmatter":{"title":"CS 인터뷰: 프로세스와 스레드","createdAt":"2023-07-03","updatedAt":"2023-07-03"},"fields":{"slug":"/posts/Knowledge/Interview/03_03_프로세스와_스레드/"}},{"id":"ea9a829c-0a5d-5d7b-9b5e-cd29f42287c1","excerpt":"CPU 스케쥴링 알고리즘이란 무엇인가요? CPU 스케쥴링 알고리즘은 어떤 프로세스에게 CPU를 할당할 지 결정하는 알고리즘 입니다. CPU 알고리즘은 CPU…","parent":{"id":"e4156314-bcbd-51ed-b7d9-ee0d4f9de9e0","name":"03_04_CPU_스케줄링_알고리즘","relativePath":"Knowledge/Interview/03_04_CPU_스케줄링_알고리즘.md"},"frontmatter":{"title":"CS 인터뷰: CPU 스케쥴링 알고리즘","createdAt":"2023-07-04","updatedAt":"2023-07-04"},"fields":{"slug":"/posts/Knowledge/Interview/03_04_CPU_스케줄링_알고리즘/"}},{"id":"d8a9a31c-c228-52e4-99c3-2bf07a571e37","excerpt":"데이터베이스와 DBMS가 무엇인지 각각 구분해서 설명해주세요 데이터베이스는 일정한 규칙을 통해 체계화 된 데이터의 집합니다. DBMS를 관리하는 소프트웨어 시스템입니다. DBMS…","parent":{"id":"dd443087-b316-507b-97b9-b197e529991d","name":"04_01_데이터베이스의_기본","relativePath":"Knowledge/Interview/04_01_데이터베이스의_기본.md"},"frontmatter":{"title":"CS 인터뷰: 데이터베이스의 기본","createdAt":"2023-07-05","updatedAt":"2023-07-05"},"fields":{"slug":"/posts/Knowledge/Interview/04_01_데이터베이스의_기본/"}},{"id":"b8309812-d0cd-5989-a36c-1682a6fc88d5","excerpt":"4.2.1. ERD의 중요성 ERD란 무엇인가요? ERD는 Entity-Relationship Diagram의 약자입니다. 즉 이름처럼 ERD는 다양한 속성을 가진 엔터티를 생성하고, 이들 간의 관계를 시각적으로 나타내는 다이어그램입니다. ERD…","parent":{"id":"a7569cec-d98f-5519-8a84-90cef040bef7","name":"04_02_ERD와_정규화_과정","relativePath":"Knowledge/Interview/04_02_ERD와_정규화_과정.md"},"frontmatter":{"title":"CS 인터뷰: ERD와 정규화 과정","createdAt":"2023-07-06","updatedAt":"2023-07-06"},"fields":{"slug":"/posts/Knowledge/Interview/04_02_ERD와_정규화_과정/"}},{"id":"9ab7d5f7-d7c0-5257-8d47-608b3d23429d","excerpt":"4.3.…","parent":{"id":"5d3bb971-d021-597c-b3a9-abc2922ac5c9","name":"04_03_트랜잭션과_무결성","relativePath":"Knowledge/Interview/04_03_트랜잭션과_무결성.md"},"frontmatter":{"title":"CS 인터뷰: 트랜잭션과 무결성","createdAt":"2023-07-07","updatedAt":"2023-07-07"},"fields":{"slug":"/posts/Knowledge/Interview/04_03_트랜잭션과_무결성/"}}]}},"pageContext":{"pagePath":"/posts/Knowledge/Interview/03_04_CPU_스케줄링_알고리즘/","siblingPostsPathRegex":"/^(?!.*README).*Knowledge\\/Interview\\/.*$/","relativeDirectory":"Interview","id":"ea9a829c-0a5d-5d7b-9b5e-cd29f42287c1","parent":{"id":"e4156314-bcbd-51ed-b7d9-ee0d4f9de9e0","name":"03_04_CPU_스케줄링_알고리즘","relativePath":"Knowledge/Interview/03_04_CPU_스케줄링_알고리즘.md"},"fields":{"slug":"/posts/Knowledge/Interview/03_04_CPU_스케줄링_알고리즘/"}}},"staticQueryHashes":["24302420","4059933791"],"slicesMap":{}}