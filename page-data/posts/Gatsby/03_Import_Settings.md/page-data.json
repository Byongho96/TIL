{"componentChunkName":"component---src-templates-post-index-tsx","path":"/posts/Gatsby/03_Import_Settings.md/","result":{"data":{"markdownRemark":{"id":"edb1ecbe-8696-5631-9034-74899cfc6482","html":"<h1 id=\"1-import-경로\" style=\"position:relative;\"><a href=\"#1-import-%EA%B2%BD%EB%A1%9C\" aria-label=\"1 import 경로 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. import 경로</h1>\n<p>프로젝트를 진행하다 보면, import 절대경로를 설정하지 않을 수 없다.\r\n심지어 어쩌다가 한 번, IDE에서 자동 import가 되지 않으면 <code>../</code>의 지옥을 맛볼 수 있다.</p>\n<p>우리가 바라는 건 이랬던 코드가</p>\n<pre><code class=\"language-js\">import Article from '../../../article.tsx'\r\nimport * as styles from '../../../../styles/markdown.scss'\n</code></pre>\n<p>이렇게 바뀌는 것이다.</p>\n<pre><code class=\"language-js\">import * as init from '@components/article.tsx'\r\nimport * as styles from '@styles/global.scss'\n</code></pre>\n<p>프로젝트를 시작할 때, 딱 한 번 구글링해서 설정하면 끝이기 때문에, 매번 설정하면서도 매번 까먹게 된다. 그래서 설정법을 설정을 정리함과 동시에 원리에 대해서 간략히 정리해보려고 한다.</p>\n<h1 id=\"2-tsconfig--jsconfig\" style=\"position:relative;\"><a href=\"#2-tsconfig--jsconfig\" aria-label=\"2 tsconfig  jsconfig permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. tsconfig / jsconfig</h1>\n<p>먼저 타입스크립트 프로젝트라면 tsconfig.json 파일에서, 자바스크립트 프로젝트라면 jsconfig.json 파일에서 절대경로를 설정해줘야 한다. 해당 파일들은 프로젝트 루트경로에 위치해야 한다.</p>\n<p>해당 파일들에서 import 경로를 설정하는 이유는 <strong>코드 편집기에 알려주기 위해서다.</strong>(tsconfig의 경우 TypeScript Compiler도 포함)</p>\n<p>이를 <mark><strong>IntellSene</strong></mark>라고 하는데, 코드 편집기(IDE)가 코드의 컨텍스트를 분석하여 변수, 속성, 메서드 등을 자동 완성해주는 기능을 말한다. 당연히 우리가 모듈을 import할 때 경로를 자동 완성해주는 기능도 포함된다.</p>\n<pre><code class=\"language-json\">{\r\n    \"compilerOptions\": {\r\n        \"baseUrl\": \"src\",  /* 모듈 참조의 절대경로 설정 */\r\n        \"paths\": {\r\n            \"@assets/*\": [\"assets/*\"],\r\n            \"@components/*\": [\"components/*\"],\r\n            \"@contexts/*\": [\"contexts/*\"],\r\n            \"@hooks/*\": [\"hooks/*\"],\r\n            \"@layouts\": [\"layouts/*\"],\r\n            \"@pages/*\": [\"pages/*\"],\r\n            \"@queries/*\": [\"queries/*\"],\r\n            \"@styles/*\": [\"styles/*\"],\r\n            \"@templates/*\": [\"templates/*\"],\r\n            \"@utils/*\": [\"utils/*\"]\r\n        }\r\n        ...\r\n    }\r\n}\n</code></pre>\n<ul>\n<li><strong>baseUrl</strong><br>\n모듈이 비상대적인 경로를 참조되었을 경우, 탐색 기준을 설정한다.</li>\n<li><strong>paths</strong><br>\nbaseUrl을 기준으로 각각의 절대경로에 대한 별칭(alias)를 설정한다.\r\n예를 들어, 위 예시에서 <code>@components/</code>는 실제 <code>src/components/</code>를 의미한다.</li>\n</ul>\n<h1 id=\"3-webpack\" style=\"position:relative;\"><a href=\"#3-webpack\" aria-label=\"3 webpack permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. webpack</h1>\n<p>이제 실제 빌드를 수행하는 webpack에도 모듈 import 참조 경로를 알려줘야 한다. 앞의 설정은 말한 것처럼 코드 편집기(or tsc)에 알려주는 설정이었기 때문에, 실제 빌드가 성공적으로 이뤄지기 위해서는 webpack에도 같은 내용을 알려줘야 한다.</p>\n<p>관련된 플러그인이나 라이브러리도 있지만, Gatsby의 <strong>node API를 이용해서 직접 설정</strong>해줄 수도 있다.</p>\n<p>Gatsby 프로젝트를 생성해보면 알겠지만, 따로 webpack.config.js 파일이 자동 생성되지 않는다. 대신 Gatsby는 node API를 통해 webpack 설정할 수 있도록 지원한다.</p>\n<p><strong>Node API는 Gatsby 프로젝트가 빌드될 때 호출된다.</strong> <a href=\"https://www.gatsbyjs.com/docs/reference/config-files/gatsby-node/#onCreateWebpackConfig\">Gatsby 공식문서</a>를 보면 다양한 api가 있는데, 그 중 우리가 사용할 것은 <code>onCreateWebpackConfig</code>이다. 아래와 같은 방식으로 tsconfig파일에서 설정한 내용과 대응되게 설정하면 된다.</p>\n<pre><code class=\"language-js\">// commonJS 방식으로 path 모듈 import\r\nconst path = require('path')\r\n\r\n// __dirname은 node.js가 제공하는 변수로써 현재 모듈의 경로를 반환한다.\r\nexports.onCreateWebpackConfig = ({ actions }) => {\r\n  actions.setWebpackConfig({\r\n    resolve: {\r\n      alias: {\r\n        '@assets': path.resolve(__dirname, 'src/assets'),\r\n        '@components': path.resolve(__dirname, 'src/components'),\r\n        '@contexts': path.resolve(__dirname, 'src/contexts'),\r\n        '@hooks': path.resolve(__dirname, 'src/hooks'),\r\n        '@layouts': path.resolve(__dirname, 'src/layouts'),\r\n        '@pages': path.resolve(__dirname, 'src/pages'),\r\n        '@queries': path.resolve(__dirname, 'src/queries'),\r\n        '@styles': path.resolve(__dirname, 'src/styles'),\r\n        '@templates': path.resolve(__dirname, 'src/templates'),\r\n        '@utils': path.resolve(__dirname, 'src/utils'),\r\n      },\r\n    },\r\n  })\r\n}\n</code></pre>\n<h1 id=\"4-참조\" style=\"position:relative;\"><a href=\"#4-%EC%B0%B8%EC%A1%B0\" aria-label=\"4 참조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 참조</h1>\n<ul>\n<li><a href=\"https://levelup.gitconnected.com/how-to-set-up-import-aliases-for-gatsby-32398ae67e7f\">How to Set Up Import Aliases for Gatsby</a></li>\n<li><a href=\"https://www.gatsbyjs.com/docs/reference/config-files/gatsby-node/#onCreateWebpackConfig\">Gatsby Node APIs</a></li>\n</ul>","tableOfContents":"<ul>\n<li><a href=\"#1-import-%EA%B2%BD%EB%A1%9C\">1. import 경로</a></li>\n<li><a href=\"#2-tsconfig--jsconfig\">2. tsconfig / jsconfig</a></li>\n<li><a href=\"#3-webpack\">3. webpack</a></li>\n<li><a href=\"#4-%EC%B0%B8%EC%A1%B0\">4. 참조</a></li>\n</ul>","frontmatter":{"title":"03. Gatsby 프로젝트(TypeScript) import 경로 설정","createdAt":"2023-06-24","updatedAt":"2023-06-24","tags":["gatsby","절대경로","import","설정","TypeScript","타입스크립트"],"description":"Gatsby 타입스크립트(TypeScript) 프로젝트의 절대경로 설정법을 알아본다","reference":"https://levelup.gitconnected.com/how-to-set-up-import-aliases-for-gatsby-32398ae67e7f"}},"allMarkdownRemark":{"nodes":[{"id":"2c22a9fe-6e55-5cd2-be55-e902b6b6fcc6","parent":{"id":"0b9617c4-ed0a-531b-a87c-fff826b4aec4","name":"01_Gatsby","relativePath":"Gatsby/01_Gatsby.md"},"frontmatter":{"title":"01. Gatsby 렌더링 옵션과 프로젝트 구조","createdAt":"2023-06-16","updatedAt":"2023-06-16"},"excerpt":"시작하기 앞서... Gatsby로 Markdown기반의 블로그를 만들려고 한다면, Gatsby 공식문서를 보는 것을 추천한다. 맞춤형 강의라고 해도 믿을 만큼 잘 정리되어 있기 때문이다. 때문에 나는 앞으로 Gatsby…"},{"id":"1b19a664-d7dc-5413-91bf-4559af16858e","parent":{"id":"e3778e76-bb67-5f38-a2d4-47476f65b947","name":"02_Github_Pages","relativePath":"Gatsby/02_Github_Pages.md"},"frontmatter":{"title":"02. Gatsby 프로젝트 Github Pages 배포","createdAt":"2023-06-23","updatedAt":"2023-06-23"},"excerpt":"1. 프론트엔드 배포란? 프론트엔드 배포를 한 마디로 정리하면, 특정 url을 통한 GET요청에 대해 index.html…"},{"id":"edb1ecbe-8696-5631-9034-74899cfc6482","parent":{"id":"2378d91b-1037-5ac3-b8d7-e86a0fdfce88","name":"03_Import_Settings","relativePath":"Gatsby/03_Import_Settings.md"},"frontmatter":{"title":"03. Gatsby 프로젝트(TypeScript) import 경로 설정","createdAt":"2023-06-24","updatedAt":"2023-06-24"},"excerpt":"1. import 경로 프로젝트를 진행하다 보면, import 절대경로를 설정하지 않을 수 없다.\r\n심지어 어쩌다가 한 번, IDE에서 자동 import…"},{"id":"97d4c090-15ea-5775-a861-8ed71d31c0d8","parent":{"id":"986ad4bf-2d04-5918-b8b2-4a5f9c68c383","name":"04_ESLint_Prettier","relativePath":"Gatsby/04_ESLint_Prettier.md"},"frontmatter":{"title":"04. Gatsby 프로젝트 Prettier & ESLint & Husky 설정","createdAt":"2023-06-25","updatedAt":"2023-06-25"},"excerpt":"1. 개요 1.1. Prettier & ESLint란? Prettier와 ESLint는 각각 코드 포맷팅(Code Formatting)과 린팅(Linting…"},{"id":"52cf22c3-7db9-5e31-a0dc-9e837e7ba723","parent":{"id":"dc66ae82-c929-5dca-8e6a-f74309c1d21e","name":"05_Dark_Mode","relativePath":"Gatsby/05_Dark_Mode.md"},"frontmatter":{"title":"05. Gatsby 다크모드 구현하기 (feat. Sass)","createdAt":"2023-06-26","updatedAt":"2023-06-26"},"excerpt":"아래 내용은 주관적인 의견이고, 카카오 FE 기술 블로그의 내용을 참조했습니다. 1. Sass 다크모드 한동안 다크모드를 공부한 적이 있다. Styled Component와 같은 CSS-in-JS…"},{"id":"95c61d11-080e-5fa5-bc12-2a210ff8f291","parent":{"id":"b7e5ab1e-e98e-5af9-930b-e6efdc6c441f","name":"06_Navigation_Layout","relativePath":"Gatsby/06_Navigation_Layout.md"},"frontmatter":{"title":"06. Gatsby 네비게이션 레이아웃 설정","createdAt":"2023-06-27","updatedAt":"2023-06-27"},"excerpt":"1. SSG 렌더링 React에서는 Nested Route로 손 쉽게 레이아웃을 구현할 수 있다. 그런데 Gatsby는 Single Page Application이 아니다! Gatsby는 정적 사이트 생성기(SSG)로 빌드 시에, 모든 url…"},{"id":"04ce1246-e6ef-5a01-9225-9edc678c87ab","parent":{"id":"bb17b51e-d008-5e91-a110-1b8410cdaafa","name":"07_Custom_Pages","relativePath":"Gatsby/07_Custom_Pages.md"},"frontmatter":{"title":"07. Gatsby 커스텀 페이지 생성","createdAt":"2023-06-27","updatedAt":"2023-06-27"},"excerpt":"1. 튜토리얼 방식의 한계 Gatsby 튜토리얼 Part6 를 보면 file system routes라고 해서 파일시스템에 있는 파일들에 대해서 동적으로 페이지를 생성하는 방법을 소개한다. 예를 들어 아래 그림처럼 src/pages/아래에 {mdx…"},{"id":"80a66559-06f8-5281-adc2-489adcdafc98","parent":{"id":"3f3d3e65-adff-5bd2-b242-11fbcbc30966","name":"08_Diretory_Based_Category","relativePath":"Gatsby/08_Diretory_Based_Category.md"},"frontmatter":{"title":"08. 폴더 구조 기반 Gatsby 카테고리 바 생성","createdAt":"2023-06-28","updatedAt":"2023-06-28"},"excerpt":"틀린 내용이 있거나, 제가 모르는 방법이 있다면 제발 알려주세요 1. GraphQL 아직 GraphQL을 파일시스템에 대해서 밖에 사용하지 않아, 정확히 GraphQL이 뭔지는 감이 안잡힌다. 하지만 그 제한된 경험으로도 GrqphQL이 기존 API…"}]}},"pageContext":{"pagePath":"posts/Gatsby/03_Import_Settings.md","regex":"/^(?!.*README).*Gatsby.*$/","relativeDirectory":"Gatsby","id":"edb1ecbe-8696-5631-9034-74899cfc6482","parent":{"id":"2378d91b-1037-5ac3-b8d7-e86a0fdfce88","name":"03_Import_Settings","relativePath":"Gatsby/03_Import_Settings.md"}}},"staticQueryHashes":["3300660363","3571427910","82772122"],"slicesMap":{}}