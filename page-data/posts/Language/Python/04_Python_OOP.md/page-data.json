{"componentChunkName":"component---src-templates-post-index-tsx","path":"/posts/Language/Python/04_Python_OOP.md/","result":{"data":{"markdownRemark":{"id":"e7dd4362-ca48-5431-9bea-2629d690c9fb","html":"<ul>\n<li><a href=\"#1-overview\">1. Overview</a>\n<ul>\n<li><a href=\"#11-object-oriented-programming\">1.1. Object Oriented Programming</a></li>\n<li><a href=\"#12-class\">1.2. Class</a></li>\n<li><a href=\"#13-object\">1.3. Object</a></li>\n<li><a href=\"#14-basic-grammer\">1.4. Basic Grammer</a></li>\n<li><a href=\"#15-namespace\">1.5. Namespace</a></li>\n</ul>\n</li>\n<li><a href=\"#2-attributes\">2. Attributes</a>\n<ul>\n<li><a href=\"#21-class-attributes\">2.1. Class Attributes</a></li>\n<li><a href=\"#22-instance-attributes\">2.2. Instance Attributes</a></li>\n</ul>\n</li>\n<li><a href=\"#3-methods\">3. Methods</a>\n<ul>\n<li><a href=\"#31-class-methods\">3.1. Class Methods</a></li>\n<li><a href=\"#32-instance-methods\">3.2. Instance Methods</a></li>\n<li><a href=\"#33-static-methods\">3.3. Static methods</a></li>\n<li><a href=\"#34-decorator\">3.4. Decorator</a></li>\n<li><a href=\"#35-magic-methods-dunder-methods\">3.5. Magic Methods (Dunder Methods)</a></li>\n</ul>\n</li>\n<li><a href=\"#4-inheritence\">4. Inheritence</a>\n<ul>\n<li><a href=\"#41-simple-inheritance\">4.1. Simple Inheritance</a></li>\n<li><a href=\"#42-super__init__\">4.2. super().__init__()</a></li>\n<li><a href=\"#43-supermethod\">4.3. super().method</a></li>\n<li><a href=\"#44-superclass-self\">4.4. super(Class, self)</a></li>\n<li><a href=\"#45-multiple-inheritence\">4.5. Multiple Inheritence</a>\n<ul>\n<li><a href=\"#461-classmro-method-resolution-order\">4.6.1. Class.mro (Method Resolution Order)**</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#5-polymorphism\">5. Polymorphism</a>\n<ul>\n<li><a href=\"#51-override\">5.1. Override</a></li>\n<li><a href=\"#52-overloading\">5.2. Overloading</a></li>\n</ul>\n</li>\n<li><a href=\"#6-encapsulation\">6. Encapsulation</a>\n<ul>\n<li><a href=\"#61-public-member\">6.1. Public member</a></li>\n<li><a href=\"#62-protected-member\">6.2. Protected Member</a></li>\n<li><a href=\"#63-private-member\">6.3. Private Member</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1 id=\"1-overview\" style=\"position:relative;\"><a href=\"#1-overview\" aria-label=\"1 overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Overview</h1>\n<h2 id=\"11-object-oriented-programming\" style=\"position:relative;\"><a href=\"#11-object-oriented-programming\" aria-label=\"11 object oriented programming permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.1. Object Oriented Programming</h2>\n<p><strong>Consider programming as a collection of objects which can handle data and communicate with each others</strong></p>\n<ul>\n<li>\n<p><strong>Pros and Cons</strong></p>\n<ul>\n<li><strong>Pros</strong>\n<ul>\n<li>Modularization is suitable for a big project</li>\n<li>Easy to be maintained</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><strong>Cons</strong>\n<ul>\n<li>Hard to be designed at first</li>\n<li>relatively slower than Procedure Oriented Programming</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><strong>Characteristics</strong>\n<ol>\n<li>Abstraction</li>\n<li>Inheritance</li>\n<li>Polymorphism</li>\n<li>Encapsulation</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"12-class\" style=\"position:relative;\"><a href=\"#12-class\" aria-label=\"12 class permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.2. Class</h2>\n<p>As a blueprint for an object, a class provides a way to bind attrubutes(data) and methods(functions) together</p>\n<h2 id=\"13-object\" style=\"position:relative;\"><a href=\"#13-object\" aria-label=\"13 object permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.3. Object</h2>\n<p>Data uploaded on memory based on the definition of the class</p>\n<h2 id=\"14-basic-grammer\" style=\"position:relative;\"><a href=\"#14-basic-grammer\" aria-label=\"14 basic grammer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.4. Basic Grammer</h2>\n<ul>\n<li>\n<p><strong>Define a Class</strong></p>\n<pre><code class=\"language-python\">class Person:\n    num = 0\n    name ='human'\n\n    @classmethod\n    def class_greeting(cls):\n        print('hello,', cls.name)\n\n    def __init__(self, name = 'Kim'):\n        Person.num += 1\n        self.name = name\n\n    def greeting(self):\n        print('hello,', self.name)\n\nprint(type(Person)) # &#x3C;class 'type'>\n</code></pre>\n</li>\n<li>\n<p><strong>Make an Instance</strong></p>\n<pre><code class=\"language-python\">person1 = Person()\nprint(isinstance(person1, Person))  # True\nprint(type(person1))    # &#x3C;class '__main__.Person'>\n                        # __main__: describes that class Person is defined in the current module(.py)\n</code></pre>\n</li>\n<li>\n<p><strong>Use attributes</strong></p>\n<pre><code class=\"language-python\"># class attribute\nprint(Person.name)    # human\n# instance attribute\nprint(person1.name)   # Kim\n</code></pre>\n</li>\n<li>\n<p><strong>Call methods</strong></p>\n<pre><code class=\"language-python\"># class method\nPerson.class_greeting()     # Hello, human\n# instance method\nperson1.greeting()          # Hello, Kim\n</code></pre>\n</li>\n</ul>\n<h2 id=\"15-namespace\" style=\"position:relative;\"><a href=\"#15-namespace\" aria-label=\"15 namespace permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.5. Namespace</h2>\n<p>Python finds the names in the following order</p>\n<ol>\n<li>instance</li>\n<li>Child Class</li>\n<li>Parent Class</li>\n</ol>\n<h1 id=\"2-attributes\" style=\"position:relative;\"><a href=\"#2-attributes\" aria-label=\"2 attributes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Attributes</h1>\n<h2 id=\"21-class-attributes\" style=\"position:relative;\"><a href=\"#21-class-attributes\" aria-label=\"21 class attributes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.1. Class Attributes</h2>\n<p>Class attributes are class variables that are inherited by every object of a class.</p>\n<ul>\n<li>Class attributes are defined outside the __init__() function.</li>\n<li>Class attributes can be added by <code>Class.attribute = initial value</code></li>\n</ul>\n<h2 id=\"22-instance-attributes\" style=\"position:relative;\"><a href=\"#22-instance-attributes\" aria-label=\"22 instance attributes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.2. Instance Attributes</h2>\n<p>Instance instance attributes arevariables that allow us to define different values for each object(instance) of a class.</p>\n<ul>\n<li>Instance attributes are defined in the __init__() function.</li>\n<li>Instance attributes can be added by <code>instance.attribute = initial value</code></li>\n</ul>\n<pre><code class=\"language-python\">class Person:\n    name = 'lee'\n\n    def __init__(self, name):\n        self.name =name\n\nPerson.age = 21     # Class attributes can be added\nprint(Person.name)\nprint(Person.age)\n\nperson1 = Person('Kim')\nperson1.age = 23    # Instance attributes can be added\nprint(person1.name)\nprint(person1.age)\n\n# 클래스 이름공간(변수, 메소드) 검색\nprint(dir(Person))\n# 클래스 이름공간(변수, 메소드) 검색\nprint(dir(person1.__class__))\n# 인스턴스 변수 검색\nprint(vars(person1))\n</code></pre>\n<h1 id=\"3-methods\" style=\"position:relative;\"><a href=\"#3-methods\" aria-label=\"3 methods permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Methods</h1>\n<h2 id=\"31-class-methods\" style=\"position:relative;\"><a href=\"#31-class-methods\" aria-label=\"31 class methods permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.1. Class Methods</h2>\n<p><strong>Methods that only uses class variables</strong></p>\n<ul>\n<li>The first parameter should be <code>cls</code> which indciates the class</li>\n<li><code>@classmethod</code> should be used before defining the function, otherwise the <code>cls</code> parameter can't get the class as the argument.</li>\n</ul>\n<pre><code class=\"language-python\">class  Person:\n    count=0\n    @classmethod\n    def number_of_population(cls):\n        print(f'the num of population is {cls.count}')\n\nPerson.number_of_population() # the num of population is 0\n</code></pre>\n<h2 id=\"32-instance-methods\" style=\"position:relative;\"><a href=\"#32-instance-methods\" aria-label=\"32 instance methods permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.2. Instance Methods</h2>\n<p><strong>Methods that can use both class variables and instance variables</strong></p>\n<ul>\n<li>The first parameter must be <code>self</code></li>\n</ul>\n<h2 id=\"33-static-methods\" style=\"position:relative;\"><a href=\"#33-static-methods\" aria-label=\"33 static methods permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.3. Static methods</h2>\n<p><strong>Methods that don't use both class variables and instance variables</strong></p>\n<ul>\n<li><code>@staticmethod</code> should be used before defining the function.</li>\n</ul>\n<pre><code class=\"language-python\">class  Person:\n    count=0\n    def __init__(self, name):\n        self.name = name\n        Person.count += 1\n\n    @staticmehtod\n    def check_rich(money):\n        return money > 10000\n\nperson1 = Person('Kim')\nprint(Person.check_rich(100000))    # True\nprint(person1.check_rich(100000))   # True\n</code></pre>\n<h2 id=\"34-decorator\" style=\"position:relative;\"><a href=\"#34-decorator\" aria-label=\"34 decorator permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.4. Decorator</h2>\n<p><strong>The decorator receives the function as an argument, and returns it by adding a specific code to the function.</strong></p>\n<pre><code class=\"language-python\">def hello(name):\n    print(\"hello,\", name)\n\ndef add_print(original):\n        print(\"function starts\")\n        original(*args)\n        print(\"function ends\")\n    return wrapper\n\nadd_print(hello)('James')   # add_print(original()) : means tht add_print is gonna use the return vale of original function\n# function starts\n# hello\n# function ends\n\n\n@add_print\ndef print_hello(name):\n    print(\"hello,\", name)\n\nprint_hello('Anna')\n# function starts\n# hello, Anna\n# function ends\n</code></pre>\n<h2 id=\"35-magic-methods-dunder-methods\" style=\"position:relative;\"><a href=\"#35-magic-methods-dunder-methods\" aria-label=\"35 magic methods dunder methods permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.5. Magic Methods (Dunder Methods)</h2>\n<p><strong>Magic methods (dunder methods) in Python are the special methods that start and end with the double underscores.</strong><br>\nMagic methods are not meant to be invoked directly by you, but the invocation happens internally from the class on a certain action.</p>\n<ul>\n<li>\n<p><strong>Construtor(__init__)</strong><br>\ncalled when making objects</p>\n<pre><code class=\"language-python\">class Person:\n    def __init__(self, name):\n        self.name = name\n\nperson1 = Person('Kim')\nprint(person1.name)   # Kim\n</code></pre>\n</li>\n<li>\n<p><strong>Destructor(__del__)</strong>\ncalled when deleting objects</p>\n<pre><code class=\"language-python\">class Person:\n    def __del__(self):\n        print('인스턴스가 사라졌습니다.')\n\nperson1 = Person()\ndel person1           # 인스턴스가 사라졌습니다.\n</code></pre>\n</li>\n<li>\n<p><strong>__add__</strong><br>\nTo get called on add operation using + operator</p>\n<pre><code class=\"language-python\">class Person:\n\n    def __init__(self, name):\n        self.name = name\n\n    def __add__(self, another):\n        return self.name + ' married ' + another.name\n\nperson1 = Person('Kim')\nperson2 = Person('Lee')\n\nprint(person1 + person2)    # Kim married Lee\n</code></pre>\n</li>\n</ul>\n<h1 id=\"4-inheritence\" style=\"position:relative;\"><a href=\"#4-inheritence\" aria-label=\"4 inheritence permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. Inheritence</h1>\n<p><a href=\"https://supermemi.tistory.com/entry/Python-3-super%ED%81%B4%EB%9E%98%EC%8A%A4-selfinit-%EC%97%90-%EB%8C%80%ED%95%B4-%EC%A0%9C%EB%8C%80%EB%A1%9C-%EC%95%8C%EC%95%84%EB%B3%B4%EC%9E%90\">상속과 super()에 대해 정리된 블로그 글</a></p>\n<p>Inheritance allows us to define a class that inherits all the methods and properties from another(parent) class.</p>\n<p><strong>Parent class</strong> is the class being inherited from, also called base class.<br>\n<strong>Child class</strong> is the class that inherits from another class, also called derived class.\n<strong>Object</strong> is an ancestor of all classes.</p>\n<pre><code class=\"language-python\">class ChildClass(ParentClass):\n\nchild = ChildClass()\nprint(issubclass(ChildClass, ParentClass))  # True\nprint(issubclass(ChildClass, Object))       # True\n</code></pre>\n<h2 id=\"41-simple-inheritance\" style=\"position:relative;\"><a href=\"#41-simple-inheritance\" aria-label=\"41 simple inheritance permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.1. Simple Inheritance</h2>\n<p>Child class can use Parent class's <mark>class instances</mark> and <mark>methods</mark>.</p>\n<pre><code class=\"language-python\">class Human:\n    name = 'name'\n    age = 'age'\n\n    def __init__(self):\n        self.city = 'city'\n\n    def show(self):\n        print('This is a method of Human class')\n\nclass Student(Human):\n\n    def __init__(self, name):\n        self.name = name\n\n    def show_name(self):\n        print(self.name)\n\n    def show_age(self):\n        print(self.age)\n\n    def show_city(self):\n        print(self.city)\n\na = Student('James')\na.show()        # This is a method of Human class\na.show_name()   # James\na.show_age()    # age\na.show_city()   # Attrubute Error!\n</code></pre>\n<h2 id=\"42-super__init__\" style=\"position:relative;\"><a href=\"#42-super__init__\" aria-label=\"42 super__init__ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.2. super().__init__()</h2>\n<p>To use parent class's <mark>instance attributes</mark> in child class, you need to excute parent class's constructor by using <code>super().__init__()</code>.</p>\n<pre><code class=\"language-python\">class Human:\n\n    def __init__(self):\n        self.name = 'name'\n        self.city = 'city'\n\n    def show(self):\n        print('This is a method of Human class')\n\nclass Student(Human):\n\n    def __init__(self, name):\n        super().__init__()\n        self.name = name\n\n    def show_name(self):\n        print(self.name)\n\n    def show_city(self):\n        print(self.city)\n\na = Student('James')\na.show()        # This is a method of Human class\na.show_name()   # James\na.show_city()   # city\n</code></pre>\n<p><code>super().__init()__</code> simply means that you're using parent class's <code>__init__()</code> method.</p>\n<pre><code class=\"language-python\">class Human:\n\n    def __init__(self):\n        self.name = 'name'\n        self.city = 'city'\n\n    def show(self):\n        print('This is a method of Human class')\n\nclass Student(Human):\n\n    def __init__(self, name):\n        self.name = name\n        super().__init__()\n\n    def show_name(self):\n        print(self.name)\n\na = Student('James')\na.show_name()   # name\n</code></pre>\n<h2 id=\"43-supermethod\" style=\"position:relative;\"><a href=\"#43-supermethod\" aria-label=\"43 supermethod permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.3. super().method</h2>\n<p>In the same manner as <code>super().__init__()</code>, <strong>you can call parent's method in the child class's method.</strong></p>\n<pre><code class=\"language-python\">class Human:\n\n    def __init__(self):\n        self.name = 'name'\n        self.age = 'age'\n        self.city = 'city'\n\n    def show_everything(self):\n        print(self.name, self.age, self.city)\n\nclass Student(Human):\n\n    def __init__(self):\n        super().__init__()\n\n    def introduce(self):\n        print('Let me introduce myself')\n        super.show_everything()\n\na = Student()\na.introduce()   # Let me introduce myself\n                # name age city\n</code></pre>\n<h2 id=\"44-superclass-self\" style=\"position:relative;\"><a href=\"#44-superclass-self\" aria-label=\"44 superclass self permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.4. super(Class, self)</h2>\n<p>By using <code>super(Class, self)</code>, you can <mark>specify which class of parent's method</mark> to use.</p>\n<pre><code class=\"language-python\">class A:\n    def __init__(self):\n        self.a = 10\n\n    def get_a(self):\n        return self.a\n\nclass B(A):\n    def __init__(self):\n        super(B, self).__init__()\n        self.b = 20\n\n    def get_b(self):\n        return self.b\n\nclass C(B):\n    def __init__(self):\n        super(B, self).__init__()\n        self.c = 30\n\n    def get_c(self):\n        return self.c\n\nnew_c = C()\nprint(new_c.get_a())    # 10\nprint(new_c.get_c())    # 30\nprint(new_c.get_b())    # AttributeError\n                        # B.__init__() has not excuted!\n</code></pre>\n<h2 id=\"45-multiple-inheritence\" style=\"position:relative;\"><a href=\"#45-multiple-inheritence\" aria-label=\"45 multiple inheritence permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.5. Multiple Inheritence</h2>\n<p>Python supports multiple inheritance.<br>\nIf there are multiple parents, Pyhton searches <strong>the namespace in the order in which the class are received.</strong></p>\n<pre><code class=\"language-python\">class Person:\n    def __init__(self, name):\n        self.name = name\n    def greeting(self):\n        return f'Hi, {self.name}'\n\nclass Mom(Person):\n    gene = 'XX'\n\n    def swim(self):\n        return 'Mom\\'s Swimming'\n\nclass Dad(Person):\n    gene = 'XY'\n\n    def walk(self):\n        return 'Dad\\'s walking'\n\nclass Child(Mom, Dad):\n    def swim(self):\n        return 'A child\\'s swimming'\n    def cry(self):\n        return 'A child\\'s crying'\n\nbaby1 = FirstChild('Lee')\nprint(baby1.cry())  # A child's crying\nprint(baby1.swim()) # A child's swimming\nprint(baby1.walk()) # Dad's walking\nprint(baby1.gene()) # XX    &#x3C;&#x3C;&#x3C;     since (Mom, Dad)\n</code></pre>\n<h3 id=\"461-classmro-method-resolution-order\" style=\"position:relative;\"><a href=\"#461-classmro-method-resolution-order\" aria-label=\"461 classmro method resolution order permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.6.1. Class.mro (Method Resolution Order)**</h3>\n<p>mro method shows all the parent classes(including self) in method resolution order.</p>\n<pre><code class=\"language-python\">print(FirstChild.mro())\n#[&#x3C;class '__main__.FirstChild'>, &#x3C;class '__main__.Mom'>, &#x3C;class '__main__.Dad'>, &#x3C;class '__main__.Person'>, &#x3C;class 'Object'>]\n</code></pre>\n<h1 id=\"5-polymorphism\" style=\"position:relative;\"><a href=\"#5-polymorphism\" aria-label=\"5 polymorphism permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. Polymorphism</h1>\n<p>The same name of method can work differently according to classes.</p>\n<h2 id=\"51-override\" style=\"position:relative;\"><a href=\"#51-override\" aria-label=\"51 override permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.1. Override</h2>\n<p><strong>Redefine a inherited mehtod in child class.</strong></p>\n<pre><code class=\"language-python\">class Person:\n    def __init__(self, name):\n        self.name = name\n\n    def talk(self):\n        print(f'Hi, I\\'m {self.name}')\n\nclass Professor(Person):\n    def talk(self):\n        print(f'Hi, I\\'m professor {self.name}')\n\nclass Student(Person):\n    def talk(self):\n        super().talk()\n        print(f'Hi, I\\'m a student')\n\n\np1 = Professor('Kim')\np1.talk()   # Hi, I'm professor Kim\n\ns1 = Student('Lee')\ns1.talk()   # Hi, I'm Lee\n            # Hi, I'm a student\n</code></pre>\n<h2 id=\"52-overloading\" style=\"position:relative;\"><a href=\"#52-overloading\" aria-label=\"52 overloading permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.2. Overloading</h2>\n<p>Overloading refers to the ability to use a single identifier to define multiple methods of a class that differ in their input and output parameters.</p>\n<p>Python does not support overloading officially because <strong>Python can transfer multiple variables as one object(tuple)</strong></p>\n<h1 id=\"6-encapsulation\" style=\"position:relative;\"><a href=\"#6-encapsulation\" aria-label=\"6 encapsulation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. Encapsulation</h1>\n<p>Encapsulation refers to <strong>limiting access to certain class attributes.</strong></p>\n<h2 id=\"61-public-member\" style=\"position:relative;\"><a href=\"#61-public-member\" aria-label=\"61 public member permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6.1. Public member</h2>\n<ul>\n<li>Public memebers can be accessed from everywhere</li>\n<li>All members of a class are by default public in Python.</li>\n</ul>\n<h2 id=\"62-protected-member\" style=\"position:relative;\"><a href=\"#62-protected-member\" aria-label=\"62 protected member permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6.2. Protected Member</h2>\n<ul>\n<li>\n<p>Protected members of a class can be accessed from <strong>the class and its subclasses.</strong></p>\n</li>\n<li>\n<p>In fact, protected memebers <mark>still can be accessed and modified outside of the classes.</mark> It's just a protocol between developers.</p>\n</li>\n<li>\n<p>Can be declared by adding a prefix '_'</p>\n<pre><code class=\"language-python\">class Student:\n    _schoolName = 'XYZ School'\n\n    def __init__(self, name, age):\n        self._name=name\n        self._age=age\n\nstd = Student('Kim', 25)\nprint(std._name)    # Kim\n\nstd._name = 'Lee'\nprint(std._name)    # Lee\n</code></pre>\n</li>\n<li>\n<p>You can use decorators to protected members.</p>\n</li>\n<li>\n<p>However, it is still accessible in Python.</p>\n<pre><code class=\"language-python\">class Student:\n    def __init__(self,name):\n        self._name = name\n\n    @property\n    def name(self):\n        return self._name\n\n    @name.setter\n    def name(self,name):\n        if isinstance(name, str):\n            raise TypeError\n        self._name = name\n\nstd = Student('Kim')\nprint(std.name)     # Kim\n\nstd.name = 'Lee'\nprint(std.name)     # Lee\n\nprint(std._name)    # Lee / still accessible\n\nstd.name = 1        # TypeError\nprint(std.name)\n</code></pre>\n</li>\n</ul>\n<h2 id=\"63-private-member\" style=\"position:relative;\"><a href=\"#63-private-member\" aria-label=\"63 private member permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6.3. Private Member</h2>\n<ul>\n<li>Private members of a class can only be accessed from <strong>the class.</strong> Any attempt to do so will result in an <strong>AttributeError</strong>.</li>\n<li>Can be declared by adding a prefix '__'</li>\n</ul>\n<pre><code class=\"language-python\">class Student:\n    __schoolName = 'XYZ School'\n\n    def __init__(self, name, age):\n        self.__name = name\n        self.__age = age\n\n    def __show(self):\n\t    print('This is private method.')\n\nstd = Student(\"Kim\", 25)\nprint(std.__schoolName)     # AttributeError\nprint(std.__name)           # AttributeError\nprint(std.__show())         # AttributeError\n</code></pre>\n<ul>\n<li>Private memebers be changed to <code>object._class__variable</code>.</li>\n<li>But the practice should be refrained.</li>\n</ul>\n<pre><code class=\"language-python\">std = Student(\"Bill\", 25)\nprint(std._Student__name)   # Bill\n\nstd._Student__name = 'Steve'\nprint(std._Student__name)   # Steve\n\nstd._Student__display()     # This is private method.\n</code></pre>\n<ul>\n<li>For accessing and modifying the private members, using decorators is reocmmended.</li>\n</ul>\n<pre><code class=\"language-python\">class Student:\n\n    def __init__(self, name, age):\n        self.__name = name\n        self.__age = age\n\n    @property\n    def age(self):\n        return self.__age\n\n    @age.setter\n    def age(self, new_age):\n        if new_age &#x3C; 0:\n            raise ValueError(\"invaild range\")\n        self.__age = new_age\n\nstd = Student(\"Bill\", 25)\nprint(std.age)              # 25\n\nstd.age = 11\nprint(std.age)              # 11\n\nstd.age = -1                # ValueError\nprint(std.age)\n</code></pre>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#1-overview\">1. Overview</a></p>\n<ul>\n<li><a href=\"#11-object-oriented-programming\">1.1. Object Oriented Programming</a></li>\n<li><a href=\"#12-class\">1.2. Class</a></li>\n<li><a href=\"#13-object\">1.3. Object</a></li>\n<li><a href=\"#14-basic-grammer\">1.4. Basic Grammer</a></li>\n<li><a href=\"#15-namespace\">1.5. Namespace</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#2-attributes\">2. Attributes</a></p>\n<ul>\n<li><a href=\"#21-class-attributes\">2.1. Class Attributes</a></li>\n<li><a href=\"#22-instance-attributes\">2.2. Instance Attributes</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#3-methods\">3. Methods</a></p>\n<ul>\n<li><a href=\"#31-class-methods\">3.1. Class Methods</a></li>\n<li><a href=\"#32-instance-methods\">3.2. Instance Methods</a></li>\n<li><a href=\"#33-static-methods\">3.3. Static methods</a></li>\n<li><a href=\"#34-decorator\">3.4. Decorator</a></li>\n<li><a href=\"#35-magic-methods-dunder-methods\">3.5. Magic Methods (Dunder Methods)</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#4-inheritence\">4. Inheritence</a></p>\n<ul>\n<li>\n<p><a href=\"#41-simple-inheritance\">4.1. Simple Inheritance</a></p>\n</li>\n<li>\n<p><a href=\"#42-super__init__\">4.2. super().__init__()</a></p>\n</li>\n<li>\n<p><a href=\"#43-supermethod\">4.3. super().method</a></p>\n</li>\n<li>\n<p><a href=\"#44-superclass-self\">4.4. super(Class, self)</a></p>\n</li>\n<li>\n<p><a href=\"#45-multiple-inheritence\">4.5. Multiple Inheritence</a></p>\n<ul>\n<li><a href=\"#461-classmro-method-resolution-order\">4.6.1. Class.mro (Method Resolution Order)**</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#5-polymorphism\">5. Polymorphism</a></p>\n<ul>\n<li><a href=\"#51-override\">5.1. Override</a></li>\n<li><a href=\"#52-overloading\">5.2. Overloading</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#6-encapsulation\">6. Encapsulation</a></p>\n<ul>\n<li><a href=\"#61-public-member\">6.1. Public member</a></li>\n<li><a href=\"#62-protected-member\">6.2. Protected Member</a></li>\n<li><a href=\"#63-private-member\">6.3. Private Member</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"04. Python OOP","createdAt":"2022-11-08","updatedAt":"2022-12-24","tags":null,"description":null,"reference":null}},"allMarkdownRemark":{"nodes":[{"id":"26b5d91c-8e49-5676-9b95-fdbf3643ed35","parent":{"id":"e231c11d-5ed6-58af-9044-30f76ec189d5","name":"01_Python_Basics_Datatypes_Operators","relativePath":"Language/Python/01_Python_Basics_Datatypes_Operators.md"},"frontmatter":{"title":"01. Python Datatypes & Operators","createdAt":"2022-11-08","updatedAt":"2022-12-22"},"excerpt":"1. Code Style 2. Variables 2.1. Naming Rules 2.2. Type Hint (after python 3.5) 3. Non-Container Data Types 3.1. Boolean Type 3.2. Numeric…"},{"id":"9e14188e-d132-5283-94fb-feaf0ccc6171","parent":{"id":"6628dede-89bb-57b2-93a4-b64200dbd5cf","name":"02_Python_Basics_ControlStatements","relativePath":"Language/Python/02_Python_Basics_ControlStatements.md"},"frontmatter":{"title":"02. Python Control Statements","createdAt":"2022-11-08","updatedAt":"2022-12-22"},"excerpt":"1. Conditional Statement 1.1. if... elif... else 1.2. Ternary Operators 2. Loop Statement 2.1. while 2.2. for 2.2.1. Comprehension…"},{"id":"7251d71d-a7f6-5a97-b322-28de4c1bffa0","parent":{"id":"f2b858d2-1eda-58b2-a3b9-abe57ec1cb4b","name":"03_Python_Function","relativePath":"Language/Python/03_Python_Function.md"},"frontmatter":{"title":"03. Python Function","createdAt":"2022-11-08","updatedAt":"2022-12-22"},"excerpt":"1. Function 1.1. Type of Function 1.2. Parameters and Arguments 1.2.1. Default Parameter Value 1.2.2. Arbitrary Arguments, *args 1.2.…"},{"id":"e7dd4362-ca48-5431-9bea-2629d690c9fb","parent":{"id":"ade53bec-678e-51fc-86e2-1ea2d9eee7dd","name":"04_Python_OOP","relativePath":"Language/Python/04_Python_OOP.md"},"frontmatter":{"title":"04. Python OOP","createdAt":"2022-11-08","updatedAt":"2022-12-24"},"excerpt":"1. Overview 1.1. Object Oriented Programming 1.2. Class 1.3. Object 1.4. Basic Grammer 1.5. Namespace 2. Attributes 2.1. Class Attributes…"},{"id":"7e9b56c8-d501-5192-9916-d612c1d9c994","parent":{"id":"e576d12f-cae6-5588-8c0c-5180e1f84ba6","name":"05_Python_Error_Handling","relativePath":"Language/Python/05_Python_Error_Handling.md"},"frontmatter":{"title":"05. Python Error Handling","createdAt":"2022-11-08","updatedAt":"2022-12-23"},"excerpt":"1. Terms 2. Types of error 2.1. Syntax Error 2.2 Exception 3. Error Handing 3.1. Try Except 1. Terms Bug problems occurring in SW Debugging…"},{"id":"5bb5d54b-8968-5aa7-9207-816d2cc260a7","parent":{"id":"32493aef-3265-50bc-9223-6444734ac0b4","name":"Appendix_01_Python_Builtin_Functions","relativePath":"Language/Python/Appendix_01_Python_Builtin_Functions.md"},"frontmatter":{"title":"Appendix 01. Python Built-in Functions","createdAt":"2022-11-08","updatedAt":"2022-12-24"},"excerpt":"1. Built-in functions 2. Built-in functions2 2.1. del 2.2. print 2.3. enumerate(iterable, start=0) 2.4. map(function, iterable) 2.5. filter…"},{"id":"4544d12e-c5c3-5697-a178-4a64fede14ea","parent":{"id":"e86057de-d147-5260-8218-c3c71897402c","name":"Appendix_02_Python_Modules","relativePath":"Language/Python/Appendix_02_Python_Modules.md"},"frontmatter":{"title":"Appendix 02. Python Modules","createdAt":"2022-11-08","updatedAt":"2022-12-23"},"excerpt":"1. Terms 2. How to Import Modules 2.1. Install Package 2.2. Import 3. Modules 3.1. sys 3.2. re 3.3. collections 3.4. heapq 3.5. functools…"}]}},"pageContext":{"pagePath":"posts/Language/Python/04_Python_OOP.md","regex":"/^(?!.*README).*Language\\/Python.*$/","relativeDirectory":"Python","id":"e7dd4362-ca48-5431-9bea-2629d690c9fb","parent":{"id":"ade53bec-678e-51fc-86e2-1ea2d9eee7dd","name":"04_Python_OOP","relativePath":"Language/Python/04_Python_OOP.md"}}},"staticQueryHashes":["3300660363","522921546"],"slicesMap":{}}