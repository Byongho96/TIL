{"componentChunkName":"component---src-templates-post-index-tsx","path":"/posts/Language/JavaScript/new/","result":{"data":{"markdownRemark":{"id":"61ce8ae2-05de-5484-9960-76b1d878106a","html":"<h1 id=\"1-생성자-함수--new-키워드\" style=\"position:relative;\"><a href=\"#1-%EC%83%9D%EC%84%B1%EC%9E%90-%ED%95%A8%EC%88%98--new-%ED%82%A4%EC%9B%8C%EB%93%9C\" aria-label=\"1 생성자 함수  new 키워드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 생성자 함수 &#x26; new 키워드</h1>\n<p><strong>new 키워드와 생성자 함수를 사용하면 손쉽게 객체를 찍어낼 수 있다.</strong> 자바스크립트 버전의 OOP라고 생각할 수 있다. 자바가 객체를 찍어내기 위해 <code>class</code> 키워드를 사용한다면, 자바스크립트는 생성자 함수와 <code>new</code> 키워드를 사용한다. (ES6 버전부터 자바스크립트도 <code>class</code>키워드를 지원하지만, 내부 동작은 바뀌지 않았다.)</p>\n<h2 id=\"11-정의\" style=\"position:relative;\"><a href=\"#11-%EC%A0%95%EC%9D%98\" aria-label=\"11 정의 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.1. 정의</h2>\n<p>생성자 함수는 <strong>객체를 생성(반환)하는 함수</strong>이다. 사실 다른 일반 함수와 기술적으로 동일하다. 다만 다음 2개의 관례를 통해 구분되어 사용된다. (관례라는 것에서 추측할 수 있듯이 강제성은 없다.)</p>\n<ul>\n<li>함수 이름의 첫 글자는 대문자로 시작한다.</li>\n<li>new 키워드를 붙여 실행한다.</li>\n</ul>\n<pre><code class=\"language-js\">// 생성자 함수\nfunction User(name) {\n  this.name = name\n  this.sayHi = function () {\n    console.log('제 이름은 ' + this.name + '입니다.')\n  }\n}\n\nconst mike = new User('mike')\nconsole.log(mike.name) // mike\nmike.sayHi() // 제 이름은 mike입니다.\n\nconst sally = new User('sally')\nconsole.log(sally.name) // sally\nsally.sayHi() // 제 이름은 sally입니다.\n</code></pre>\n<h2 id=\"12-동작-원리\" style=\"position:relative;\"><a href=\"#12-%EB%8F%99%EC%9E%91-%EC%9B%90%EB%A6%AC\" aria-label=\"12 동작 원리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.2. 동작 원리</h2>\n<p>앞서 말했다시피 생성자 함수는 일반 함수와 다르지 않다. 차이를 만드는 것은 <code>new</code> 키워드이다. <code>new</code> 키워드가 내부적으로 다음 2가지 동작을 추가한다.</p>\n<ul>\n<li>함수 코드 실행 전, <code>this</code>에 빈 객체를 할당한다.</li>\n<li>함수 코드 실행 후, <code>this</code>를 반환한다.</li>\n</ul>\n<p><code>new</code> 키워드가 아래처럼 2줄의 주석 코드가 내부적으로 실행한다.</p>\n<pre><code class=\"language-js\">function User(name) {\n  // this = {}\n\n  this.name = name\n  this.sayHi = function () {\n    console.log('제 이름은 ' + this.name + '입니다.')\n  }\n\n  // return this\n}\n\nconst mike = new User('mike')\n</code></pre>\n<h2 id=\"13-관례-벗어나보기\" style=\"position:relative;\"><a href=\"#13-%EA%B4%80%EB%A1%80-%EB%B2%97%EC%96%B4%EB%82%98%EB%B3%B4%EA%B8%B0\" aria-label=\"13 관례 벗어나보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.3. 관례 벗어나보기</h2>\n<p>앞 서 말한 2개의 관례를 벗어나보자.</p>\n<ul>\n<li>\n<p><strong>함수 이름의 첫 글자는 대문자로 시작한다.</strong><br>\n아래와 같이 코드를 작성해도 전혀 무리없이 동작한다. 그럼에도 생성자 함수를 대문자로 작성하는 것은, 해당 함수를 <code>new</code>키워드로 실행하라는 힌트를 주기 위해서인 것 같다.</p>\n<pre><code class=\"language-js\">function user(name) {\n  this.name = name\n  this.sayHi = function () {\n    console.log('제 이름은 ' + this.name + '입니다.')\n  }\n}\n\nconst mike = new user('mike')\nconsole.log(mike.name) // mike\nmike.sayHi() // 제 이름은 mike입니다.\n</code></pre>\n</li>\n<li>\n<p><strong>new 키워드를 붙여 실행한다.</strong><br>\nnew 키워드 없이 실행하면 에러가 난다. 내부적으로 <code>this</code>가 선언되지 않았기 때문에 <code>undefinend</code>에 속성을 추가할 수 없기 때문이다.</p>\n<pre><code class=\"language-js\">function User(name) {\n  this.name = name\n  this.sayHi = function () {\n    console.log('제 이름은 ' + this.name + '입니다.')\n  }\n}\n\nconst mike = User('mike') // TypeError: Cannot set properties of undefined (setting 'name')\n</code></pre>\n</li>\n</ul>\n<h1 id=\"2-return문\" style=\"position:relative;\"><a href=\"#2-return%EB%AC%B8\" aria-label=\"2 return문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. return문</h1>\n<p>그런데 만약 <code>return</code>문이 있는 함수를 <code>new</code> 키워드로 실행시키면 어떻게 될까?</p>\n<h2 id=\"21-원시-타입\" style=\"position:relative;\"><a href=\"#21-%EC%9B%90%EC%8B%9C-%ED%83%80%EC%9E%85\" aria-label=\"21 원시 타입 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.1. 원시 타입</h2>\n<p>리턴하는 값이 원시 타입일 경우, 원래 <code>return</code>문을 무시하고 <code>this</code>를 반환한다.</p>\n<pre><code class=\"language-js\">function sum(a, b) {\n  return a + b\n}\n\nconst result = new sum(1, 1)\nconsole.log(result) // {}\nconsole.log(typeof result) // object\n</code></pre>\n<h2 id=\"22-객체-타입\" style=\"position:relative;\"><a href=\"#22-%EA%B0%9D%EC%B2%B4-%ED%83%80%EC%9E%85\" aria-label=\"22 객체 타입 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.2. 객체 타입</h2>\n<p>리턴하는 값이 객체 타입일 경우, 원래 <code>return</code>문을 그대로 반환한다.</p>\n<pre><code class=\"language-js\">function sum(a, b) {\n  return { result: a + b }\n}\n\nconst result = new sum(1, 1)\nconsole.log(result) // { result: 2 }\n</code></pre>\n<p>참고로 자바스크립트에서는 배열이나 함수도 모두 객체이다. 부디 기억해주길 바란다.</p>\n<pre><code class=\"language-js\">function sum(a, b) {\n  return [a + b]\n}\n\nconst result = new sum(1, 1)\nconsole.log(result) // [ 2 ]\n</code></pre>\n<h1 id=\"3-참고자료\" style=\"position:relative;\"><a href=\"#3-%EC%B0%B8%EA%B3%A0%EC%9E%90%EB%A3%8C\" aria-label=\"3 참고자료 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 참고자료</h1>\n<ul>\n<li><a href=\"https://ko.javascript.info/constructor-new\">Ilya Kantor: new 연산자와 생성자 함수</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=8hrSkOihmBI&#x26;t=1s\">코딩앙마: 자바스크립트 중급 강좌 #2 - 생성자 함수</a></li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#1-%EC%83%9D%EC%84%B1%EC%9E%90-%ED%95%A8%EC%88%98--new-%ED%82%A4%EC%9B%8C%EB%93%9C\">1. 생성자 함수 &#x26; new 키워드</a></p>\n<ul>\n<li><a href=\"#11-%EC%A0%95%EC%9D%98\">1.1. 정의</a></li>\n<li><a href=\"#12-%EB%8F%99%EC%9E%91-%EC%9B%90%EB%A6%AC\">1.2. 동작 원리</a></li>\n<li><a href=\"#13-%EA%B4%80%EB%A1%80-%EB%B2%97%EC%96%B4%EB%82%98%EB%B3%B4%EA%B8%B0\">1.3. 관례 벗어나보기</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#2-return%EB%AC%B8\">2. return문</a></p>\n<ul>\n<li><a href=\"#21-%EC%9B%90%EC%8B%9C-%ED%83%80%EC%9E%85\">2.1. 원시 타입</a></li>\n<li><a href=\"#22-%EA%B0%9D%EC%B2%B4-%ED%83%80%EC%9E%85\">2.2. 객체 타입</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#3-%EC%B0%B8%EA%B3%A0%EC%9E%90%EB%A3%8C\">3. 참고자료</a></p>\n</li>\n</ul>","frontmatter":{"title":"자바스크립트 생성자 함수 & new 키워드","createdAt":"2023-10-11","updatedAt":"2023-10-11","tags":["JavaScript","자바스크립트","new","생성자 함수","객체지향"],"description":"자바스크립트 new 키워드와 생성자 함수의 역할","reference":null}},"allMarkdownRemark":{"nodes":[{"id":"d213caa5-57cc-5e67-a96c-cfebe6f529f8","excerpt":"1. Intro 1.1. What is JavaScript? 1.2. The History of JavaScript 1.3. Write to HTML Script 1.4. When to Run JS 1.4.1. Synchronous execution…","parent":{"id":"1720b21e-2873-54b9-8fe5-5ec0e54d9d2e","name":"01_JavaScript_Basics","relativePath":"Language/JavaScript/01_JavaScript_Basics.md"},"frontmatter":{"title":"01. JavaScript Basics","createdAt":"2022-10-23","updatedAt":"2023-01-05"},"fields":{"slug":"/posts/Language/JavaScript/01_JavaScript_Basics/"}},{"id":"e1b04b22-c025-5266-a823-8a21c8214924","excerpt":"1. DOM 1.1. Document Object Model 1.2. Special DOM objects 1.3. Handling DOM 1.3.1. Select 1.3.2. Manipulation 2. Event 2.1. Event handler…","parent":{"id":"24abc79b-ec97-585b-8097-7a47a24aca42","name":"02_JavaScript_Advanced","relativePath":"Language/JavaScript/02_JavaScript_Advanced.md"},"frontmatter":{"title":"02. JavaScript DOM and this ","createdAt":"2022-10-24","updatedAt":"2023-01-02"},"fields":{"slug":"/posts/Language/JavaScript/02_JavaScript_Advanced/"}},{"id":"cad56ff3-d893-52b1-a35c-0e1fce4070ba","excerpt":"1. Synchronous and Asynchronous 1.1. Asynchronous JavaScript 1.2. JavaScript Runtime 2. Axios 2.1. The Structure of Axios 2.2. Promise 2.…","parent":{"id":"15ee5a55-2b53-5813-bdea-be1e3c51ae09","name":"03_JavaScript_Asynchronous","relativePath":"Language/JavaScript/03_JavaScript_Asynchronous.md"},"frontmatter":{"title":"03. JavaScript Async","createdAt":"2022-11-01","updatedAt":"2023-01-02"},"fields":{"slug":"/posts/Language/JavaScript/03_JavaScript_Asynchronous/"}},{"id":"0f51505a-6206-5a85-b28e-02b0dae340db","excerpt":"1. Promise 1.1. Promise(executor) 2. Aysnc & Await 2.1. async 2.2. await 2.3. try / catch 3. Example 3.1. Chaining 처리, Hard Code 3.1.…","parent":{"id":"3585fbfd-fa62-5290-a175-1bd09c1dfd3a","name":"Promise_Await","relativePath":"Language/JavaScript/Promise_Await.md"},"frontmatter":{"title":"Promise와 await를 활용하 JS 8가지 비동기 처리","createdAt":"2023-01-02","updatedAt":"2023-01-02"},"fields":{"slug":"/posts/Language/JavaScript/Promise_Await/"}},{"id":"b4de88cf-2fb7-533b-9cc7-ce8c17b8211a","excerpt":"이 글은 드림코딩: 자바스크립드 11 ~ 13 비동기 강의를 듣고 정리한 문서이다. 1. Callback 콜백 함수란, 다른 함수의 매개변수로 전달되어 전달된 함수 내부에서 실행될 수 있는 함수를 말한다. 1.…","parent":{"id":"f2176031-fe05-57f2-9438-3aa69da6a4f7","name":"Promise_Async_2","relativePath":"Language/JavaScript/Promise_Async_2.md"},"frontmatter":{"title":"JavaScript 비동기 처리 Promise & Async","createdAt":"2023-09-07","updatedAt":"2023-09-07"},"fields":{"slug":"/posts/Language/JavaScript/Promise_Async_2/"}},{"id":"f0396719-efaf-5d7c-8544-52108c97d3b3","excerpt":"1. JavaScript 모듈 1.1. 모듈의 부재 JavaScript는 과거 인터넷 브라우저 회사였던, Netscape의 Brendan Eich(브렌던 아이크)에 의해 만들어졌다. 처음에는 Mocha…","parent":{"id":"afba6128-4a8a-524a-a8fe-b7fc2e236d7e","name":"Modules","relativePath":"Language/JavaScript/Modules.md"},"frontmatter":{"title":"JavaScript 모듈 시스템 비교","createdAt":"2023-09-09","updatedAt":"2023-09-09"},"fields":{"slug":"/posts/Language/JavaScript/Modules/"}},{"id":"3c0103d9-947d-584e-b271-b2aa243f3f08","excerpt":"1. 번들러 1.1. 번들러란? 번들러는 여러 자바스크립트 모듈 간의 관계를 분석하여 하나의 자바스크립트 파일로 만드는 도구이다. 반드시 하나의 자바스크립트 파일일 필요는 없고, 원한면 몇 개로 나눌 수도 있다. 이를 코드 스프리팅(Code…","parent":{"id":"ce744717-0985-5344-94de-496d38113237","name":"Webpack_Rollup_Vite","relativePath":"Language/JavaScript/Webpack_Rollup_Vite.md"},"frontmatter":{"title":"Webpack vs Rollup vs Vite 비교 분석","createdAt":"2023-09-10","updatedAt":"2023-09-10"},"fields":{"slug":"/posts/Language/JavaScript/Webpack_Rollup_Vite/"}},{"id":"4d47e063-d4d4-5864-ade9-a8a2d0f1e051","excerpt":"10분 테코톡: 하루의 실행 컨텍스트 영상을 참조해서 작성한 글이다 우테코는 도대체 무슨 짓을 꾸미고 있는 것일까... 여기 테코톡은 매번 볼 때마다 놀랍다. 특히 이번 영상은 감탄마저 나올 정도다👍 1. 실행 컨텍스트 (Execute Context…","parent":{"id":"598fda13-e699-5500-a0d0-5bad07868743","name":"Execute_Context","relativePath":"Language/JavaScript/Execute_Context.md"},"frontmatter":{"title":"실행 컨텍스트로 이해하는 Hoisting, Scope, Closure","createdAt":"2023-09-22","updatedAt":"2023-09-22"},"fields":{"slug":"/posts/Language/JavaScript/Execute_Context/"}},{"id":"b58b9818-4c5e-5467-b86c-efe2f684e298","excerpt":"1. 핵심 내용 브라우저는 HTML, CSS, JS 등 렌더링에 필요한 리소스르르 요청하고 서버로부터 응답받는다. 브라우저 렌더링 엔진이 HTML과 CSS를 파싱하역 각각 DOM과 CSSOM…","parent":{"id":"42b699e3-ea21-552c-b603-8b9b032568f5","name":"Browser_Rendering","relativePath":"Language/JavaScript/Browser_Rendering.md"},"frontmatter":{"title":"브라우저 렌더링 과정","createdAt":"2023-09-23","updatedAt":"2023-09-23"},"fields":{"slug":"/posts/Language/JavaScript/Browser_Rendering/"}},{"id":"c0ad1c54-8714-5e5d-b1d2-7aa89b3d115d","excerpt":"1. this 란? this는 함수가 실행컨텍스트에서 참조하고 있는 객체이다. 따라서 모든 함수는 자신만의 this를 가지고 있다. 문제는 이 this…","parent":{"id":"bb3ac8ea-a2b4-5a78-8914-0bd7a6c5891c","name":"this","relativePath":"Language/JavaScript/this.md"},"frontmatter":{"title":"자바스크립트 this 정복하기","createdAt":"2023-09-24","updatedAt":"2023-09-24"},"fields":{"slug":"/posts/Language/JavaScript/this/"}},{"id":"61ce8ae2-05de-5484-9960-76b1d878106a","excerpt":"1. 생성자 함수 & new 키워드 new 키워드와 생성자 함수를 사용하면 손쉽게 객체를 찍어낼 수 있다. 자바스크립트 버전의 OOP라고 생각할 수 있다. 자바가 객체를 찍어내기 위해 class 키워드를 사용한다면, 자바스크립트는 생성자 함수와 new…","parent":{"id":"7dbfcf53-cb94-5255-aa1d-4181665d88dd","name":"new","relativePath":"Language/JavaScript/new.md"},"frontmatter":{"title":"자바스크립트 생성자 함수 & new 키워드","createdAt":"2023-10-11","updatedAt":"2023-10-11"},"fields":{"slug":"/posts/Language/JavaScript/new/"}},{"id":"722f2b6c-0335-5a25-94e3-44e6a96d9d17","excerpt":"1. 개요 자바스크립트는 프로토타입 기반의 객체 지향 언어이다. ES6부터 클래스형 문법이 도입되었다고 하지만, 이는 \"다른 객체 지향 언어처럼\" 사용하도록 도와주는 API…","parent":{"id":"43f9daad-bb94-5bfb-b40f-e16699d3d50e","name":"prototype","relativePath":"Language/JavaScript/prototype.md"},"frontmatter":{"title":"자바스크립트 Prototype 이해하기","createdAt":"2023-10-12","updatedAt":"2023-10-12"},"fields":{"slug":"/posts/Language/JavaScript/prototype/"}},{"id":"bc3cf8c8-9ffc-5759-8384-1081ab0862e2","excerpt":"1. 클래스란? 1.1. 정의 자바스크립트의 클래스를 흔히 문법적 설탕(synthetic sugar…","parent":{"id":"3c48b83c-3bf7-5dda-9fce-72c29b8107a4","name":"class","relativePath":"Language/JavaScript/class.md"},"frontmatter":{"title":"자바스크립트 ES6 class 문법","createdAt":"2023-10-17","updatedAt":"2023-10-17"},"fields":{"slug":"/posts/Language/JavaScript/class/"}}]}},"pageContext":{"pagePath":"/posts/Language/JavaScript/new/","siblingPostsPathRegex":"/^(?!.*README).*Language\\/JavaScript\\/.*$/","relativeDirectory":"JavaScript","id":"61ce8ae2-05de-5484-9960-76b1d878106a","parent":{"id":"7dbfcf53-cb94-5255-aa1d-4181665d88dd","name":"new","relativePath":"Language/JavaScript/new.md"},"fields":{"slug":"/posts/Language/JavaScript/new/"}}},"staticQueryHashes":["24302420","4059933791"],"slicesMap":{}}