{"componentChunkName":"component---src-templates-post-index-tsx","path":"/posts/Language/JavaScript/Promise_Await/","result":{"data":{"markdownRemark":{"id":"0f51505a-6206-5a85-b28e-02b0dae340db","html":"<ul>\n<li><a href=\"#1-promise\">1. Promise</a>\n<ul>\n<li><a href=\"#11-promiseexecutor\">1.1. Promise(executor)</a></li>\n</ul>\n</li>\n<li><a href=\"#2-aysnc--await\">2. Aysnc &#x26; Await</a>\n<ul>\n<li><a href=\"#21-async\">2.1. async</a></li>\n<li><a href=\"#22-await\">2.2. await</a></li>\n<li><a href=\"#23-try--catch\">2.3. try / catch</a></li>\n</ul>\n</li>\n<li><a href=\"#3-example\">3. Example</a>\n<ul>\n<li><a href=\"#31-chaining-%EC%B2%98%EB%A6%AC-hard-code\">3.1. Chaining 처리, Hard Code</a>\n<ul>\n<li><a href=\"#311-promise\">3.1.1. Promise</a></li>\n<li><a href=\"#312-await\">3.1.2. await</a></li>\n</ul>\n</li>\n<li><a href=\"#32-chaining-%EC%B2%98%EB%A6%AC-soft-code\">3.2. Chaining 처리, Soft Code</a>\n<ul>\n<li><a href=\"#321promise\">3.2.1.Promise</a></li>\n<li><a href=\"#322-await\">3.2.2. await</a></li>\n</ul>\n</li>\n<li><a href=\"#33-all-%EC%B2%98%EB%A6%AC-%EB%B9%84-%EC%88%9C%EC%B0%A8-%EA%B2%B0%EA%B3%BC\">3.3. All 처리, 비 순차 결과</a>\n<ul>\n<li><a href=\"#331-promise\">3.3.1. Promise</a></li>\n<li><a href=\"#332-await\">3.3.2. await</a></li>\n</ul>\n</li>\n<li><a href=\"#34-all-%EC%B2%98%EB%A6%AC-%EC%88%9C%EC%B0%A8-%EA%B2%B0%EA%B3%BC\">3.4. All 처리, 순차 결과</a>\n<ul>\n<li><a href=\"#341-promise\">3.4.1. Promise</a></li>\n<li><a href=\"#342-await\">3.4.2. await</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1 id=\"1-promise\" style=\"position:relative;\"><a href=\"#1-promise\" aria-label=\"1 promise permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Promise</h1>\n<h2 id=\"11-promiseexecutor\" style=\"position:relative;\"><a href=\"#11-promiseexecutor\" aria-label=\"11 promiseexecutor permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.1. Promise(executor)</h2>\n<p>executor는 resolve, reject 함수를 인수를 전달할 실행 함수이다.\nresolve를 호출해 프로미스를 이행하거나, 오류가 발생한 경우 reject를 호출해 거부할 수 있다.</p>\n<pre><code class=\"language-js\">const myFirstPromise = new Promise((resolve, reject) => {\n  // do something asynchronous which eventually calls either:\n  //\n  //   resolve(someValue)        // fulfilled\n  // or\n  //   reject(\"failure reason\")  // rejected\n})\n</code></pre>\n<h1 id=\"2-aysnc--await\" style=\"position:relative;\"><a href=\"#2-aysnc--await\" aria-label=\"2 aysnc  await permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Aysnc &#x26; Await</h1>\n<h2 id=\"21-async\" style=\"position:relative;\"><a href=\"#21-async\" aria-label=\"21 async permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.1. async</h2>\n<p>async function 선언은 Promise 객체를 반환하는 비동기 함수를 선언한다. 명시적으로 Promise 객체를 반환해줄 수도 있다.</p>\n<pre><code class=\"language-js\">async function f() {\n  return 1\n}\nf().then(alert) // 1\n\nasync function f() {\n  return Promise.resolve(1)\n}\nf().then(alert) // 1\n</code></pre>\n<h2 id=\"22-await\" style=\"position:relative;\"><a href=\"#22-await\" aria-label=\"22 await permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.2. await</h2>\n<p>await 키워드는 async 키워드가 붙어있는 함수 내부에서만 사용할 수 있으며, 비동기 함수가 리턴하는 Promise로 부터 결과값을 추출한다.</p>\n<p>async 코드 내의 await함수가 선언된 경우, 해당 함수가 끝날 때까지 다음 코드가 실행되지 않는다. <strong>즉 마치 동기적 코드블록처럼 작용한다.</strong></p>\n<h2 id=\"23-try--catch\" style=\"position:relative;\"><a href=\"#23-try--catch\" aria-label=\"23 try  catch permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.3. try / catch</h2>\n<p>async와 await 키워드를 사용하는 경우, 보통의 코드처럼 try/catch 구문을 사용하여 예외처리할 수 있다.</p>\n<h1 id=\"3-example\" style=\"position:relative;\"><a href=\"#3-example\" aria-label=\"3 example permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Example</h1>\n<pre><code class=\"language-js\">function delay_word(word, delay) {\n  return new Promise((resolve) => {\n    setTimeout(function () {\n      resolve(word)\n    }, delay)\n  })\n}\n</code></pre>\n<ul>\n<li><strong>setTimeout(functionRef, delay, params*)</strong>\n<ul>\n<li>delay 시간 이후에, functionRef를 실행한다.</li>\n<li>params는 functionRef의 인자값들이다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"31-chaining-처리-hard-code\" style=\"position:relative;\"><a href=\"#31-chaining-%EC%B2%98%EB%A6%AC-hard-code\" aria-label=\"31 chaining 처리 hard code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.1. Chaining 처리, Hard Code</h2>\n<p>이전 비동기 작업을 완료한 이후에 순차적으로 다음 작업을 처리한다.</p>\n<h3 id=\"311-promise\" style=\"position:relative;\"><a href=\"#311-promise\" aria-label=\"311 promise permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.1.1. Promise</h3>\n<p>이전 작업이 완료된 이후에, 반환된 객체를 받아서 내부 함수를 순차 실행한다.</p>\n<pre><code class=\"language-js\">delay_word('SAMSUNG', 500).then((resolve) => {\n  console.log(resolve)\n\n  delay_word('SW', 490).then((resolve) => {\n    console.log(resolve)\n\n    delay_word('ACADEMY', 480).then((resolve) => {\n      console.log(resolve)\n\n      delay_word('FOR', 470).then((resolve) => {\n        console.log(resolve)\n\n        delay_word('YOUTH', 460).then((resolve) => {\n          console.log(resolve)\n        })\n      })\n    })\n  })\n})\n</code></pre>\n<p>위 코드는 아래와 같이 변환 가능하다.</p>\n<pre><code class=\"language-js\">delay_word('SAMSUNG', 500)\n  .then((resolve) => {\n    console.log(resolve)\n    return delay_word('SW', 490)\n  })\n  .then((resolve) => {\n    console.log(resolve)\n    return delay_word('ACADEMY', 480)\n  })\n  .then((resolve) => {\n    console.log(resolve)\n    return delay_word('FOR', 470)\n  })\n  .then((resolve) => {\n    console.log(resolve)\n    return delay_word('YOUTH', 460)\n  })\n  .then((resolve) => {\n    console.log(resolve)\n  })\n</code></pre>\n<h3 id=\"312-await\" style=\"position:relative;\"><a href=\"#312-await\" aria-label=\"312 await permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.1.2. await</h3>\n<p>await 함수가 dealy_word로부터 Promise 객체를 받아 실행되며, async 내부의 코드들은 await 함수를 비동기적으로 기다린다.</p>\n<pre><code class=\"language-js\">async function test() {\n  const resolve_0 = await delay_word('SAMSUNG', 500)\n  console.log(resolve_0)\n  const resolve_1 = await delay_word('SW', 490)\n  console.log(resolve_1)\n  const resolve_2 = await delay_word('ACADEMY', 480)\n  console.log(resolve_2)\n  const resolve_3 = await delay_word('FOR', 470)\n  console.log(resolve_3)\n  const resolve_4 = await delay_word('YOUTH', 460)\n  console.log(resolve_4)\n}\n</code></pre>\n<h2 id=\"32-chaining-처리-soft-code\" style=\"position:relative;\"><a href=\"#32-chaining-%EC%B2%98%EB%A6%AC-soft-code\" aria-label=\"32 chaining 처리 soft code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.2. Chaining 처리, Soft Code</h2>\n<h3 id=\"321promise\" style=\"position:relative;\"><a href=\"#321promise\" aria-label=\"321promise permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.2.1.Promise</h3>\n<ul>\n<li><strong>arr.reduce(callback[, initialValue])</strong>\n<ul>\n<li>callback(accumulator, currentValue)\n<ul>\n<li>accumulator: 누적값</li>\n<li>currentValue: 현재 계산값</li>\n</ul>\n</li>\n<li>initialValue\n<ul>\n<li>초깃값, 없을 경우 배열의 첫번째 값</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>array의 reduce 메소드를 활용하여 soft한 코드를 작성하였다. <code>Promise.resolve()</code>를 사용하여 초깃값으로 Promise 객체를 지정해주었다.</p>\n<pre><code class=\"language-js\">const array = [\n  { word: 'SAMSUNG', delay: 500 },\n  { word: 'SW', delay: 490 },\n  { word: 'ACADEMY', delay: 480 },\n  { word: 'FOR', delay: 470 },\n  { word: 'YOUTH', delay: 460 },\n]\n\narray.reduce((prev, item) => {\n  return prev.then(() =>\n    delay_word(item.word, item.delay).then((promise) => {\n      console.log(promise)\n    })\n  )\n}, Promise.resolve())\n</code></pre>\n<h3 id=\"322-await\" style=\"position:relative;\"><a href=\"#322-await\" aria-label=\"322 await permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.2.2. await</h3>\n<p>반복문을 이용하여 await함수를 반복해서 실행하였다.</p>\n<pre><code class=\"language-js\">const array = [\n  { word: 'SAMSUNG', delay: 500 },\n  { word: 'SW', delay: 490 },\n  { word: 'ACADEMY', delay: 480 },\n  { word: 'FOR', delay: 470 },\n  { word: 'YOUTH', delay: 460 },\n]\n\nasync function test() {\n  for (const item of array) {\n    const resolve = await delay_word(item.word, item.delay)\n\n    console.log(resolve)\n  }\n}\n</code></pre>\n<h2 id=\"33-all-처리-비-순차-결과\" style=\"position:relative;\"><a href=\"#33-all-%EC%B2%98%EB%A6%AC-%EB%B9%84-%EC%88%9C%EC%B0%A8-%EA%B2%B0%EA%B3%BC\" aria-label=\"33 all 처리 비 순차 결과 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.3. All 처리, 비 순차 결과</h2>\n<h3 id=\"331-promise\" style=\"position:relative;\"><a href=\"#331-promise\" aria-label=\"331 promise permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.3.1. Promise</h3>\n<p>forEach문으로 5개의 비동기함수가 실행되었다. 따라서 5개의 비동기함수가 거의 동시에 시작이 되었으므로, 결과값은 dealy시간에 따라 출력된다.</p>\n<pre><code class=\"language-js\">const array = [\n  { word: 'SAMSUNG', delay: 500 },\n  { word: 'SW', delay: 490 },\n  { word: 'ACADEMY', delay: 480 },\n  { word: 'FOR', delay: 470 },\n  { word: 'YOUTH', delay: 460 },\n]\n\n// Promise 객체로 비동기 작업을 처리했기 때문에, async 키워드는 생략 가능하다.\narray.forEach(async (item) => {\n  delay_word(item.word, item.delay).then((resolve) => {\n    console.log(resolve)\n  })\n})\n</code></pre>\n<h3 id=\"332-await\" style=\"position:relative;\"><a href=\"#332-await\" aria-label=\"332 await permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.3.2. await</h3>\n<pre><code class=\"language-js\">const array = [\n  { word: 'SAMSUNG', delay: 500 },\n  { word: 'SW', delay: 490 },\n  { word: 'ACADEMY', delay: 480 },\n  { word: 'FOR', delay: 470 },\n  { word: 'YOUTH', delay: 460 },\n]\n\narray.forEach(async (item) => {\n  const resolve = await delay_word(item.word, item.delay)\n\n  console.log(resolve)\n})\n</code></pre>\n<h2 id=\"34-all-처리-순차-결과\" style=\"position:relative;\"><a href=\"#34-all-%EC%B2%98%EB%A6%AC-%EC%88%9C%EC%B0%A8-%EA%B2%B0%EA%B3%BC\" aria-label=\"34 all 처리 순차 결과 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.4. All 처리, 순차 결과</h2>\n<p><strong>Promise.all()</strong>\n여러개의 비동기함수를 병렬적으로 실행하고, <strong>실행순서</strong>따라 결과 Promise객체를 반환한다.</p>\n<h3 id=\"341-promise\" style=\"position:relative;\"><a href=\"#341-promise\" aria-label=\"341 promise permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.4.1. Promise</h3>\n<pre><code class=\"language-js\">const array = [\n  { word: 'SAMSUNG', delay: 500 },\n  { word: 'SW', delay: 490 },\n  { word: 'ACADEMY', delay: 480 },\n  { word: 'FOR', delay: 470 },\n  { word: 'YOUTH', delay: 460 },\n]\n\nconst promise_list = []\n\narray.forEach((item) => {\n  const promise = delay_word(item.word, item.delay)\n\n  promise_list.push(promise)\n})\n\nPromise.all(promise_list).then((values) => {\n  values.forEach((resolve) => {\n    console.log(resolve)\n  })\n})\n</code></pre>\n<h3 id=\"342-await\" style=\"position:relative;\"><a href=\"#342-await\" aria-label=\"342 await permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.4.2. await</h3>\n<p>Promise객체를 병렬적으로 실행시켜서, 진행중인(pending) Promise객체를 배열에 집어넣는다.</p>\n<p>그리고 await함수를 통해 값을 할당하여 출력하면, 가장 오랜 시간이 걸리는 Promise객체의 delay시간과 유사한 지연시간을 가진다.</p>\n<pre><code class=\"language-js\">const array = [\n  { word: 'SAMSUNG', delay: 500 },\n  { word: 'SW', delay: 490 },\n  { word: 'ACADEMY', delay: 480 },\n  { word: 'FOR', delay: 470 },\n  { word: 'YOUTH', delay: 460 },\n]\n\nasync function test() {\n  const async_fun_list = []\n\n  for (item of array) {\n    const async_fun = delay_word(item.word, item.delay)\n\n    console.log(async_fun) // Promise { &#x3C;pending> }\n\n    async_fun_list.push(async_fun)\n  }\n\n  for (async_fun of async_fun_list) {\n    const resolve = await async_fun\n\n    console.log(resolve)\n  }\n}\n</code></pre>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#1-promise\">1. Promise</a></p>\n<ul>\n<li><a href=\"#11-promiseexecutor\">1.1. Promise(executor)</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#2-aysnc--await\">2. Aysnc &#x26; Await</a></p>\n<ul>\n<li><a href=\"#21-async\">2.1. async</a></li>\n<li><a href=\"#22-await\">2.2. await</a></li>\n<li><a href=\"#23-try--catch\">2.3. try / catch</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#3-example\">3. Example</a></p>\n<ul>\n<li>\n<p><a href=\"#31-chaining-%EC%B2%98%EB%A6%AC-hard-code\">3.1. Chaining 처리, Hard Code</a></p>\n<ul>\n<li><a href=\"#311-promise\">3.1.1. Promise</a></li>\n<li><a href=\"#312-await\">3.1.2. await</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#32-chaining-%EC%B2%98%EB%A6%AC-soft-code\">3.2. Chaining 처리, Soft Code</a></p>\n<ul>\n<li><a href=\"#321promise\">3.2.1.Promise</a></li>\n<li><a href=\"#322-await\">3.2.2. await</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#33-all-%EC%B2%98%EB%A6%AC-%EB%B9%84-%EC%88%9C%EC%B0%A8-%EA%B2%B0%EA%B3%BC\">3.3. All 처리, 비 순차 결과</a></p>\n<ul>\n<li><a href=\"#331-promise\">3.3.1. Promise</a></li>\n<li><a href=\"#332-await\">3.3.2. await</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#34-all-%EC%B2%98%EB%A6%AC-%EC%88%9C%EC%B0%A8-%EA%B2%B0%EA%B3%BC\">3.4. All 처리, 순차 결과</a></p>\n<ul>\n<li><a href=\"#341-promise\">3.4.1. Promise</a></li>\n<li><a href=\"#342-await\">3.4.2. await</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"Promise와 await를 활용하 JS 8가지 비동기 처리","createdAt":"2023-01-02","updatedAt":"2023-01-02","tags":null,"description":null,"reference":null}},"allMarkdownRemark":{"nodes":[{"id":"d213caa5-57cc-5e67-a96c-cfebe6f529f8","excerpt":"1. Intro 1.1. What is JavaScript? 1.2. The History of JavaScript 1.3. Write to HTML Script 1.4. When to Run JS 1.4.1. Synchronous execution…","parent":{"id":"1720b21e-2873-54b9-8fe5-5ec0e54d9d2e","name":"01_JavaScript_Basics","relativePath":"Language/JavaScript/01_JavaScript_Basics.md"},"frontmatter":{"title":"01. JavaScript Basics","createdAt":"2022-10-23","updatedAt":"2023-01-05"},"fields":{"slug":"/posts/Language/JavaScript/01_JavaScript_Basics/"}},{"id":"e1b04b22-c025-5266-a823-8a21c8214924","excerpt":"1. DOM 1.1. Document Object Model 1.2. Special DOM objects 1.3. Handling DOM 1.3.1. Select 1.3.2. Manipulation 2. Event 2.1. Event handler…","parent":{"id":"24abc79b-ec97-585b-8097-7a47a24aca42","name":"02_JavaScript_Advanced","relativePath":"Language/JavaScript/02_JavaScript_Advanced.md"},"frontmatter":{"title":"02. JavaScript DOM and this ","createdAt":"2022-10-24","updatedAt":"2023-01-02"},"fields":{"slug":"/posts/Language/JavaScript/02_JavaScript_Advanced/"}},{"id":"cad56ff3-d893-52b1-a35c-0e1fce4070ba","excerpt":"1. Synchronous and Asynchronous 1.1. Asynchronous JavaScript 1.2. JavaScript Runtime 2. Axios 2.1. The Structure of Axios 2.2. Promise 2.…","parent":{"id":"15ee5a55-2b53-5813-bdea-be1e3c51ae09","name":"03_JavaScript_Asynchronous","relativePath":"Language/JavaScript/03_JavaScript_Asynchronous.md"},"frontmatter":{"title":"03. JavaScript Async","createdAt":"2022-11-01","updatedAt":"2023-01-02"},"fields":{"slug":"/posts/Language/JavaScript/03_JavaScript_Asynchronous/"}},{"id":"0f51505a-6206-5a85-b28e-02b0dae340db","excerpt":"1. Promise 1.1. Promise(executor) 2. Aysnc & Await 2.1. async 2.2. await 2.3. try / catch 3. Example 3.1. Chaining 처리, Hard Code 3.1.…","parent":{"id":"3585fbfd-fa62-5290-a175-1bd09c1dfd3a","name":"Promise_Await","relativePath":"Language/JavaScript/Promise_Await.md"},"frontmatter":{"title":"Promise와 await를 활용하 JS 8가지 비동기 처리","createdAt":"2023-01-02","updatedAt":"2023-01-02"},"fields":{"slug":"/posts/Language/JavaScript/Promise_Await/"}},{"id":"b4de88cf-2fb7-533b-9cc7-ce8c17b8211a","excerpt":"이 글은 드림코딩: 자바스크립드 11 ~ 13 비동기 강의를 듣고 정리한 문서이다. 1. Callback 콜백 함수란, 다른 함수의 매개변수로 전달되어 전달된 함수 내부에서 실행될 수 있는 함수를 말한다. 1.…","parent":{"id":"f2176031-fe05-57f2-9438-3aa69da6a4f7","name":"Promise_Async_2","relativePath":"Language/JavaScript/Promise_Async_2.md"},"frontmatter":{"title":"JavaScript 비동기 처리 Promise & Async","createdAt":"2023-09-07","updatedAt":"2023-09-07"},"fields":{"slug":"/posts/Language/JavaScript/Promise_Async_2/"}},{"id":"f0396719-efaf-5d7c-8544-52108c97d3b3","excerpt":"1. JavaScript 모듈 1.1. 모듈의 부재 JavaScript는 과거 인터넷 브라우저 회사였던, Netscape의 Brendan Eich(브렌던 아이크)에 의해 만들어졌다. 처음에는 Mocha…","parent":{"id":"afba6128-4a8a-524a-a8fe-b7fc2e236d7e","name":"Modules","relativePath":"Language/JavaScript/Modules.md"},"frontmatter":{"title":"JavaScript 모듈 시스템 비교","createdAt":"2023-09-09","updatedAt":"2023-09-09"},"fields":{"slug":"/posts/Language/JavaScript/Modules/"}},{"id":"3c0103d9-947d-584e-b271-b2aa243f3f08","excerpt":"1. 번들러 1.1. 번들러란? 번들러는 여러 자바스크립트 모듈 간의 관계를 분석하여 하나의 자바스크립트 파일로 만드는 도구이다. 반드시 하나의 자바스크립트 파일일 필요는 없고, 원한면 몇 개로 나눌 수도 있다. 이를 코드 스프리팅(Code…","parent":{"id":"ce744717-0985-5344-94de-496d38113237","name":"Webpack_Rollup_Vite","relativePath":"Language/JavaScript/Webpack_Rollup_Vite.md"},"frontmatter":{"title":"Webpack vs Rollup vs Vite 비교 분석","createdAt":"2023-09-10","updatedAt":"2023-09-10"},"fields":{"slug":"/posts/Language/JavaScript/Webpack_Rollup_Vite/"}},{"id":"4d47e063-d4d4-5864-ade9-a8a2d0f1e051","excerpt":"10분 테코톡: 하루의 실행 컨텍스트 영상을 참조해서 작성한 글이다 우테코는 도대체 무슨 짓을 꾸미고 있는 것일까... 여기 테코톡은 매번 볼 때마다 놀랍다. 특히 이번 영상은 감탄마저 나올 정도다👍 1. 실행 컨텍스트 (Execute Context…","parent":{"id":"598fda13-e699-5500-a0d0-5bad07868743","name":"Execute_Context","relativePath":"Language/JavaScript/Execute_Context.md"},"frontmatter":{"title":"실행 컨텍스트로 이해하는 Hoisting, Scope, Closure","createdAt":"2023-09-22","updatedAt":"2023-09-22"},"fields":{"slug":"/posts/Language/JavaScript/Execute_Context/"}},{"id":"b58b9818-4c5e-5467-b86c-efe2f684e298","excerpt":"1. 핵심 내용 브라우저는 HTML, CSS, JS 등 렌더링에 필요한 리소스르르 요청하고 서버로부터 응답받는다. 브라우저 렌더링 엔진이 HTML과 CSS를 파싱하역 각각 DOM과 CSSOM…","parent":{"id":"42b699e3-ea21-552c-b603-8b9b032568f5","name":"Browser_Rendering","relativePath":"Language/JavaScript/Browser_Rendering.md"},"frontmatter":{"title":"브라우저 렌더링 과정","createdAt":"2023-09-23","updatedAt":"2023-09-23"},"fields":{"slug":"/posts/Language/JavaScript/Browser_Rendering/"}},{"id":"c0ad1c54-8714-5e5d-b1d2-7aa89b3d115d","excerpt":"1. this 란? this는 함수가 실행컨텍스트에서 참조하고 있는 객체이다. 따라서 모든 함수는 자신만의 this를 가지고 있다. 문제는 이 this…","parent":{"id":"bb3ac8ea-a2b4-5a78-8914-0bd7a6c5891c","name":"this","relativePath":"Language/JavaScript/this.md"},"frontmatter":{"title":"자바스크립트 this 정복하기","createdAt":"2023-09-24","updatedAt":"2023-09-24"},"fields":{"slug":"/posts/Language/JavaScript/this/"}},{"id":"61ce8ae2-05de-5484-9960-76b1d878106a","excerpt":"1. 생성자 함수 & new 키워드 new 키워드와 생성자 함수를 사용하면 손쉽게 객체를 찍어낼 수 있다. 자바스크립트 버전의 OOP라고 생각할 수 있다. 자바가 객체를 찍어내기 위해 class 키워드를 사용한다면, 자바스크립트는 생성자 함수와 new…","parent":{"id":"7dbfcf53-cb94-5255-aa1d-4181665d88dd","name":"new","relativePath":"Language/JavaScript/new.md"},"frontmatter":{"title":"자바스크립트 생성자 함수 & new 키워드","createdAt":"2023-10-11","updatedAt":"2023-10-11"},"fields":{"slug":"/posts/Language/JavaScript/new/"}},{"id":"722f2b6c-0335-5a25-94e3-44e6a96d9d17","excerpt":"1. 개요 자바스크립트는 프로토타입 기반의 객체 지향 언어이다. ES6부터 클래스형 문법이 도입되었다고 하지만, 이는 \"다른 객체 지향 언어처럼\" 사용하도록 도와주는 API…","parent":{"id":"43f9daad-bb94-5bfb-b40f-e16699d3d50e","name":"prototype","relativePath":"Language/JavaScript/prototype.md"},"frontmatter":{"title":"자바스크립트 Prototype 이해하기","createdAt":"2023-10-12","updatedAt":"2023-10-12"},"fields":{"slug":"/posts/Language/JavaScript/prototype/"}},{"id":"bc3cf8c8-9ffc-5759-8384-1081ab0862e2","excerpt":"1. 클래스란? 1.1. 정의 자바스크립트의 클래스를 흔히 문법적 설탕(synthetic sugar…","parent":{"id":"3c48b83c-3bf7-5dda-9fce-72c29b8107a4","name":"class","relativePath":"Language/JavaScript/class.md"},"frontmatter":{"title":"자바스크립트 ES6 class 문법","createdAt":"2023-10-17","updatedAt":"2023-10-17"},"fields":{"slug":"/posts/Language/JavaScript/class/"}},{"id":"129e1e6c-97e5-54fe-8f18-bdb6f91f4c7c","excerpt":"진짜 가볍게 작성하려고 했는데 이틀이 걸렸다. 자바스크립트의 모든 문제는 결국 this인 것 같다. 1. Proxy Proxy 객체는 자바스크립트 Object에 대한 기본적인 접근(set, get, define…","parent":{"id":"3e2529cd-00c5-57b8-a789-064c412598ec","name":"proxy","relativePath":"Language/JavaScript/proxy.md"},"frontmatter":{"title":"자바스크립트 Proxy & Reflect 객체","createdAt":"2024-03-08","updatedAt":"2024-03-08"},"fields":{"slug":"/posts/Language/JavaScript/proxy/"}}]}},"pageContext":{"pagePath":"/posts/Language/JavaScript/Promise_Await/","siblingPostsPathRegex":"/^(?!.*README).*Language\\/JavaScript\\/.*$/","relativeDirectory":"JavaScript","id":"0f51505a-6206-5a85-b28e-02b0dae340db","parent":{"id":"3585fbfd-fa62-5290-a175-1bd09c1dfd3a","name":"Promise_Await","relativePath":"Language/JavaScript/Promise_Await.md"},"fields":{"slug":"/posts/Language/JavaScript/Promise_Await/"}}},"staticQueryHashes":["24302420","4059933791"],"slicesMap":{}}