{"componentChunkName":"component---src-templates-post-index-tsx","path":"/posts/Python/Appendix_02_Python_Modules.md/","result":{"data":{"markdownRemark":{"id":"7eec71bd-7b12-5642-b67c-cf8386e8d508","html":"<ul>\n<li><a href=\"#1-terms\">1. Terms</a></li>\n<li><a href=\"#2-how-to-import-modules\">2. How to Import Modules</a>\n<ul>\n<li><a href=\"#21-install-package\">2.1. Install Package</a></li>\n<li><a href=\"#22-import\">2.2. Import</a></li>\n</ul>\n</li>\n<li><a href=\"#3-modules\">3. Modules</a>\n<ul>\n<li><a href=\"#31-sys\">3.1. sys</a></li>\n<li><a href=\"#32-re\">3.2. re</a></li>\n<li><a href=\"#33-collections\">3.3. collections</a></li>\n<li><a href=\"#34-heapq\">3.4. heapq</a></li>\n<li><a href=\"#35-functools\">3.5. functools</a></li>\n<li><a href=\"#36-itertools\">3.6. itertools</a></li>\n<li><a href=\"#37-math\">3.7. math</a></li>\n<li><a href=\"#38-bisect\">3.8. bisect</a></li>\n<li><a href=\"#39-copy\">3.9. copy</a></li>\n<li><a href=\"#310-os\">3.10. os</a></li>\n<li><a href=\"#311-pickle\">3.11. pickle</a></li>\n<li><a href=\"#312-json\">3.12. json</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1 id=\"1-terms\" style=\"position:relative;\"><a href=\"#1-terms\" aria-label=\"1 terms permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Terms</h1>\n<ul>\n<li><strong>module</strong>\n<ul>\n<li><mark>Python</mark> file that contains functionas and vairiables</li>\n</ul>\n</li>\n<li><strong>package</strong>\n<ul>\n<li><mark>Folder</mark> that contains moudules</li>\n</ul>\n<ul>\n<li>Package folder contains __init__.py which indciates that the folder is a package.</li>\n<li>__init__.py also has information about which packages should be imported with the current pacakge Ex.<code class=\"language-text\"># from . import &lt;sub_pacakge_name></code></li>\n</ul>\n</li>\n<li><strong>library</strong>\n<ul>\n<li><mark>Folder</mark> that contains packages</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">my_package<span class=\"token operator\">/</span>\n    __init__<span class=\"token punctuation\">.</span>py\n    math<span class=\"token operator\">/</span>\n        __init__<span class=\"token punctuation\">.</span>py\n        tools<span class=\"token punctuation\">.</span>py</code></pre></div>\n<h1 id=\"2-how-to-import-modules\" style=\"position:relative;\"><a href=\"#2-how-to-import-modules\" aria-label=\"2 how to import modules permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. How to Import Modules</h1>\n<h2 id=\"21-install-package\" style=\"position:relative;\"><a href=\"#21-install-package\" aria-label=\"21 install package permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.1. Install Package</h2>\n<table>\n<thead>\n<tr>\n<th>CLI cmd</th>\n<th>meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>pip install {package} (==specific version) (>=minimum version)</td>\n<td>install a package</td>\n</tr>\n<tr>\n<td>pip uninstall {package}</td>\n<td>uninstall a package</td>\n</tr>\n<tr>\n<td>pip list</td>\n<td>show installed packages</td>\n</tr>\n<tr>\n<td>pip show {package}</td>\n<td>show information of the pacakge</td>\n</tr>\n<tr>\n<td>pip freeze > requirements.txt</td>\n<td>save the list of current package status into requirements.txt</td>\n</tr>\n<tr>\n<td>pip install -r requirements.txt</td>\n<td>install packages in requirements.txt</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"22-import\" style=\"position:relative;\"><a href=\"#22-import\" aria-label=\"22 import permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.2. Import</h2>\n<ul>\n<li>\n<p><strong>Import Module</strong></p>\n<ul>\n<li>\n<p><code class=\"language-text\">(from {directory}) import {module} (as {alias})</code></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> math <span class=\"token keyword\">as</span> m\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>pi<span class=\"token punctuation\">)</span>     <span class=\"token comment\"># 3.141592653589793</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>Import Variable, Function or Calss</strong></p>\n<ul>\n<li>\n<p><code class=\"language-text\">(from {directory}.{module}) import {attribute}</code></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> math <span class=\"token keyword\">import</span> pi<span class=\"token punctuation\">,</span> sqrt\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>pi<span class=\"token punctuation\">)</span>           <span class=\"token comment\"># 3.141592653589793</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">3.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># 1.7320508075688772</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">(from {directory}.{module}) import *</code></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> math <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>pi<span class=\"token punctuation\">)</span>           <span class=\"token comment\"># 3.141592653589793</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">3.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># 1.7320508075688772</span></code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"3-modules\" style=\"position:relative;\"><a href=\"#3-modules\" aria-label=\"3 modules permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Modules</h1>\n<h2 id=\"31-sys\" style=\"position:relative;\"><a href=\"#31-sys\" aria-label=\"31 sys permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.1. sys</h2>\n<ul>\n<li>\n<p>sys.argv</p>\n<ul>\n<li>return string list that has the parameters handed over by cmd\n<code class=\"language-text\">C:/User/home>python test.py here you are</code>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># test.py</span>\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># ['test.py', 'here', 'you', 'are']</span>\n<span class=\"token comment\"># &lt;class 'list'></span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>sys.modules</p>\n<ul>\n<li>give the dictionry {'module on loading': module class of the directory}\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">import</span> sys\nm <span class=\"token operator\">=</span> sys<span class=\"token punctuation\">.</span>modules\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">[</span><span class=\"token string\">'heapq'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">[</span><span class=\"token string\">'heapq'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># &lt;module 'heapq' from 'C:\\\\Users\\\\multicampus\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python39\\\\lib\\\\heapq.py'></span>\n<span class=\"token comment\"># &lt;class 'dict'></span>\n<span class=\"token comment\"># &lt;class 'module'></span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>sys.exit()</p>\n<ul>\n<li>end the prgram == ctrl + z</li>\n<li>arguement is defaulted as 0\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span>\nsys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span><span class=\"token string\">\"program ended\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># hello</span>\n<span class=\"token comment\"># program ended</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>sys.path</p>\n<ul>\n<li>give the list of directories of the initially setted modules\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> sys\np1 <span class=\"token operator\">=</span> sys<span class=\"token punctuation\">.</span>path\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># ['c:\\\\Users\\\\multicampus\\\\Desktop\\\\test', 'C:\\\\Users\\\\multicampus\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python39\\\\python39.zip',...]</span>\n<span class=\"token comment\">#&lt;class 'list'></span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>sys.platform</p>\n<ul>\n<li>give the string about the platform\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>platform<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>platform<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># win32</span>\n<span class=\"token comment\"># &lt;class 'str'></span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>sys.ps1</p>\n<ul>\n<li>USELESS</li>\n<li>only can be used <strong>in python console</strong>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">>>> import sys\n>>> sys.ps1\n'>>>'\n>>> sys.ps1 = 'WWWWHAT'\nWWWHAT print('hello')\nhello\nWWWHAT</code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>sys.stdin</p>\n<ul>\n<li>file object\n<ul>\n<li>the buffer waiting for input</li>\n<li>get data including \\n</li>\n<li>end with '^Z' in cmd\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">nums <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> line <span class=\"token keyword\">in</span> sys<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">:</span>\n    nums<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">>>> 1\n>>> 2\n>>> 3\n>>> 4\n>>> 5\n>>> ^Z\n['1\\n', '2\\n', '3\\n', '4\\n', '5\\n']</code></pre></div>\n</li>\n</ul>\n</li>\n<li>sys.stdin.readline()\n<ul>\n<li>get the input until <code class=\"language-text\">'/n'</code></li>\n<li>including <code class=\"language-text\">'/n'</code>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> sys\nstring <span class=\"token operator\">=</span> sys<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'&lt;</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>string<span class=\"token punctuation\">}</span></span><span class=\"token string\">>'</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">>>> input\n&lt;input\n></code></pre></div>\n</li>\n</ul>\n</li>\n<li>sys.stdin.readlines()\n<ul>\n<li>similar as sys.stdin</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>sys.stdout()</p>\n<ul>\n<li>file object which is used to display output to the screen console</li>\n<li>Text is default data type</li>\n<li>sys.stdout.write(str)\n<ul>\n<li>doesn't including <code class=\"language-text\">'/n'</code>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> sys\nsys<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'Hello'</span><span class=\"token punctuation\">)</span>\nsys<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'Bello\\n'</span><span class=\"token punctuation\">)</span>\nsys<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'Hola'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">HelloBello\nHola</code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>sys.version</p>\n<ul>\n<li>give the string about the version fo python\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>version<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>version<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]</span>\n<span class=\"token comment\"># &lt;class 'str'></span></code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"32-re\" style=\"position:relative;\"><a href=\"#32-re\" aria-label=\"32 re permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.2. re</h2>\n<ul>\n<li>\n<p><strong>meta charachters</strong></p>\n<ul>\n<li><code class=\"language-text\">'.'</code>: any one chr except \\n</li>\n<li><code class=\"language-text\">'c*'</code>: c can be repeated 0 ~ times</li>\n<li><code class=\"language-text\">'c+'</code>: c can be repeated 1 ~ times</li>\n<li><code class=\"language-text\">'c{n}'</code>: c can be repeated n times</li>\n<li><code class=\"language-text\">'c{m, n}'</code>: c can be repeated m ~ n times</li>\n<li><code class=\"language-text\">'c?'</code>: c can exist, also not</li>\n<li><code class=\"language-text\">'|'</code>: or</li>\n<li><code class=\"language-text\">'^abc'</code>: the line should start with abc</li>\n<li><code class=\"language-text\">'abc&amp;'</code>: the line should end with abc</li>\n<li>[]: character class - combined with <code class=\"language-text\">or</code> - can be kinked with <code class=\"language-text\">-</code>\n`python</li>\n</ul>\n</li>\n</ul>\n<p>'[abc]' = 'a' or 'b' or 'c'\n'[a-z]' = 'a' ~ 'z'\n'[0-9]' = 0 ~ 9\n`\n|original|shorten|explanantion|\n|---|---|---|\n|[0-9]|\\d|nums|\n|[^0-9]|\\D|not nums|\n|[\\t\\n\\r\\f\\v]|\\s|whitespace|\n|[^\\t\\n\\r\\f\\v]|\\S|not whitespace|\n|[a-zA-Z0-9]|\\w|words+nums|\n|[^a-za-z0-9]|\\W|not words+nums|</p>\n<ul>\n<li>\n<p>(): grouping</p>\n<ul>\n<li>make groups that have index starting from 1</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">p <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">r\"(\\w+)\\s+(\\d+[-]\\d+[-]\\d+)\"</span><span class=\"token punctuation\">)</span>\nm <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span><span class=\"token string\">\"park 010-1234-1234\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># park</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 010-1234-1234</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">r''</code>: raw-string</p>\n<ul>\n<li>remain \\ as \\</li>\n<li>otherwise, \\ have to be repeated twice</li>\n</ul>\n</li>\n<li>\n<p>re.compile(re) -> pattern object (p)</p>\n<ul>\n<li>make pattern object by using the regular expression</li>\n<li>re.findall(p, str) -> p.findall(str)</li>\n</ul>\n</li>\n<li>\n<p>re.findall(p, str) -> list</p>\n<ul>\n<li>find all the substrings in the str that matches with p</li>\n<li>return the list\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">string <span class=\"token operator\">=</span> <span class=\"token string\">'The Regular Expresion'</span>\npattern <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[a-z]+'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># ['he', 'egular', 'xpresion']</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>re.finditer(p, str) -> callable-iterator</p>\n<ul>\n<li>\n<p>find all the substrings in the str that matches with p</p>\n</li>\n<li>\n<p>return the callable-iterator</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">string <span class=\"token operator\">=</span> <span class=\"token string\">'The Regular Expresion'</span>\npattern <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[a-z]+'</span><span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">iter</span> <span class=\"token operator\">=</span> pattern<span class=\"token punctuation\">.</span>finditer<span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">iter</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># &lt;callable_iterator object at 0x00000274BD7FB640></span>\n\n<span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> ele <span class=\"token keyword\">in</span> <span class=\"token builtin\">iter</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ele<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># &lt;re.Match object; span=(1, 3), match='he'></span>\n<span class=\"token comment\"># &lt;re.Match object; span=(5, 11), match='egular'></span>\n<span class=\"token comment\"># &lt;re.Match object; span=(13, 21), match='xpresion'></span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>re.fullmatch(p, str) -> re.Match</p>\n<ul>\n<li>return re.match object, when p == str\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">.</span>fullmatch<span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">.</span>fullmatch<span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">.</span>fullmatch<span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'aaa'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;class 're.Match'>\n&lt;re.Match object; span=(0, 1), match='a'>\nNone</code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>re.search(p, str) -> re.Match</p>\n<ul>\n<li>return re.match object about the first one in the str\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ab aaa ca'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ab aaa ca'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'db lkkh'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;class 're.Match'>\n&lt;re.Match object; span=(0, 1), match='a'>\nNone</code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>re.split(p, str, int) -> list</p>\n<ul>\n<li>p is the breakpoint for splitting the str\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'abaabca'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># ['', 'b', '', 'bc', '']</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'abaabca'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># ['', 'b', 'abba']</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'abaabca'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># ['', 'b', '', 'bca']</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'abaabca'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># ['', 'b', '', 'bc', '']</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>re.sub(p, s, str, int) -> str</p>\n<ul>\n<li>change p in the string into the s for int times\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'z'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'aaab'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># zzzb</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'z'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'aaab'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># zaab</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>re.subn(p, str, int) -> tuple(str, int)</p>\n<ul>\n<li>change p in the string into the s for int times\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'z'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'aaab'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># ('zzzb', 3)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'z'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'aaab'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># ('zaab', 1)</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>re.match(p, str) -> re.Match</p>\n<ul>\n<li>find p at the string's start\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">.</span><span class=\"token keyword\">match</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'abaabca'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># &lt;re.Match object; span=(0, 1), match='a'></span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">.</span><span class=\"token keyword\">match</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'baabca'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># None</span></code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"33-collections\" style=\"position:relative;\"><a href=\"#33-collections\" aria-label=\"33 collections permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.3. collections</h2>\n<ul>\n<li>\n<p>collections.ChainMap(dic1t, dict2) -> ChainMap</p>\n<ul>\n<li>provide the ordered collection of dictionaries</li>\n<li>the order is following the order of parameters</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> collections\n\ndic1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span>\ndic2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span>\n\nchain <span class=\"token operator\">=</span> collections<span class=\"token punctuation\">.</span>ChainMap<span class=\"token punctuation\">(</span>dic1<span class=\"token punctuation\">,</span> dic2<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>chain<span class=\"token punctuation\">)</span>    <span class=\"token comment\"># ChainMap({'a': 1, 'b': 2}, {'b': 3, 'c': 4})</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>chain<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># &lt;class 'collections.ChainMap'></span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>chain<span class=\"token punctuation\">.</span>maps<span class=\"token punctuation\">)</span>   <span class=\"token comment\"># [{'a': 1, 'b': 2}, {'b': 3, 'c': 4}]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>chain<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># KeysView(ChainMap({'a': 1, 'b': 2}, {'b': 3, 'c': 4}))</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>chain<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># ValuesView(ChainMap({'a': 1, 'b': 2}, {'b': 3, 'c': 4}))</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span>chain<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># {'b': 2, 'c': 4, 'a': 1}</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>chain<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># ['b', 'c', 'a']</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>chain<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># ['b', 'c', 'a']</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>chain<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [2, 4, 1]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>chain<span class=\"token punctuation\">[</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 2</span></code></pre></div>\n</li>\n<li>\n<p>collections.Counter(iterable-or-mapping) -> dict</p>\n<ul>\n<li>return dict {element: number}</li>\n<li>.update(iterable-or-mapping) -> None</li>\n<li>.substract(iterable-or-mapping) -> None</li>\n<li>.elements() -> itertool.chain</li>\n<li>.most_common(int) -> tuple in list\n<ul>\n<li>int is omitted: all the elements</li>\n</ul>\n</li>\n<li>.total() -> int\n<ul>\n<li>ver 3.10</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>Counter<span class=\"token punctuation\">(</span><span class=\"token string\">'gallahad'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Counter({'a': 3, 'l': 2, 'g': 1, 'h': 1, 'd': 1})</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>Counter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'red'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># Counter({'red': 4, 'blue': 2})</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>Counter<span class=\"token punctuation\">(</span>cats<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> dogs<span class=\"token operator\">=</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Counter({'dogs': 8, 'cats': 4})</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>Counter<span class=\"token punctuation\">(</span>cats<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> dogs<span class=\"token operator\">=</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># &lt;class 'collections.Counter'></span>\n\nc <span class=\"token operator\">=</span> Counter<span class=\"token punctuation\">(</span>a<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> d<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>elements<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># ['a', 'a', 'a', 'a', 'b', 'b']</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>Counter<span class=\"token punctuation\">(</span><span class=\"token string\">'abracadabra'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>most_common<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># [('a', 5), ('b', 2), ('r', 2)]</span>\n\nc <span class=\"token operator\">=</span> Counter<span class=\"token punctuation\">(</span>a<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> d<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\nd <span class=\"token operator\">=</span> Counter<span class=\"token punctuation\">(</span>a<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> d<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\nc<span class=\"token punctuation\">.</span>subtract<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Counter({'a': 3, 'b': 0, 'c': -3, 'd': -6})</span>\n\nc <span class=\"token operator\">=</span> Counter<span class=\"token punctuation\">(</span>a<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>total<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 15</span></code></pre></div>\n</li>\n<li>\n<p>collections.defaultdict(int or list or set or str or dict) -> defaultdict</p>\n<ul>\n<li>subclass of dict, which overrides one method</li>\n<li>when try to access the key which doesn't exist, automatically assgin the defalut value to the key</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">d <span class=\"token operator\">=</span> defaultdict<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 0</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>    <span class=\"token comment\"># defaultdict(&lt;class 'int'>, {'a': 0})</span>\n\ns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token string\">'yellow'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'blue'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'yellow'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'blue'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\nd <span class=\"token operator\">=</span> defaultdict<span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> s<span class=\"token punctuation\">:</span>\n    d<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># [('blue', [2, 4]), ('red', [1]), ('yellow', [1, 3])]</span></code></pre></div>\n</li>\n<li>\n<p>collections.deque(iterable[,maxlen]) -> deque</p>\n<ul>\n<li>\n<p>deque(double-ended queue): data structure which is specialized for processing data at the end</p>\n</li>\n<li>\n<p>Especially better for processing <strong>the first data</strong></p>\n<ul>\n<li>O(1)</li>\n</ul>\n</li>\n<li>\n<p>Indexing is impossible</p>\n<ul>\n<li>Alternatively, provide <code class=\"language-text\">.rotate(int)</code></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">d <span class=\"token operator\">=</span> deque<span class=\"token punctuation\">(</span><span class=\"token string\">'ghi'</span><span class=\"token punctuation\">)</span>\n\nd<span class=\"token punctuation\">.</span>appendleft<span class=\"token punctuation\">(</span><span class=\"token string\">'f'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>    <span class=\"token comment\"># deque(['f', 'g', 'h', 'i'])</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>popleft<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># f</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>    <span class=\"token comment\"># deque(['g', 'h', 'i'])</span>\n\nd<span class=\"token punctuation\">.</span>extendleft<span class=\"token punctuation\">(</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>    <span class=\"token comment\"># deque(['c', 'b', 'a', 'g', 'h', 'i'])</span>\n\nd<span class=\"token punctuation\">.</span>rotate<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>    <span class=\"token comment\"># deque(['h', 'i', 'c', 'b', 'a', 'g'])</span>\nd<span class=\"token punctuation\">.</span>rotate<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>    <span class=\"token comment\"># deque(['i', 'c', 'b', 'a', 'g', 'h'])</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>collections.namedtuple(typeName,fieldNames,defaults=None) -> subclass named typeNAme</p>\n<ul>\n<li>make a specific type of subclass similar to tuple</li>\n<li>fieldNames\n<ul>\n<li>['x', 'y', 'z', ...]</li>\n<li>'x, y, z'</li>\n<li>'x y x'</li>\n</ul>\n</li>\n<li>._make(iterable) -> namedtuple object\n<ul>\n<li>make a new instance</li>\n</ul>\n</li>\n<li>._asdict() -> Orderedict</li>\n<li>._repalce(**kwargs)-> a new namedtuple object</li>\n<li>._fields -> tuple of strings listing the field names</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">Point <span class=\"token operator\">=</span> namedtuple<span class=\"token punctuation\">(</span><span class=\"token string\">'Point'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'x y z t'</span><span class=\"token punctuation\">,</span> defaults<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0sec'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>Point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\"># &lt;class 'type'></span>\n\np <span class=\"token operator\">=</span> Point<span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">=</span><span class=\"token number\">22</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>    <span class=\"token comment\"># Point(x=11, y=22, z=0, t='0sec')</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># &lt;class '__main__.Point'></span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 11 22 0</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">)</span>    <span class=\"token comment\"># 11 22 0</span>\n\np_dict <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>_asdict<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>p_dict<span class=\"token punctuation\">)</span>   <span class=\"token comment\"># {'x': 11, 'y': 22, 'z': 0, 't': '0sec'}</span>\n\np<span class=\"token punctuation\">.</span>_replace<span class=\"token punctuation\">(</span>z<span class=\"token operator\">=</span><span class=\"token number\">55</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>    <span class=\"token comment\"># Point(x=11, y=22, z=0, t='0sec')</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>_fields<span class=\"token punctuation\">)</span>    <span class=\"token comment\"># ('x', 'y', 'z', 't')</span></code></pre></div>\n</li>\n<li>\n<p>collections.OrderedDict(dict) -> OrderedDict</p>\n<ul>\n<li>\n<p>dictionary with the order</p>\n</li>\n<li>\n<p>.popitem(last=True)</p>\n</li>\n<li>\n<p>.move_to_end(key, last = True)</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">d <span class=\"token operator\">=</span> <span class=\"token string\">'abc'</span>\nordered_d <span class=\"token operator\">=</span> OrderedDict<span class=\"token punctuation\">.</span>fromkeys<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ordered_d<span class=\"token punctuation\">)</span>    <span class=\"token comment\"># OrderedDict([('a', None), ('b', None), ('c', None)])</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>ordered_d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># &lt;class 'collections.OrderedDict'></span>\n\nd <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'first'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'end'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span>\nordered_d <span class=\"token operator\">=</span> OrderedDict<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ordered_d<span class=\"token punctuation\">)</span>    <span class=\"token comment\"># OrderedDict([('first', 0), ('a', 1), ('b', 2), ('c', 3), ('end', 4)])</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>ordered_d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># &lt;class 'collections.OrderedDict'></span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ordered_d<span class=\"token punctuation\">.</span>popitem<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># ('end', 4)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ordered_d<span class=\"token punctuation\">.</span>popitem<span class=\"token punctuation\">(</span>last <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># ('first', 0)</span>\n\nordered_d<span class=\"token punctuation\">.</span>move_to_end<span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ordered_d<span class=\"token punctuation\">)</span>    <span class=\"token comment\"># OrderedDict([('b', 2), ('c', 3), ('a', 1)])</span>\nordered_d<span class=\"token punctuation\">.</span>move_to_end<span class=\"token punctuation\">(</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> last <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ordered_d<span class=\"token punctuation\">)</span>    <span class=\"token comment\"># OrderedDict([('c', 3), ('b', 2), ('a', 1)])</span></code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"34-heapq\" style=\"position:relative;\"><a href=\"#34-heapq\" aria-label=\"34 heapq permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.4. heapq</h2>\n<ul>\n<li>\n<p>Module for implementing priority heap</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">left_child: 2k+1\nright_child: 2k+2\nparent: (k-1)//2\n          0\n     1         2\n  3   4     5     6\n 7 8 9 10 11 12 13 14</code></pre></div>\n</li>\n<li>\n<p>.heapify(list) -> None</p>\n<ul>\n<li>O(N)</li>\n<li>\n<ol>\n<li>append at the end</li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>compare with the parent</li>\n</ol>\n</li>\n<li>\n<ol start=\"3\">\n<li>if it's smaller, swap</li>\n</ol>\n</li>\n<li>\n<ol start=\"4\">\n<li>Repeat 2~3</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>\n<p>.push(heap, item) -> None</p>\n<ul>\n<li>O(logN)</li>\n</ul>\n</li>\n<li>\n<p>.pop(heap[, item]) -> item</p>\n<ul>\n<li>O(logN)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">lst <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\nheap <span class=\"token operator\">=</span> heapq<span class=\"token punctuation\">.</span>heapify<span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>heap<span class=\"token punctuation\">)</span> <span class=\"token comment\"># None</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [1, 5, 2, 7, 6, 5, 4]</span>\n\nheapq<span class=\"token punctuation\">.</span>heappush<span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">,</span><span class=\"token number\">76</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [1, 5, 2, 7, 6, 5, 4, 76]</span>\nheapq<span class=\"token punctuation\">.</span>heappush<span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [0, 1, 2, 5, 6, 5, 4, 76, 7]</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>heapq<span class=\"token punctuation\">.</span>heappop<span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># None</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [1, 5, 2, 7, 6, 5, 4, 76]</span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"35-functools\" style=\"position:relative;\"><a href=\"#35-functools\" aria-label=\"35 functools permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.5. functools</h2>\n<ul>\n<li>\n<p>.partial(func, para, *args, **kwargs) -> partial object(function)</p>\n<ul>\n<li>return the function that combined the func with the parameters</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> functools <span class=\"token keyword\">import</span> partial\n\nbasetwo <span class=\"token operator\">=</span> partial<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> base<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>basetwo<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># functools.partial(&lt;class 'int'>, base=2)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>basetwo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># &lt;class 'functools.partial'></span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>basetwo<span class=\"token punctuation\">(</span><span class=\"token string\">'10010'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 18</span>\n<span class=\"token comment\">#print(basetwo('5')) # Error</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">xyzw</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">,</span> w <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'x:</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>x<span class=\"token punctuation\">}</span></span><span class=\"token string\">, y:</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>y<span class=\"token punctuation\">}</span></span><span class=\"token string\">, z:</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>z<span class=\"token punctuation\">}</span></span><span class=\"token string\">, w:</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>w<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n\nxyzw1 <span class=\"token operator\">=</span> partial<span class=\"token punctuation\">(</span>xyzw<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nxyzw2 <span class=\"token operator\">=</span> partial<span class=\"token punctuation\">(</span>xyzw<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\nxyzw3 <span class=\"token operator\">=</span> partial<span class=\"token punctuation\">(</span>xyzw<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\nxyzw4 <span class=\"token operator\">=</span> partial<span class=\"token punctuation\">(</span>xyzw<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> w <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\n\nxyzw1<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># x:1, y:2, z:3 w:10</span>\nxyzw2<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># x:1, y:2, z:3 w:10</span>\nxyzw3<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># x:1, y:2, z:3 w:10</span>\nxyzw4<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># x:1, y:2, z:3 w:3</span></code></pre></div>\n</li>\n<li>\n<p>.reduce(func, iterable[, initializer])</p>\n<ul>\n<li>repeat func with the data in the iterable</li>\n<li>if there's initailizer, use it for the first data\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token builtin\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> x<span class=\"token operator\">+</span>y<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># ((((1+2)+3)+4)+5)</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>@cache</p>\n<ul>\n<li>Caching: save the data to re-use it with higher speed</li>\n<li>if you use <code class=\"language-text\">@cahce</code>above a functon, a dictionary is made which has elements in the shape of {input: output}</li>\n<li>Therefore, the program doesn't repeat the same operation</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@cache</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> n <span class=\"token operator\">*</span> factorial<span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> n <span class=\"token keyword\">else</span> <span class=\"token number\">1</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> factorial<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>      <span class=\"token comment\"># no previously cached result, makes 11 recursive calls</span>\n<span class=\"token number\">3628800</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> factorial<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>       <span class=\"token comment\"># just looks up cached value result</span>\n<span class=\"token number\">120</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> factorial<span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span>      <span class=\"token comment\"># makes two new recursive calls, the other 10 are cached</span>\n<span class=\"token number\">479001600</span></code></pre></div>\n</li>\n<li>\n<p>@lru_cache</p>\n<ul>\n<li>similar to the @cache, but the maxsizie is limtied to 128, so the data in excess will be removed based on lru rule</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@lru_cache</span><span class=\"token punctuation\">(</span>maxsize<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> n <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> n\n    <span class=\"token keyword\">return</span> fib<span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> fib<span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">[</span>fib<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> n <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610]</span>\n\nfib<span class=\"token punctuation\">.</span>cache_info<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># CacheInfo(hits=28, misses=16, maxsize=None, currsize=16)</span>\n<span class=\"token comment\"># hits: how many times have you looked up the dict</span>\n<span class=\"token comment\"># misses: how many tiems have you operated the function</span></code></pre></div>\n</li>\n<li>\n<p>.cmp_to_key</p>\n<ul>\n<li>make key for sorted or sort function</li>\n<li>+int: latter one goes to the front</li>\n<li>0: no change</li>\n<li>-int: former one goes to the front</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">comp</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> x <span class=\"token operator\">&lt;</span> y<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">elif</span> x <span class=\"token operator\">==</span> y<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n\nl <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\nsorted_list <span class=\"token operator\">=</span> <span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span> key<span class=\"token operator\">=</span>cmp_to_key<span class=\"token punctuation\">(</span>comp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sorted_list<span class=\"token punctuation\">)</span><span class=\"token comment\"># [5, 4, 3, 1, 1]</span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"36-itertools\" style=\"position:relative;\"><a href=\"#36-itertools\" aria-label=\"36 itertools permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.6. itertools</h2>\n<ul>\n<li>\n<p><strong>Infinite iterator</strong></p>\n<ul>\n<li>\n<p>count(start[,end]) -> itertools.count</p>\n<ul>\n<li>generate an infinite iterator</li>\n<li>start, end can be float\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># start, start+step, start+2*step, …</span>\n<span class=\"token comment\"># count(10) --> 10 11 12 13 14 ...</span>\n<span class=\"token comment\"># count(2.5, 0.5) -> 2.5 3.0 3.5 .</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>cycle(iterable)</p>\n<ul>\n<li>infinite iterator that yield an elements in the iterable cycling\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># cycle('ABCD') --> A B C D A B C D A B C D ...</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>repeat(obj[,times])</p>\n<ul>\n<li>generate obj for 'times' times</li>\n<li>if 'times' is not defined, generate infinitely\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> repeat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># [1, 2, 3]</span>\n    <span class=\"token comment\"># [1, 2, 3]</span>\n    <span class=\"token comment\"># [1, 2, 3]</span>\n    <span class=\"token comment\"># [1, 2, 3]</span>\n    <span class=\"token comment\"># [1, 2, 3]</span></code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>Finite iterator</strong></p>\n<ul>\n<li>\n<p>accumulate(iterable[, func, inital=None])</p>\n<ul>\n<li>generate an iterator which yields the accumulated value of the iterable</li>\n<li>if the functions is given, apply the function instead of add(x, y )</li>\n<li>iniitial is used for the first value\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># accumulate([1,2,3,4,5]) --> 1 3 6 10 15</span>\n<span class=\"token comment\"># accumulate([1,2,3,4,5], initial=100) --> 100 101 103 106 110 115</span>\n<span class=\"token comment\"># accumulate([1,2,3,4,5], operator.mul) --> 1 2 6 24 120</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>chain(*iterables)</p>\n<ul>\n<li>yields an element in the iterables</li>\n<li>if the first iterables is thoroughly detected, go to the second one\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># chain.from_iterable(['ABC', 'DEF']) --> A B C D E F</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>compress(iterable, boolean_list)</p>\n<ul>\n<li>map the iterable with boolean_list, and yied the daty only when the elements in the boolean_list is Truthy</li>\n<li>yield the data, until the shorter one ends\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># compress('ABCDEF', [1,0,True,[],'hahaha',1]) --> A C E F</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>dropwhile(func, iterable)</p>\n<ul>\n<li>\n<p>yield from the data that is False for the func</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">lst <span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> dropwhile<span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> lst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token comment\"># -8, -4, 2, 100</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>filterflase(func, iterable)</p>\n<ul>\n<li>the oppsite of filter(func, iterable)\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># filterfalse(lambda x: x%2, range(10)) --> 0 2 4 6 8</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>islice(iterable, stop) / islice(iterable, start, stop[, step])</p>\n<ul>\n<li>generator with slicing\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># islice('ABCDEFG', 2) --> A B</span>\n<span class=\"token comment\"># islice('ABCDEFG', 2, 4) --> C D</span>\n<span class=\"token comment\"># islice('ABCDEFG', 2, None) --> C D E F G</span>\n<span class=\"token comment\"># islice('ABCDEFG', 0, None, 2) --> A C E G</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>starmap(func, iterable)</p>\n<ul>\n<li>similar to map, but can get *args as paramter\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># starmap(pow, [(2,5), (3,2), (10,3)]) --> 32 9 1000</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>takewhile(func, )</p>\n<ul>\n<li>yield before the data that is False for the func</li>\n<li>the opposite fo dropwhile()\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># takewhile(lambda x: x&lt;5, [1,4,6,4,1]) --> 1 4</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>zip_logest(*iterables, fillvalue=None) -> tuple</p>\n<ul>\n<li>yield zipped tuple, when the shorter one is exhausted, fill with 'fillvalue'\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> zip_longest<span class=\"token punctuation\">(</span><span class=\"token string\">'ABCD'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'xy'</span><span class=\"token punctuation\">,</span> fillvalue<span class=\"token operator\">=</span><span class=\"token string\">'-'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># ('A', 'x')</span>\n    <span class=\"token comment\"># ('B', 'y')</span>\n    <span class=\"token comment\"># ('C', '-')</span>\n    <span class=\"token comment\"># ('D', '-')</span></code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>combinational iterator</strong></p>\n<ul>\n<li>\n<p>product(*iterables, repeat=1) -> tuple</p>\n<ul>\n<li>\n<p>generate the combinations of iter1, iter2, iter3</p>\n</li>\n<li>\n<p>repeat = n: do it for _([iter1, iter2, iter3] _ n)</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"012\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"!@#\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> product<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>    <span class=\"token comment\"># ('0', 'a', '!') > ('0', 'a', '@') > ('0', 'a', '#') > ('0', 'b', '!') >>> ('2', 'c', '#')</span>\n    <span class=\"token comment\"># 3**3 combinations</span>\n\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> product<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>_list<span class=\"token punctuation\">,</span> repeat<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>    <span class=\"token comment\"># ('0', 'a', '!', '0', 'a', '!') > ('0', 'a', '!', '0', 'a', '@') >>> ('2', 'c', '#', '2', 'c', '#')</span>\n    <span class=\"token comment\"># 3**(3*2) combinations</span>\n\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> product<span class=\"token punctuation\">(</span>_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>    <span class=\"token comment\"># ('012',) > ('abc',) >('!@#',)</span>\n    <span class=\"token comment\"># 3**1 combinations</span>\n\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> product<span class=\"token punctuation\">(</span>_list<span class=\"token punctuation\">,</span> repeat<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>    <span class=\"token comment\"># ('012', '012', '012') > ('012', '012', 'abc') >>> ('!@#', '!@#', '!@#')</span>\n    <span class=\"token comment\"># 3**(1*3) combinations</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>permuations(iterable, r=None) -> tuple</p>\n<ul>\n<li>nCr * r!</li>\n<li>pick and arrange</li>\n<li>when r=None, r==len(iterable)\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># permutations('ABCD', 2) --> ('A','B') AC AD BA BC BD CA CB CD DA DB DC</span>\n<span class=\"token comment\"># permutations(range(3)) --> (0, 1, 2) 021 102 120 201 210</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>combinatons(iterable, r) -> tuple</p>\n<ul>\n<li>nCr</li>\n<li>pick\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># combinations('ABCD', 2) --> ('A','B') AC AD BC BD CD</span>\n<span class=\"token comment\"># combinations(range(4), 3) --> (0, 1, 2) 013 023 123</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>combinations_with_replacement(iterable, r) -> tuple</p>\n<ul>\n<li>combinations allowing n-time duplication\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># combinations_with_replacement('ABC', 2) --> ('A', 'A') AB AC BB BC CC</span></code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"37-math\" style=\"position:relative;\"><a href=\"#37-math\" aria-label=\"37 math permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.7. math</h2>\n<ul>\n<li>\n<p>.ceil</p>\n</li>\n<li>\n<p>.floor</p>\n</li>\n<li>\n<p>.copysign</p>\n</li>\n<li>\n<p>.fabs</p>\n</li>\n<li>\n<p>.factorial</p>\n</li>\n<li>\n<p>.frexp</p>\n</li>\n<li>\n<p>.ldexp</p>\n</li>\n<li>\n<p>.gcd</p>\n</li>\n<li>\n<p>.modf\n*.isclaos(</p>\n</li>\n<li>\n<p>.pow</p>\n</li>\n<li>\n<p>.sqrt</p>\n</li>\n<li>\n<p>.log</p>\n</li>\n<li>\n<p>.log1p</p>\n</li>\n<li>\n<p>.log2</p>\n</li>\n<li>\n<p>.log10</p>\n</li>\n<li>\n<p>.cos</p>\n</li>\n<li>\n<p>.sin</p>\n</li>\n<li>\n<p>.tan</p>\n</li>\n<li>\n<p>.acos</p>\n</li>\n<li>\n<p>.asin</p>\n</li>\n<li>\n<p>.atan</p>\n</li>\n<li>\n<p>.degrees</p>\n</li>\n<li>\n<p>.radians</p>\n</li>\n<li>\n<p>.pi</p>\n</li>\n<li>\n<p>.e</p>\n</li>\n<li>\n<p>.tau</p>\n</li>\n</ul>\n<h2 id=\"38-bisect\" style=\"position:relative;\"><a href=\"#38-bisect\" aria-label=\"38 bisect permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.8. bisect</h2>\n<ul>\n<li>\n<p>.bisect</p>\n</li>\n<li>\n<p>.bisect_left</p>\n</li>\n<li>\n<p>.insort</p>\n</li>\n<li>\n<p>.insort_left</p>\n</li>\n</ul>\n<h2 id=\"39-copy\" style=\"position:relative;\"><a href=\"#39-copy\" aria-label=\"39 copy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.9. copy</h2>\n<ul>\n<li>.copy()</li>\n<li>.deepcopy()</li>\n</ul>\n<h2 id=\"310-os\" style=\"position:relative;\"><a href=\"#310-os\" aria-label=\"310 os permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.10. os</h2>\n<ul>\n<li>.chdir()</li>\n<li>.environ</li>\n<li>.getcwd()</li>\n<li>.listdir</li>\n<li>.mkdir</li>\n<li>.path\n*..exists()\n*isdir()\n*isfile</li>\n<li>.renmae</li>\n<li>.remove</li>\n<li>.removedirs</li>\n<li>.walk</li>\n</ul>\n<h2 id=\"311-pickle\" style=\"position:relative;\"><a href=\"#311-pickle\" aria-label=\"311 pickle permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.11. pickle</h2>\n<ul>\n<li>.dump</li>\n<li>.load</li>\n</ul>\n<h2 id=\"312-json\" style=\"position:relative;\"><a href=\"#312-json\" aria-label=\"312 json permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.12. json</h2>\n<ul>\n<li>.dump</li>\n<li>.load</li>\n<li>.dumps</li>\n<li>.loads</li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#1-terms\">1. Terms</a></p>\n</li>\n<li>\n<p><a href=\"#2-how-to-import-modules\">2. How to Import Modules</a></p>\n<ul>\n<li><a href=\"#21-install-package\">2.1. Install Package</a></li>\n<li><a href=\"#22-import\">2.2. Import</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#3-modules\">3. Modules</a></p>\n<ul>\n<li><a href=\"#31-sys\">3.1. sys</a></li>\n<li><a href=\"#32-re\">3.2. re</a></li>\n<li><a href=\"#33-collections\">3.3. collections</a></li>\n<li><a href=\"#34-heapq\">3.4. heapq</a></li>\n<li><a href=\"#35-functools\">3.5. functools</a></li>\n<li><a href=\"#36-itertools\">3.6. itertools</a></li>\n<li><a href=\"#37-math\">3.7. math</a></li>\n<li><a href=\"#38-bisect\">3.8. bisect</a></li>\n<li><a href=\"#39-copy\">3.9. copy</a></li>\n<li><a href=\"#310-os\">3.10. os</a></li>\n<li><a href=\"#311-pickle\">3.11. pickle</a></li>\n<li><a href=\"#312-json\">3.12. json</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"createdAt":"2022-11-08","isCompleted":true,"reference":null,"title":"Appendix 02. Python Modules","updatedAt":"2022-12-23"}},"allMarkdownRemark":{"nodes":[{"id":"e2c3119a-8601-5ea7-811e-33c575a75349","parent":{"id":"7d8e0201-09d5-5ecb-9b21-2c830213fcd1","name":"01_Python_Basics_Datatypes_Operators","relativePath":"Python/01_Python_Basics_Datatypes_Operators.md"},"frontmatter":{"title":"01. Python Datatypes & Operators","createdAt":"2022-11-08","updatedAt":"2022-12-22"},"excerpt":"1. Code Style 2. Variables 2.1. Naming Rules 2.2. Type Hint (after python 3.5) 3. Non-Container Data Types 3.1. Boolean Type 3.2. Numeric…"},{"id":"57193696-e70d-5e70-8cc0-54a20140f054","parent":{"id":"fda15f08-e9ac-50a3-8ab8-cbe1aa8e2708","name":"02_Python_Basics_ControlStatements","relativePath":"Python/02_Python_Basics_ControlStatements.md"},"frontmatter":{"title":"02. Python Control Statements","createdAt":"2022-11-08","updatedAt":"2022-12-22"},"excerpt":"1. Conditional Statement 1.1. if... elif... else 1.2. Ternary Operators 2. Loop Statement 2.1. while 2.2. for 2.2.1. Comprehension…"},{"id":"cb3ec675-bf36-53b8-afa0-790627aecc7a","parent":{"id":"3e64aa97-aed7-55b3-8b86-578f320ca3f7","name":"03_Python_Function","relativePath":"Python/03_Python_Function.md"},"frontmatter":{"title":"03. Python Function","createdAt":"2022-11-08","updatedAt":"2022-12-22"},"excerpt":"1. Function 1.1. Type of Function 1.2. Parameters and Arguments 1.2.1. Default Parameter Value 1.2.2. Arbitrary Arguments, *args 1.2.…"},{"id":"410bc62a-d883-57cd-af4a-8e51b5972eee","parent":{"id":"8d0abb6f-e67a-5c0e-9119-d4079dc20391","name":"04_Python_OOP","relativePath":"Python/04_Python_OOP.md"},"frontmatter":{"title":"04. Python OOP","createdAt":"2022-11-08","updatedAt":"2022-12-24"},"excerpt":"1. Overview 1.1. Object Oriented Programming 1.2. Class 1.3. Object 1.4. Basic Grammer 1.5. Namespace 2. Attributes 2.1. Class Attributes…"},{"id":"8dfbd371-8ad6-53a9-a4c0-cf117b94de0e","parent":{"id":"43d8ebc0-3d2d-5ff1-b6ca-0e717981bf16","name":"05_Python_Error_Handling","relativePath":"Python/05_Python_Error_Handling.md"},"frontmatter":{"title":"05. Python Error Handling","createdAt":"2022-11-08","updatedAt":"2022-12-23"},"excerpt":"1. Terms 2. Types of error 2.1. Syntax Error 2.2 Exception 3. Error Handing 3.1. Try Except 1. Terms Bug problems occurring in SW Debugging…"},{"id":"60e896c8-227a-59fb-9377-16b7080a0e26","parent":{"id":"965acf82-47f4-50a0-b780-1b781d429deb","name":"Appendix_01_Python_Builtin_Functions","relativePath":"Python/Appendix_01_Python_Builtin_Functions.md"},"frontmatter":{"title":"Appendix 01. Python Built-in Functions","createdAt":"2022-11-08","updatedAt":"2022-12-24"},"excerpt":"1. Built-in functions 2. Built-in functions2 2.1. del 2.2. print 2.3. enumerate(iterable, start=0) 2.4. map(function, iterable) 2.5. filter…"},{"id":"7eec71bd-7b12-5642-b67c-cf8386e8d508","parent":{"id":"3e5deb03-c0bb-55fc-bac6-5d6845fc1b2a","name":"Appendix_02_Python_Modules","relativePath":"Python/Appendix_02_Python_Modules.md"},"frontmatter":{"title":"Appendix 02. Python Modules","createdAt":"2022-11-08","updatedAt":"2022-12-23"},"excerpt":"1. Terms 2. How to Import Modules 2.1. Install Package 2.2. Import 3. Modules 3.1. sys 3.2. re 3.3. collections 3.4. heapq 3.5. functools…"}]}},"pageContext":{"pagePath":"posts/Python/Appendix_02_Python_Modules.md","regex":"/^(?!.*README).*Python.*$/","id":"7eec71bd-7b12-5642-b67c-cf8386e8d508","parent":{"id":"3e5deb03-c0bb-55fc-bac6-5d6845fc1b2a","name":"Appendix_02_Python_Modules","relativeDirectory":"Python","relativePath":"Python/Appendix_02_Python_Modules.md"}}},"staticQueryHashes":["3300660363","3571427910"],"slicesMap":{}}