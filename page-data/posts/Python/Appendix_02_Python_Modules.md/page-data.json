{"componentChunkName":"component---src-templates-post-tsx","path":"/posts/Python/Appendix_02_Python_Modules.md/","result":{"data":{"markdownRemark":{"id":"6ae3b31a-5f63-5fcb-98ba-1b4bddc42616","html":"<h1>Python Modules</h1>\n<h2>Index</h2>\n<ul>\n<li><a href=\"#1-terms\">1. Terms</a></li>\n<li><a href=\"#2-how-to-import-modules\">2. How to Import Modules</a>\n<ul>\n<li><a href=\"#21-install-package\">2.1. Install Package</a></li>\n<li><a href=\"#22-import\">2.2. Import</a></li>\n</ul>\n</li>\n<li><a href=\"#3-modules\">3. Modules</a>\n<ul>\n<li><a href=\"#31-sys\">3.1. sys</a></li>\n<li><a href=\"#32-re\">3.2. re</a></li>\n<li><a href=\"#33-collections\">3.3. collections</a></li>\n<li><a href=\"#34-heapq\">3.4. heapq</a></li>\n<li><a href=\"#35-functools\">3.5. functools</a></li>\n<li><a href=\"#36-itertools\">3.6. itertools</a></li>\n<li><a href=\"#37-math\">3.7. math</a></li>\n<li><a href=\"#38-bisect\">3.8. bisect</a></li>\n<li><a href=\"#39-copy\">3.9. copy</a></li>\n<li><a href=\"#310-os\">3.10. os</a></li>\n<li><a href=\"#311-pickle\">3.11. pickle</a></li>\n<li><a href=\"#312-json\">3.12. json</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1>1. Terms</h1>\n<ul>\n<li><strong>module</strong>\n<ul>\n<li><mark>Python</mark> file that contains functionas and vairiables</li>\n</ul>\n</li>\n<li><strong>package</strong>\n<ul>\n<li><mark>Folder</mark> that contains moudules</li>\n</ul>\n<ul>\n<li>Package folder contains __init__.py which indciates that the folder is a package.</li>\n<li>__init__.py also has information about which packages should be imported with the current pacakge Ex.<code># from . import &#x3C;sub_pacakge_name></code></li>\n</ul>\n</li>\n<li><strong>library</strong>\n<ul>\n<li><mark>Folder</mark> that contains packages</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"language-python\">my_package/\r\n    __init__.py\r\n    math/\r\n        __init__.py\r\n        tools.py\n</code></pre>\n<hr>\n<h1>2. How to Import Modules</h1>\n<h2>2.1. Install Package</h2>\n<table>\n<thead>\n<tr>\n<th>CLI cmd</th>\n<th>meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>pip install {package} (==specific version) (>=minimum version)</td>\n<td>install a package</td>\n</tr>\n<tr>\n<td>pip uninstall {package}</td>\n<td>uninstall a package</td>\n</tr>\n<tr>\n<td>pip list</td>\n<td>show installed packages</td>\n</tr>\n<tr>\n<td>pip show {package}</td>\n<td>show information of the pacakge</td>\n</tr>\n<tr>\n<td>pip freeze > requirements.txt</td>\n<td>save the list of current package status into requirements.txt</td>\n</tr>\n<tr>\n<td>pip install -r requirements.txt</td>\n<td>install packages in requirements.txt</td>\n</tr>\n</tbody>\n</table>\n<h2>2.2. Import</h2>\n<ul>\n<li>\n<p><strong>Import Module</strong></p>\n<ul>\n<li>\n<p><code>(from {directory}) import {module} (as {alias})</code></p>\n<pre><code class=\"language-python\">import math as m\r\n\r\nprint(m.pi)     # 3.141592653589793\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>Import Variable, Function or Calss</strong></p>\n<ul>\n<li>\n<p><code>(from {directory}.{module}) import {attribute}</code></p>\n<pre><code class=\"language-python\">from math import pi, sqrt\r\n\r\nprint(pi)           # 3.141592653589793\r\nprint(sqrt(3.0))    # 1.7320508075688772\n</code></pre>\n</li>\n<li>\n<p><code>(from {directory}.{module}) import *</code></p>\n<pre><code class=\"language-python\">from math import *\r\n\r\nprint(pi)           # 3.141592653589793\r\nprint(sqrt(3.0))    # 1.7320508075688772\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1>3. Modules</h1>\n<h2>3.1. sys</h2>\n<ul>\n<li>\n<p>sys.argv</p>\n<ul>\n<li>return string list that has the parameters handed over by cmd\r\n<code>C:/User/home>python test.py here you are</code>\n<pre><code class=\"language-python\"># test.py\r\nimport sys\r\nprint(sys.argv)\r\nprint(type(sys.argv))\r\n# ['test.py', 'here', 'you', 'are']\r\n# &#x3C;class 'list'>\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>sys.modules</p>\n<ul>\n<li>give the dictionry {'module on loading': module class of the directory}\n<pre><code class=\"language-python\">import sys\r\nimport sys\r\nm = sys.modules\r\nprint(m['heapq'])\r\nprint(type(m))\r\nprint(type(m['heapq']))\r\n# &#x3C;module 'heapq' from 'C:\\\\Users\\\\multicampus\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python39\\\\lib\\\\heapq.py'>\r\n# &#x3C;class 'dict'>\r\n# &#x3C;class 'module'>\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>sys.exit()</p>\n<ul>\n<li>end the prgram == ctrl + z</li>\n<li>arguement is defaulted as 0\n<pre><code class=\"language-python\">import sys\r\nprint(\"hello\")\r\nsys.exit(\"program ended\")\r\n# hello\r\n# program ended\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>sys.path</p>\n<ul>\n<li>give the list of directories of the initially setted modules\n<pre><code class=\"language-python\">import sys\r\np1 = sys.path\r\nprint(p1)\r\nprint(type(p1))\r\n# ['c:\\\\Users\\\\multicampus\\\\Desktop\\\\test', 'C:\\\\Users\\\\multicampus\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python39\\\\python39.zip',...]\r\n#&#x3C;class 'list'>\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>sys.platform</p>\n<ul>\n<li>give the string about the platform\n<pre><code class=\"language-python\">import sys\r\nprint(sys.platform)\r\nprint(type(sys.platform))\r\n# win32\r\n# &#x3C;class 'str'>\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>sys.ps1</p>\n<ul>\n<li>USELESS</li>\n<li>only can be used <strong>in python console</strong>\n<pre><code>>>> import sys\r\n>>> sys.ps1\r\n'>>>'\r\n>>> sys.ps1 = 'WWWWHAT'\r\nWWWHAT print('hello')\r\nhello\r\nWWWHAT\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>sys.stdin</p>\n<ul>\n<li>file object\n<ul>\n<li>the buffer waiting for input</li>\n<li>get data including \\n</li>\n<li>end with '^Z' in cmd\n<pre><code class=\"language-python\">nums = []\r\nfor line in sys.stdin:\r\n    nums.append(line)\r\nprint(nums)\n</code></pre>\n<pre><code>>>> 1\r\n>>> 2\r\n>>> 3\r\n>>> 4\r\n>>> 5\r\n>>> ^Z\r\n['1\\n', '2\\n', '3\\n', '4\\n', '5\\n']\n</code></pre>\n</li>\n</ul>\n</li>\n<li>sys.stdin.readline()\n<ul>\n<li>get the input until <code>'/n'</code></li>\n<li>including <code>'/n'</code>\n<pre><code class=\"language-python\">import sys\r\nstring = sys.stdin.readline()\r\nprint(f'&#x3C;{string}>')\n</code></pre>\n<pre><code>>>> input\r\n&#x3C;input\r\n>\n</code></pre>\n</li>\n</ul>\n</li>\n<li>sys.stdin.readlines()\n<ul>\n<li>similar as sys.stdin</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>sys.stdout()</p>\n<ul>\n<li>file object which is used to display output to the screen console</li>\n<li>Text is default data type</li>\n<li>sys.stdout.write(str)\n<ul>\n<li>doesn't including <code>'/n'</code>\n<pre><code class=\"language-python\">import sys\r\nsys.stdout.write('Hello')\r\nsys.stdout.write('Bello\\n')\r\nsys.stdout.write('Hola')\n</code></pre>\n<pre><code>HelloBello\r\nHola\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>sys.version</p>\n<ul>\n<li>give the string about the version fo python\n<pre><code class=\"language-python\">import sys\r\nprint(sys.version)\r\nprint(type(sys.version))\r\n# 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]\r\n# &#x3C;class 'str'>\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<h2>3.2. re</h2>\n<ul>\n<li>\n<p><strong>meta charachters</strong></p>\n<ul>\n<li><code>'.'</code>: any one chr except \\n</li>\n<li><code>'c*'</code>: c can be repeated 0 ~ times</li>\n<li><code>'c+'</code>: c can be repeated 1 ~ times</li>\n<li><code>'c{n}'</code>: c can be repeated n times</li>\n<li><code>'c{m, n}'</code>: c can be repeated m ~ n times</li>\n<li><code>'c?'</code>: c can exist, also not</li>\n<li><code>'|'</code>: or</li>\n<li><code>'^abc'</code>: the line should start with abc</li>\n<li><code>'abc&#x26;'</code>: the line should end with abc</li>\n<li>[]: character class - combined with <code>or</code> - can be kinked with <code>-</code>\r\n`python</li>\n</ul>\n</li>\n</ul>\n<p>'[abc]' = 'a' or 'b' or 'c'\r\n'[a-z]' = 'a' ~ 'z'\r\n'[0-9]' = 0 ~ 9\r\n`\r\n|original|shorten|explanantion|\r\n|---|---|---|\r\n|[0-9]|\\d|nums|\r\n|[^0-9]|\\D|not nums|\r\n|[\\t\\n\\r\\f\\v]|\\s|whitespace|\r\n|[^\\t\\n\\r\\f\\v]|\\S|not whitespace|\r\n|[a-zA-Z0-9]|\\w|words+nums|\r\n|[^a-za-z0-9]|\\W|not words+nums|</p>\n<ul>\n<li>\n<p>(): grouping</p>\n<ul>\n<li>make groups that have index starting from 1</li>\n</ul>\n<pre><code class=\"language-python\">p = re.compile(r\"(\\w+)\\s+(\\d+[-]\\d+[-]\\d+)\")\r\nm = p.search(\"park 010-1234-1234\")\r\nprint(m.group(1)) # park\r\nprint(m.group(2)) # 010-1234-1234\n</code></pre>\n</li>\n<li>\n<p><code>r''</code>: raw-string</p>\n<ul>\n<li>remain \\ as \\</li>\n<li>otherwise, \\ have to be repeated twice</li>\n</ul>\n</li>\n<li>\n<p>re.compile(re) -> pattern object (p)</p>\n<ul>\n<li>make pattern object by using the regular expression</li>\n<li>re.findall(p, str) -> p.findall(str)</li>\n</ul>\n</li>\n<li>\n<p>re.findall(p, str) -> list</p>\n<ul>\n<li>find all the substrings in the str that matches with p</li>\n<li>return the list\n<pre><code class=\"language-python\">string = 'The Regular Expresion'\r\npattern = re.compile('[a-z]+')\r\nprint(pattern.findall(string))\r\n# ['he', 'egular', 'xpresion']\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>re.finditer(p, str) -> callable-iterator</p>\n<ul>\n<li>\n<p>find all the substrings in the str that matches with p</p>\n</li>\n<li>\n<p>return the callable-iterator</p>\n<pre><code class=\"language-python\">string = 'The Regular Expresion'\r\npattern = re.compile('[a-z]+')\r\niter = pattern.finditer(string)\r\nprint(iter) # &#x3C;callable_iterator object at 0x00000274BD7FB640>\r\n\r\nfor _ in range(2):\r\n    for ele in iter:\r\n        print(ele)\r\n# &#x3C;re.Match object; span=(1, 3), match='he'>\r\n# &#x3C;re.Match object; span=(5, 11), match='egular'>\r\n# &#x3C;re.Match object; span=(13, 21), match='xpresion'>\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>re.fullmatch(p, str) -> re.Match</p>\n<ul>\n<li>return re.match object, when p == str\n<pre><code class=\"language-python\">print(type(re.fullmatch('a', 'a')))\r\nprint(re.fullmatch('a', 'a'))\r\nprint(re.fullmatch('a', 'aaa'))\n</code></pre>\n<pre><code>&#x3C;class 're.Match'>\r\n&#x3C;re.Match object; span=(0, 1), match='a'>\r\nNone\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>re.search(p, str) -> re.Match</p>\n<ul>\n<li>return re.match object about the first one in the str\n<pre><code class=\"language-python\">print(type(re.search('a', 'ab aaa ca')))\r\nprint(re.search('a', 'ab aaa ca'))\r\nprint(re.search('a', 'db lkkh'))\n</code></pre>\n<pre><code>&#x3C;class 're.Match'>\r\n&#x3C;re.Match object; span=(0, 1), match='a'>\r\nNone\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>re.split(p, str, int) -> list</p>\n<ul>\n<li>p is the breakpoint for splitting the str\n<pre><code class=\"language-python\">print(re.split('a', 'abaabca')) # ['', 'b', '', 'bc', '']\r\nprint(re.split('a', 'abaabca', 2)) # ['', 'b', 'abba']\r\nprint(re.split('a', 'abaabca', 3)) # ['', 'b', '', 'bca']\r\nprint(re.split('a', 'abaabca', 4)) # ['', 'b', '', 'bc', '']\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>re.sub(p, s, str, int) -> str</p>\n<ul>\n<li>change p in the string into the s for int times\n<pre><code class=\"language-python\">print(re.split('a', 'z', 'aaab')) # zzzb\r\nprint(re.split('a', 'z', 'aaab', 1)) # zaab\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>re.subn(p, str, int) -> tuple(str, int)</p>\n<ul>\n<li>change p in the string into the s for int times\n<pre><code class=\"language-python\">print(re.split('a', 'z', 'aaab')) # ('zzzb', 3)\r\nprint(re.split('a', 'z', 'aaab', 1)) # ('zaab', 1)\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>re.match(p, str) -> re.Match</p>\n<ul>\n<li>find p at the string's start\n<pre><code class=\"language-python\">print(re.match('a','abaabca')) # &#x3C;re.Match object; span=(0, 1), match='a'>\r\nprint(re.match('a','baabca')) # None\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<h2>3.3. collections</h2>\n<ul>\n<li>\n<p>collections.ChainMap(dic1t, dict2) -> ChainMap</p>\n<ul>\n<li>provide the ordered collection of dictionaries</li>\n<li>the order is following the order of parameters</li>\n</ul>\n<pre><code class=\"language-python\">import collections\r\n\r\ndic1 = {'a': 1, 'b': 2}\r\ndic2 = {'b': 3, 'c': 4}\r\n\r\nchain = collections.ChainMap(dic1, dic2)\r\nprint(chain)    # ChainMap({'a': 1, 'b': 2}, {'b': 3, 'c': 4})\r\nprint(type(chain))  # &#x3C;class 'collections.ChainMap'>\r\n\r\nprint(chain.maps)   # [{'a': 1, 'b': 2}, {'b': 3, 'c': 4}]\r\nprint(chain.keys()) # KeysView(ChainMap({'a': 1, 'b': 2}, {'b': 3, 'c': 4}))\r\nprint(chain.values())   # ValuesView(ChainMap({'a': 1, 'b': 2}, {'b': 3, 'c': 4}))\r\n\r\nprint(dict(chain))  # {'b': 2, 'c': 4, 'a': 1}\r\nprint(list(chain))  # ['b', 'c', 'a']\r\nprint(list(chain.keys()))   # ['b', 'c', 'a']\r\nprint(list(chain.values())) # [2, 4, 1]\r\nprint(chain['b'])   # 2\n</code></pre>\n</li>\n<li>\n<p>collections.Counter(iterable-or-mapping) -> dict</p>\n<ul>\n<li>return dict {element: number}</li>\n<li>.update(iterable-or-mapping) -> None</li>\n<li>.substract(iterable-or-mapping) -> None</li>\n<li>.elements() -> itertool.chain</li>\n<li>.most_common(int) -> tuple in list\n<ul>\n<li>int is omitted: all the elements</li>\n</ul>\n</li>\n<li>.total() -> int\n<ul>\n<li>ver 3.10</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"language-python\">print(Counter('gallahad'))  # Counter({'a': 3, 'l': 2, 'g': 1, 'h': 1, 'd': 1})\r\nprint(Counter({'red': 4, 'blue': 2}))   # Counter({'red': 4, 'blue': 2})\r\nprint(Counter(cats=4, dogs=8))  # Counter({'dogs': 8, 'cats': 4})\r\nprint(type(Counter(cats=4, dogs=8)))    # &#x3C;class 'collections.Counter'>\r\n\r\nc = Counter(a=4, b=2, c=0, d=-2)\r\nprint(list(c.elements()))\r\n# ['a', 'a', 'a', 'a', 'b', 'b']\r\n\r\nprint(Counter('abracadabra').most_common(3))\r\n# [('a', 5), ('b', 2), ('r', 2)]\r\n\r\nc = Counter(a=4, b=2, c=0, d=-2)\r\nd = Counter(a=1, b=2, c=3, d=4)\r\nc.subtract(d)\r\nprint(c)\r\n# Counter({'a': 3, 'b': 0, 'c': -3, 'd': -6})\r\n\r\nc = Counter(a=10, b=5, c=0)\r\nprint(c.total())\r\n# 15\n</code></pre>\n</li>\n<li>\n<p>collections.defaultdict(int or list or set or str or dict) -> defaultdict</p>\n<ul>\n<li>subclass of dict, which overrides one method</li>\n<li>when try to access the key which doesn't exist, automatically assgin the defalut value to the key</li>\n</ul>\n<pre><code class=\"language-python\">d = defaultdict(str)\r\nprint(d['a']) # 0\r\nprint(d)    # defaultdict(&#x3C;class 'int'>, {'a': 0})\r\n\r\ns = [('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)]\r\nd = defaultdict(list)\r\nfor k, v in s:\r\n    d[k].append(v)\r\n\r\nprint(sorted(d.items()))\r\n# [('blue', [2, 4]), ('red', [1]), ('yellow', [1, 3])]\n</code></pre>\n</li>\n<li>\n<p>collections.deque(iterable[,maxlen]) -> deque</p>\n<ul>\n<li>\n<p>deque(double-ended queue): data structure which is specialized for processing data at the end</p>\n</li>\n<li>\n<p>Especially better for processing <strong>the first data</strong></p>\n<ul>\n<li>O(1)</li>\n</ul>\n</li>\n<li>\n<p>Indexing is impossible</p>\n<ul>\n<li>Alternatively, provide <code>.rotate(int)</code></li>\n</ul>\n<pre><code class=\"language-python\">d = deque('ghi')\r\n\r\nd.appendleft('f')\r\nprint(d)    # deque(['f', 'g', 'h', 'i'])\r\n\r\nprint(d.popleft())  # f\r\nprint(d)    # deque(['g', 'h', 'i'])\r\n\r\nd.extendleft('abc')\r\nprint(d)    # deque(['c', 'b', 'a', 'g', 'h', 'i'])\r\n\r\nd.rotate(3)\r\nprint(d)    # deque(['h', 'i', 'c', 'b', 'a', 'g'])\r\nd.rotate(-1)\r\nprint(d)    # deque(['i', 'c', 'b', 'a', 'g', 'h'])\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>collections.namedtuple(typeName,fieldNames,defaults=None) -> subclass named typeNAme</p>\n<ul>\n<li>make a specific type of subclass similar to tuple</li>\n<li>fieldNames\n<ul>\n<li>['x', 'y', 'z', ...]</li>\n<li>'x, y, z'</li>\n<li>'x y x'</li>\n</ul>\n</li>\n<li>._make(iterable) -> namedtuple object\n<ul>\n<li>make a new instance</li>\n</ul>\n</li>\n<li>._asdict() -> Orderedict</li>\n<li>._repalce(**kwargs)-> a new namedtuple object</li>\n<li>._fields -> tuple of strings listing the field names</li>\n</ul>\n<pre><code class=\"language-python\">Point = namedtuple('Point', 'x y z t', defaults=[0, '0sec'])\r\nprint(type(Point))# &#x3C;class 'type'>\r\n\r\np = Point(11, y=22)\r\nprint(p)    # Point(x=11, y=22, z=0, t='0sec')\r\nprint(type(p))  # &#x3C;class '__main__.Point'>\r\nprint(p[0], p[1], p[2]) # 11 22 0\r\nprint(p.x, p.y, p.z)    # 11 22 0\r\n\r\np_dict = p._asdict()\r\nprint(p_dict)   # {'x': 11, 'y': 22, 'z': 0, 't': '0sec'}\r\n\r\np._replace(z=55)\r\nprint(p)    # Point(x=11, y=22, z=0, t='0sec')\r\n\r\nprint(p._fields)    # ('x', 'y', 'z', 't')\n</code></pre>\n</li>\n<li>\n<p>collections.OrderedDict(dict) -> OrderedDict</p>\n<ul>\n<li>\n<p>dictionary with the order</p>\n</li>\n<li>\n<p>.popitem(last=True)</p>\n</li>\n<li>\n<p>.move_to_end(key, last = True)</p>\n<pre><code class=\"language-python\">d = 'abc'\r\nordered_d = OrderedDict.fromkeys(d)\r\nprint(ordered_d)    # OrderedDict([('a', None), ('b', None), ('c', None)])\r\nprint(type(ordered_d))  # &#x3C;class 'collections.OrderedDict'>\r\n\r\nd = {'first': 0, 'a':1, 'b':2, 'c':3, 'end': 4}\r\nordered_d = OrderedDict(d)\r\nprint(ordered_d)    # OrderedDict([('first', 0), ('a', 1), ('b', 2), ('c', 3), ('end', 4)])\r\nprint(type(ordered_d))  # &#x3C;class 'collections.OrderedDict'>\r\n\r\nprint(ordered_d.popitem())  # ('end', 4)\r\nprint(ordered_d.popitem(last = False))  # ('first', 0)\r\n\r\nordered_d.move_to_end('a')\r\nprint(ordered_d)    # OrderedDict([('b', 2), ('c', 3), ('a', 1)])\r\nordered_d.move_to_end('c', last = False)\r\nprint(ordered_d)    # OrderedDict([('c', 3), ('b', 2), ('a', 1)])\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<h2>3.4. heapq</h2>\n<ul>\n<li>\n<p>Module for implementing priority heap</p>\n<pre><code>left_child: 2k+1\r\nright_child: 2k+2\r\nparent: (k-1)//2\r\n          0\r\n     1         2\r\n  3   4     5     6\r\n 7 8 9 10 11 12 13 14\n</code></pre>\n</li>\n<li>\n<p>.heapify(list) -> None</p>\n<ul>\n<li>O(N)</li>\n<li>\n<ol>\n<li>append at the end</li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>compare with the parent</li>\n</ol>\n</li>\n<li>\n<ol start=\"3\">\n<li>if it's smaller, swap</li>\n</ol>\n</li>\n<li>\n<ol start=\"4\">\n<li>Repeat 2~3</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>\n<p>.push(heap, item) -> None</p>\n<ul>\n<li>O(logN)</li>\n</ul>\n</li>\n<li>\n<p>.pop(heap[, item]) -> item</p>\n<ul>\n<li>O(logN)</li>\n</ul>\n<pre><code class=\"language-python\">lst = [5,7, 4, 5, 6, 2, 1]\r\n\r\nheap = heapq.heapify(lst)\r\nprint(heap) # None\r\nprint(lst)  # [1, 5, 2, 7, 6, 5, 4]\r\n\r\nheapq.heappush(lst,76)\r\nprint(lst)  # [1, 5, 2, 7, 6, 5, 4, 76]\r\nheapq.heappush(lst, 0)\r\nprint(lst)  # [0, 1, 2, 5, 6, 5, 4, 76, 7]\r\n\r\nprint(heapq.heappop(lst)) # None\r\nprint(lst)  # [1, 5, 2, 7, 6, 5, 4, 76]\n</code></pre>\n</li>\n</ul>\n<h2>3.5. functools</h2>\n<ul>\n<li>\n<p>.partial(func, para, *args, **kwargs) -> partial object(function)</p>\n<ul>\n<li>return the function that combined the func with the parameters</li>\n</ul>\n<pre><code class=\"language-python\">from functools import partial\r\n\r\nbasetwo = partial(int, base=2)\r\nprint(basetwo)  # functools.partial(&#x3C;class 'int'>, base=2)\r\nprint(type(basetwo))    # &#x3C;class 'functools.partial'>\r\nprint(basetwo('10010')) # 18\r\n#print(basetwo('5')) # Error\r\n\r\ndef xyzw(x, y, z, w = 10):\r\n    print(f'x:{x}, y:{y}, z:{z}, w:{w}')\r\n\r\nxyzw1 = partial(xyzw, 1)\r\nxyzw2 = partial(xyzw, 1, 2)\r\nxyzw3 = partial(xyzw, 1, 2, 3)\r\nxyzw4 = partial(xyzw, 1, 2, w = 3)\r\n\r\n\r\nxyzw1(2,3) # x:1, y:2, z:3 w:10\r\nxyzw2(3)   # x:1, y:2, z:3 w:10\r\nxyzw3()    # x:1, y:2, z:3 w:10\r\nxyzw4(3)   # x:1, y:2, z:3 w:3\n</code></pre>\n</li>\n<li>\n<p>.reduce(func, iterable[, initializer])</p>\n<ul>\n<li>repeat func with the data in the iterable</li>\n<li>if there's initailizer, use it for the first data\n<pre><code class=\"language-python\">reduce(lambda x, y: x+y, [1, 2, 3, 4, 5])\r\n# ((((1+2)+3)+4)+5)\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>@cache</p>\n<ul>\n<li>Caching: save the data to re-use it with higher speed</li>\n<li>if you use <code>@cahce</code>above a functon, a dictionary is made which has elements in the shape of {input: output}</li>\n<li>Therefore, the program doesn't repeat the same operation</li>\n</ul>\n<pre><code class=\"language-python\">@cache\r\ndef factorial(n):\r\n    return n * factorial(n-1) if n else 1\r\n\r\n>>> factorial(10)      # no previously cached result, makes 11 recursive calls\r\n3628800\r\n>>> factorial(5)       # just looks up cached value result\r\n120\r\n>>> factorial(12)      # makes two new recursive calls, the other 10 are cached\r\n479001600\n</code></pre>\n</li>\n<li>\n<p>@lru_cache</p>\n<ul>\n<li>similar to the @cache, but the maxsizie is limtied to 128, so the data in excess will be removed based on lru rule</li>\n</ul>\n<pre><code class=\"language-python\">@lru_cache(maxsize=None)\r\ndef fib(n):\r\n    if n &#x3C; 2:\r\n        return n\r\n    return fib(n-1) + fib(n-2)\r\n\r\n[fib(n) for n in range(16)]\r\n# [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610]\r\n\r\nfib.cache_info()\r\n# CacheInfo(hits=28, misses=16, maxsize=None, currsize=16)\r\n# hits: how many times have you looked up the dict\r\n# misses: how many tiems have you operated the function\n</code></pre>\n</li>\n<li>\n<p>.cmp_to_key</p>\n<ul>\n<li>make key for sorted or sort function</li>\n<li>+int: latter one goes to the front</li>\n<li>0: no change</li>\n<li>-int: former one goes to the front</li>\n</ul>\n<pre><code class=\"language-python\">def comp(x, y):\r\n    if x &#x3C; y:\r\n        return 1\r\n    elif x == y:\r\n        return 0\r\n    else:\r\n        return -1\r\n\r\nl = [1, 4, 5, 3, 1]\r\n\r\nsorted_list = sorted(l, key=cmp_to_key(comp))\r\nprint(sorted_list)# [5, 4, 3, 1, 1]\n</code></pre>\n</li>\n</ul>\n<h2>3.6. itertools</h2>\n<ul>\n<li>\n<p><strong>Infinite iterator</strong></p>\n<ul>\n<li>\n<p>count(start[,end]) -> itertools.count</p>\n<ul>\n<li>generate an infinite iterator</li>\n<li>start, end can be float\n<pre><code class=\"language-python\"># start, start+step, start+2*step, …\r\n# count(10) --> 10 11 12 13 14 ...\r\n# count(2.5, 0.5) -> 2.5 3.0 3.5 .\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>cycle(iterable)</p>\n<ul>\n<li>infinite iterator that yield an elements in the iterable cycling\n<pre><code class=\"language-python\"># cycle('ABCD') --> A B C D A B C D A B C D ...\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>repeat(obj[,times])</p>\n<ul>\n<li>generate obj for 'times' times</li>\n<li>if 'times' is not defined, generate infinitely\n<pre><code class=\"language-python\">for i in repeat([1, 2, 3], 5):\r\n    print(i)\r\n    # [1, 2, 3]\r\n    # [1, 2, 3]\r\n    # [1, 2, 3]\r\n    # [1, 2, 3]\r\n    # [1, 2, 3]\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>Finite iterator</strong></p>\n<ul>\n<li>\n<p>accumulate(iterable[, func, inital=None])</p>\n<ul>\n<li>generate an iterator which yields the accumulated value of the iterable</li>\n<li>if the functions is given, apply the function instead of add(x, y )</li>\n<li>iniitial is used for the first value\n<pre><code class=\"language-python\"># accumulate([1,2,3,4,5]) --> 1 3 6 10 15\r\n# accumulate([1,2,3,4,5], initial=100) --> 100 101 103 106 110 115\r\n# accumulate([1,2,3,4,5], operator.mul) --> 1 2 6 24 120\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>chain(*iterables)</p>\n<ul>\n<li>yields an element in the iterables</li>\n<li>if the first iterables is thoroughly detected, go to the second one\n<pre><code class=\"language-python\"># chain.from_iterable(['ABC', 'DEF']) --> A B C D E F\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>compress(iterable, boolean_list)</p>\n<ul>\n<li>map the iterable with boolean_list, and yied the daty only when the elements in the boolean_list is Truthy</li>\n<li>yield the data, until the shorter one ends\n<pre><code class=\"language-python\"># compress('ABCDEF', [1,0,True,[],'hahaha',1]) --> A C E F\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>dropwhile(func, iterable)</p>\n<ul>\n<li>\n<p>yield from the data that is False for the func</p>\n<pre><code class=\"language-python\">lst =[5, 6, -8, -4, 2, 100]\r\n\r\nfor i in dropwhile(lambda x: x > 0, lst):\r\n    print(i) # -8, -4, 2, 100\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>filterflase(func, iterable)</p>\n<ul>\n<li>the oppsite of filter(func, iterable)\n<pre><code class=\"language-python\"># filterfalse(lambda x: x%2, range(10)) --> 0 2 4 6 8\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>islice(iterable, stop) / islice(iterable, start, stop[, step])</p>\n<ul>\n<li>generator with slicing\n<pre><code class=\"language-python\"># islice('ABCDEFG', 2) --> A B\r\n# islice('ABCDEFG', 2, 4) --> C D\r\n# islice('ABCDEFG', 2, None) --> C D E F G\r\n# islice('ABCDEFG', 0, None, 2) --> A C E G\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>starmap(func, iterable)</p>\n<ul>\n<li>similar to map, but can get *args as paramter\n<pre><code class=\"language-python\"># starmap(pow, [(2,5), (3,2), (10,3)]) --> 32 9 1000\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>takewhile(func, )</p>\n<ul>\n<li>yield before the data that is False for the func</li>\n<li>the opposite fo dropwhile()\n<pre><code class=\"language-python\"># takewhile(lambda x: x&#x3C;5, [1,4,6,4,1]) --> 1 4\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>zip_logest(*iterables, fillvalue=None) -> tuple</p>\n<ul>\n<li>yield zipped tuple, when the shorter one is exhausted, fill with 'fillvalue'\n<pre><code class=\"language-python\">for i in zip_longest('ABCD', 'xy', fillvalue='-'):\r\n    print(i)\r\n    # ('A', 'x')\r\n    # ('B', 'y')\r\n    # ('C', '-')\r\n    # ('D', '-')\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>combinational iterator</strong></p>\n<ul>\n<li>\n<p>product(*iterables, repeat=1) -> tuple</p>\n<ul>\n<li>\n<p>generate the combinations of iter1, iter2, iter3</p>\n</li>\n<li>\n<p>repeat = n: do it for _([iter1, iter2, iter3] _ n)</p>\n<pre><code class=\"language-python\">_list = [\"012\", \"abc\", \"!@#\"]\r\nfor i in product(*_list):\r\n    print(i)    # ('0', 'a', '!') > ('0', 'a', '@') > ('0', 'a', '#') > ('0', 'b', '!') >>> ('2', 'c', '#')\r\n    # 3**3 combinations\r\n\r\nfor i in product(*_list, repeat=2):\r\n    print(i)    # ('0', 'a', '!', '0', 'a', '!') > ('0', 'a', '!', '0', 'a', '@') >>> ('2', 'c', '#', '2', 'c', '#')\r\n    # 3**(3*2) combinations\r\n\r\nfor i in product(_list):\r\n    print(i)    # ('012',) > ('abc',) >('!@#',)\r\n    # 3**1 combinations\r\n\r\nfor i in product(_list, repeat=3):\r\n    print(i)    # ('012', '012', '012') > ('012', '012', 'abc') >>> ('!@#', '!@#', '!@#')\r\n    # 3**(1*3) combinations\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>permuations(iterable, r=None) -> tuple</p>\n<ul>\n<li>nCr * r!</li>\n<li>pick and arrange</li>\n<li>when r=None, r==len(iterable)\n<pre><code class=\"language-python\"># permutations('ABCD', 2) --> ('A','B') AC AD BA BC BD CA CB CD DA DB DC\r\n# permutations(range(3)) --> (0, 1, 2) 021 102 120 201 210\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>combinatons(iterable, r) -> tuple</p>\n<ul>\n<li>nCr</li>\n<li>pick\n<pre><code class=\"language-python\"># combinations('ABCD', 2) --> ('A','B') AC AD BC BD CD\r\n# combinations(range(4), 3) --> (0, 1, 2) 013 023 123\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>combinations_with_replacement(iterable, r) -> tuple</p>\n<ul>\n<li>combinations allowing n-time duplication\n<pre><code class=\"language-python\"># combinations_with_replacement('ABC', 2) --> ('A', 'A') AB AC BB BC CC\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2>3.7. math</h2>\n<ul>\n<li>\n<p>.ceil</p>\n</li>\n<li>\n<p>.floor</p>\n</li>\n<li>\n<p>.copysign</p>\n</li>\n<li>\n<p>.fabs</p>\n</li>\n<li>\n<p>.factorial</p>\n</li>\n<li>\n<p>.frexp</p>\n</li>\n<li>\n<p>.ldexp</p>\n</li>\n<li>\n<p>.gcd</p>\n</li>\n<li>\n<p>.modf\r\n*.isclaos(</p>\n</li>\n<li>\n<p>.pow</p>\n</li>\n<li>\n<p>.sqrt</p>\n</li>\n<li>\n<p>.log</p>\n</li>\n<li>\n<p>.log1p</p>\n</li>\n<li>\n<p>.log2</p>\n</li>\n<li>\n<p>.log10</p>\n</li>\n<li>\n<p>.cos</p>\n</li>\n<li>\n<p>.sin</p>\n</li>\n<li>\n<p>.tan</p>\n</li>\n<li>\n<p>.acos</p>\n</li>\n<li>\n<p>.asin</p>\n</li>\n<li>\n<p>.atan</p>\n</li>\n<li>\n<p>.degrees</p>\n</li>\n<li>\n<p>.radians</p>\n</li>\n<li>\n<p>.pi</p>\n</li>\n<li>\n<p>.e</p>\n</li>\n<li>\n<p>.tau</p>\n</li>\n</ul>\n<h2>3.8. bisect</h2>\n<ul>\n<li>\n<p>.bisect</p>\n</li>\n<li>\n<p>.bisect_left</p>\n</li>\n<li>\n<p>.insort</p>\n</li>\n<li>\n<p>.insort_left</p>\n</li>\n</ul>\n<h2>3.9. copy</h2>\n<ul>\n<li>.copy()</li>\n<li>.deepcopy()</li>\n</ul>\n<h2>3.10. os</h2>\n<ul>\n<li>.chdir()</li>\n<li>.environ</li>\n<li>.getcwd()</li>\n<li>.listdir</li>\n<li>.mkdir</li>\n<li>.path\r\n*..exists()\r\n*isdir()\r\n*isfile</li>\n<li>.renmae</li>\n<li>.remove</li>\n<li>.removedirs</li>\n<li>.walk</li>\n</ul>\n<h2>3.11. pickle</h2>\n<ul>\n<li>.dump</li>\n<li>.load</li>\n</ul>\n<h2>3.12. json</h2>\n<ul>\n<li>.dump</li>\n<li>.load</li>\n<li>.dumps</li>\n<li>.loads</li>\n</ul>"}},"pageContext":{"pagePath":"posts/Python/Appendix_02_Python_Modules.md","id":"6ae3b31a-5f63-5fcb-98ba-1b4bddc42616","parent":{"id":"d98d72de-e9f6-5fbe-99d0-fc9dcf76fdc3","name":"Appendix_02_Python_Modules","relativePath":"Python/Appendix_02_Python_Modules.md"}}},"staticQueryHashes":["1274812890","3935499650","82772122"],"slicesMap":{}}