{"componentChunkName":"component---src-templates-post-tsx","path":"/posts/Python/03_Python_Function.md/","result":{"data":{"markdownRemark":{"id":"76da07ed-7c15-5db7-8ef9-d9ed58ff8772","html":"<h1>Python Function</h1>\n<h2>Index</h2>\n<ul>\n<li><a href=\"#1-function\">1. Function</a>\n<ul>\n<li><a href=\"#11-type-of-function\">1.1. Type of Function</a></li>\n<li><a href=\"#12-parameters-and-arguments\">1.2. Parameters and Arguments</a>\n<ul>\n<li><a href=\"#121-default-parameter-value\">1.2.1. Default Parameter Value</a></li>\n<li><a href=\"#122-arbitrary-arguments-args\">1.2.2. Arbitrary Arguments, *args</a></li>\n<li><a href=\"#123-keyword-arguments\">1.2.3. Keyword Arguments</a></li>\n<li><a href=\"#124-arbitrary-keyword-arguments-kwargs\">1.2.4. Arbitrary Keyword Arguments, **kwargs</a></li>\n<li><a href=\"#125-mutable--immutable-parameter\">1.2.5. Mutable &#x26; Immutable Parameter</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#2-scope\">2. Scope</a>\n<ul>\n<li><a href=\"#21-legb-resolution-rule\">2.1. LEGB Resolution Rule</a></li>\n<li><a href=\"#22-global-keyword\">2.2. global keyword</a></li>\n<li><a href=\"#24-nonlocal-keyword\">2.4. nonlocal keyword</a></li>\n</ul>\n</li>\n<li><a href=\"#3-first-class-function\">3. First-Class Function</a></li>\n</ul>\n<hr>\n<h1>1. Function</h1>\n<p><strong>Code block that excutes the specific logic</strong></p>\n<h2>1.1. Type of Function</h2>\n<ul>\n<li><strong>Built-in function</strong>\n<ul>\n<li>functions bascially installed in Python</li>\n</ul>\n</li>\n<li><strong>External function</strong>\n<ul>\n<li>functions that can be used after being imported</li>\n</ul>\n</li>\n<li><strong>User-defined function</strong>\n<ul>\n<li>functions defined by the user</li>\n</ul>\n</li>\n</ul>\n<h2>1.2. Parameters and Arguments</h2>\n<p>A <strong>parameter</strong> is the variable listed inside the parentheses in the function definition.\r\nAn <strong>argument</strong> is the value that is sent to the function when it is called.</p>\n<h3>1.2.1. Default Parameter Value</h3>\n<p>If the function is called without argument, it uses the default value</p>\n<pre><code class=\"language-python\">def my_function(country = \"Norway\"):\r\n    print(\"I am from \" + country)\r\n\r\nmy_function(\"Sweden\")   # I am from Sweden\r\nmy_function()           # I am from Norway\n</code></pre>\n<h3>1.2.2. Arbitrary Arguments, *args</h3>\n<p>The function will receive a tuple of arguments, and can access the items accordingly.</p>\n<pre><code class=\"language-python\">def my_function(*kids):\r\n    print(kids)\r\n    print(type(kids))\r\n    print('The youngest child is ' + kids[2])\r\n\r\nmy_function('Emil', 'Tobias', 'Linus')\r\n# ('Emil', 'Tobias', 'Linus')\r\n# &#x3C;class 'tuple'>\r\n# The youngest child is Linus\n</code></pre>\n<h3>1.2.3. Keyword Arguments</h3>\n<p>If you send arguments with the key = value syntax, the order of the arguments does not matter.</p>\n<pre><code class=\"language-python\">def my_function(child3, child2, child1):\r\n    print(\"The youngest child is \" + child3)\r\n\r\nmy_function(child1 = \"Emil\", child2 = \"Tobias\", child3 = \"Linus\")\r\n# The youngest child is Linus\n</code></pre>\n<h3>1.2.4. Arbitrary Keyword Arguments, **kwargs</h3>\n<p>This way the function will receive a dictionary of arguments, and can access the items accordingly.</p>\n<pre><code class=\"language-python\">def my_function(**kid):\r\n    print(\"His last name is \" + kid[\"lname\"])\r\n\r\nmy_function(fname = \"Tobias\", lname = \"Refsnes\")\r\n# His last name is Refsnes\n</code></pre>\n<h3>1.2.5. Mutable &#x26; Immutable Parameter</h3>\n<ul>\n<li><strong>Mutable Data</strong><br>\n<strong>passed by value parameter.</strong><br>\nThe operations in the function don't affect the original data.</li>\n<li><strong>Immutable Data</strong><br>\n<strong>passed by reference parameter.</strong><br>\nThe operations in the function <mark>affect the original data.</mark> To prevent this, the data should be deep copied</li>\n</ul>\n<hr>\n<h1>2. Scope</h1>\n<h2>2.1. LEGB Resolution Rule</h2>\n<p><strong>The variables are searched in the following order.</strong></p>\n<ol>\n<li><strong>Local Scope</strong><br>\nInside of the cuurent function</li>\n<li><strong>Enclosed Scope</strong>\r\nInside of the outer function, outside of the current function.</li>\n<li><strong>Global Scope</strong>\r\nInside of the module(.py), outside of the enclosed scope.</li>\n<li><strong>Built-in Scope</strong>\r\nPython built-in varibles</li>\n</ol>\n<h2>2.2. global keyword</h2>\n<p><strong>Drives the varibale from the nearest outer function</strong><br>\nIf there is no corresponding variable, a global variable of that name is created.</p>\n<pre><code class=\"language-python\">def myfunc():\r\n    global x\r\n    x = \"fantastic\"\r\n\r\nmyfunc()\r\n\r\nprint(\"Python is \" + x)     # Python is fantastic\n</code></pre>\n<h2>2.4. nonlocal keyword</h2>\n<p><strong>Drives the varibale from the nearest outer function</strong><br>\nThe variable must be defined in the enclosing function.</p>\n<pre><code class=\"language-python\">def myfunc1():\r\n    x = \"John\"\r\n    def myfunc2():\r\n        nonlocal x\r\n        x = \"hello\"\r\n    myfunc2()\r\n    return x\r\n\r\nprint(myfunc1())    # hello\n</code></pre>\n<hr>\n<h1>3. First-Class Function</h1>\n<ul>\n<li>\n<p><strong>Functions are objects</strong></p>\n<pre><code class=\"language-python\">def shout(text):\r\n    return text.upper()\r\n\r\nyell = shout\r\n\r\nprint (yell('Hello'))   # HELLO\n</code></pre>\n</li>\n<li>\n<p><strong>Functions can be passed as arguments to other functions</strong></p>\n<pre><code class=\"language-python\">def shout(text):\r\n    return text.upper()\r\n\r\ndef whisper(text):\r\n    return text.lower()\r\n\r\ndef greet(func):\r\n    # storing the function in a variable\r\n    greeting = func(\"\"\"Hi, I am created by a function\r\n                    passed as an argument.\"\"\")\r\n    print (greeting)\r\n\r\ngreet(shout)\r\n# HI, I AM CREATED BY A FUNCTION PASSED AS AN ARGUMENT.\r\ngreet(whisper)\r\n# hi, i am created by a function passed as an argument.\n</code></pre>\n</li>\n<li>\n<p><strong>Functions can return another function</strong></p>\n<pre><code class=\"language-python\">def create_adder(x):\r\n    def adder(y):\r\n        return x+y\r\n\r\n    return adder\r\n\r\nadd_15 = create_adder(15)\r\n\r\nprint (add_15(10))  # 25\n</code></pre>\n</li>\n</ul>\n<hr>"}},"pageContext":{"pagePath":"posts/Python/03_Python_Function.md","id":"76da07ed-7c15-5db7-8ef9-d9ed58ff8772","parent":{"id":"12959dbf-8410-5dfd-99c7-1a3809579343","name":"03_Python_Function","relativePath":"Python/03_Python_Function.md"}}},"staticQueryHashes":["1274812890","3935499650","82772122"],"slicesMap":{}}