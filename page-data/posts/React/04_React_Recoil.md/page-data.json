{"componentChunkName":"component---src-templates-post-tsx","path":"/posts/React/04_React_Recoil.md/","result":{"data":{"markdownRemark":{"id":"ea64eaa9-7187-5055-b7ba-033fddba7549","html":"<h1>Recoil</h1>\n<p><a href=\"https://recoiljs.org/ko/docs/basic-tutorial/atoms\">Recoil 공식문서</a>의 내용을 정리했습니다.</p>\n<ul>\n<li><a href=\"#recoil\">Recoil</a></li>\n<li><a href=\"#1-atoms\">1. Atoms</a>\n<ul>\n<li><a href=\"#11-atoms-%EC%83%9D%EC%84%B1\">1.1. Atoms 생성</a></li>\n<li><a href=\"#12-atoms-%EC%9D%BD%EA%B8%B0\">1.2. Atoms 읽기</a></li>\n<li><a href=\"#13-atoms-%EC%88%98%EC%A0%95\">1.3. Atoms 수정</a></li>\n</ul>\n</li>\n<li><a href=\"#2-selectors\">2. Selectors</a>\n<ul>\n<li><a href=\"#21-selectors-%EC%83%9D%EC%84%B1\">2.1. Selectors 생성</a></li>\n<li><a href=\"#21-selectors-%EC%9D%BD%EA%B8%B0\">2.1. Selectors 읽기</a></li>\n<li><a href=\"#22-selectors-%EC%88%98%EC%A0%95%ED%95%98%EA%B8%B0\">2.2. Selectors 수정하기</a></li>\n</ul>\n</li>\n<li><a href=\"#3-asynchronous\">3. Asynchronous</a></li>\n</ul>\n<h1>1. Atoms</h1>\n<p>Atom은 어플리케이션의 <a href=\"https://ko.wikipedia.org/wiki/%EB%8B%A8%EC%9D%BC_%EC%A7%84%EC%8B%A4_%EA%B3%B5%EA%B8%89%EC%9B%90\">단일 진실 공급원(source of truth)</a>이다. 즉, 아톰은 특정 데이터의 으뜸되는 하나의 공급원으로 작동하며, 다른 곳에서는 공급원을 참조해서 사용한다. 이 단일 진실 공급원이 갱신될 경우, 해당 데이터를 참조되는 어플리케이션의 모든 곳으로 갱신된 데이터가 전파된다. <del>어렵게 설명했는데 쉽게 말하면 그냥 전역 useState이다.</del></p>\n<h2>1.1. Atoms 생성</h2>\n<p><code>atom()</code> 함수를 사용해서 atom을 생성할 수 있다.</p>\n<pre><code class=\"language-js\">import { atom } from 'recoil'\r\n\r\nexport default todoListState = atom({\r\n  key: 'TodoList',\r\n  default: [],\r\n})\r\n\r\nexport { todoListState }\n</code></pre>\n<ul>\n<li><strong>key</strong><br>\natoms를 식별하는 키로, 어플리케이션의 모든 atoms와 selectors에 대해서 유니크한 값이어야 한다.</li>\n<li><strong>default</strong><br>\natoms 생성 시 할당되는 기본값이다.</li>\n</ul>\n<h2>1.2. Atoms 읽기</h2>\n<p>리액트 컴포넌트에서는 <code>useRecoilState()</code> 훅을 이용해서 atoms의 내용을 참조할 수 있다.</p>\n<pre><code class=\"language-js\">import { useRecoilState } from 'recoil'\r\nimport { todoListState } from './state/todoListState'\r\n\r\nfunction TodoList() {\r\n  const todoList = useRecoilValue(todoListState)\r\n\r\n  return (\r\n    &#x3C;>\r\n      {/* 아래 1.3.  Atoms 수정 항목에서 정의되는 컴포넌트이다. */}\r\n      &#x3C;TodoItemCreator />\r\n      {todoList.map((todoItem) => (\r\n        &#x3C;TodoItem key={todoItem.id} item={todoItem} />\r\n      ))}\r\n    &#x3C;/>\r\n  )\r\n}\r\n\r\nexport default TodoList\n</code></pre>\n<h2>1.3. Atoms 수정</h2>\n<p>리액트 컴포넌트에서는 <code>useSetRecoilState()</code> 훅을 이용해서 atoms의 내용을 수정하는 함수(setter)에 접근할 수 있다. <code>useState()</code>의 setter 함수와 마찬가지로, 갱신시키고자 하는 값을 인자로 넣어서 데이터를 수정할 수 있다. 또한 아래 예시처럼 updater 함수를 인자로 전달시킴으로써 이전 상태를 참조하며 갱신할 수도 있다.</p>\n<pre><code class=\"language-js\">import { useSetRecoilState } from 'recoil'\r\nimport { todoListState } from './state/todoListState'\r\n\r\nfunction TodoItemCreator() {\r\n  const [inputValue, setInputValue] = useState('')\r\n  const setTodoList = useSetRecoilState(todoListState)\r\n\r\n  const addItem = () => {\r\n    setTodoList((oldTodoList) => [\r\n      ...oldTodoList,\r\n      {\r\n        id: new Date(),\r\n        text: inputValue,\r\n        isComplete: false,\r\n      },\r\n    ])\r\n    setInputValue('')\r\n  }\r\n\r\n  const onChange = ({ target: { value } }) => {\r\n    setInputValue(value)\r\n  }\r\n\r\n  return (\r\n    &#x3C;div>\r\n      &#x3C;input type=\"text\" value={inputValue} onChange={onChange} />\r\n      &#x3C;button onClick={addItem}>Add&#x3C;/button>\r\n    &#x3C;/div>\r\n  )\r\n}\r\n\r\nexport default TodoItemCreator\n</code></pre>\n<p>리액트 컴포넌트에서는 <code>useRecoilState()</code> 훅을 이용하면, atoms의 값과 setter함수를 모두 참조할 수 있다.</p>\n<pre><code class=\"language-js\">import { useRecoilState } from 'recoil'\r\nimport { todoListState } from './state/todoListState'\r\n\r\nfunction TodoItem({ item }) {\r\n  const [todoList, setTodoList] = useRecoilState(todoListState)\r\n  const index = todoList.findIndex((listItem) => listItem === item)\r\n\r\n  const editItemText = ({ target: { value } }) => {\r\n    const newList = replaceItemAtIndex(todoList, index, {\r\n      ...item,\r\n      text: value,\r\n    })\r\n\r\n    setTodoList(newList)\r\n  }\r\n\r\n  const toggleItemCompletion = () => {\r\n    const newList = replaceItemAtIndex(todoList, index, {\r\n      ...item,\r\n      isComplete: !item.isComplete,\r\n    })\r\n\r\n    setTodoList(newList)\r\n  }\r\n\r\n  const deleteItem = () => {\r\n    const newList = removeItemAtIndex(todoList, index)\r\n\r\n    setTodoList(newList)\r\n  }\r\n\r\n  return (\r\n    &#x3C;div>\r\n      &#x3C;input type=\"text\" value={item.text} onChange={editItemText} />\r\n      &#x3C;input\r\n        type=\"checkbox\"\r\n        checked={item.isComplete}\r\n        onChange={toggleItemCompletion}\r\n      />\r\n      &#x3C;button onClick={deleteItem}>X&#x3C;/button>\r\n    &#x3C;/div>\r\n  )\r\n}\r\n\r\nfunction replaceItemAtIndex(arr, index, newValue) {\r\n  return [...arr.slice(0, index), newValue, ...arr.slice(index + 1)]\r\n}\r\n\r\nfunction removeItemAtIndex(arr, index) {\r\n  return [...arr.slice(0, index), ...arr.slice(index + 1)]\r\n}\r\n\r\nexport default TodoItem\n</code></pre>\n<h1>2. Selectors</h1>\n<p>selector는 순수함수를 통해 atom으로부터 파생된 값이다. 순수함수란 output이 input에만 종속적인 함수이다. 즉 selector의 값은 참조하는 atom의 값으로 결정된다.</p>\n<h2>2.1. Selectors 생성</h2>\n<pre><code class=\"language-js\">import { atom } from 'recoil'\r\n\r\nconst todoListFilterState = atom({\r\n  key: 'TodoListFilter',\r\n  default: 'Show All',\r\n})\r\n\r\nconst todoListState = atom({\r\n  key: 'TodoList',\r\n  default: [],\r\n})\r\n\r\nexport { todoListFilterState, todoListState }\n</code></pre>\n<pre><code class=\"language-js\">import { useRecoilState } from 'recoil'\r\nimport { todoListFilterState, todoListState } from './state/todoListState'\r\n\r\nconst filteredTodoListState = selector({\r\n  key: 'FilteredTodoList',\r\n  get: ({ get }) => {\r\n    const filter = get(todoListFilterState)\r\n    const list = get(todoListState)\r\n\r\n    switch (filter) {\r\n      case 'Show Completed':\r\n        return list.filter((item) => item.isComplete)\r\n      case 'Show Uncompleted':\r\n        return list.filter((item) => !item.isComplete)\r\n      default:\r\n        return list\r\n    }\r\n  },\r\n})\r\n\r\nexport { filteredTodoListState }\n</code></pre>\n<p><a href=\"https://recoiljs.org/docs/api-reference/core/selector/\">Selector 세부 문서</a></p>\n<ul>\n<li><strong>get</strong><br>\nget 속성은 get 함수를 내부적으로 전달받으며, 전달 받은 get 함수를 통해 다른 <strong>atoms</strong>나 <strong>selectors</strong>를 구독할 수 있다.<br>\n위의 예시에서 filteredTodoListState 는 <code>todoListFilterState</code>와 <code>todoListState</code>를 구독하고 있다.</li>\n</ul>\n<h2>2.1. Selectors 읽기</h2>\n<p>atoms와 동일하게 컴포넌트 단에서 <code>useRecoilValue</code>를 이용해서 값을 참조할 수 있다.</p>\n<p>말했던 것처럼 soure of truth는 atom이고, selector는 atom으로부터 파생된 값이다. 따라서 아래 예시에서 <code>TodoListFilters</code>컴포넌트에서 <code>filter</code> atom이 수정되면, <code>filter</code>를 구독하는 <code>filteredTodoListState</code>도 자동으로 수정된다.</p>\n<pre><code class=\"language-js\">import { useRecoilState } from 'recoil'\r\nimport filteredTodoListState from './selectors/filteredTodoListState'\r\nimport { filter } from './state/filteredTodoListState'\r\n\r\nfunction TodoList() {\r\n  // changed from todoListState to filteredTodoListState\r\n  const todoList = useRecoilValue(filteredTodoListState)\r\n\r\n  return (\r\n    &#x3C;>\r\n      &#x3C;TodoListFilters />\r\n      &#x3C;TodoItemCreator />\r\n\r\n      {todoList.map((todoItem) => (\r\n        &#x3C;TodoItem item={todoItem} key={todoItem.id} />\r\n      ))}\r\n    &#x3C;/>\r\n  )\r\n}\r\n\r\nfunction TodoListFilters() {\r\n  const [filter, setFilter] = useRecoilState(todoListFilterState)\r\n\r\n  const updateFilter = ({ target: { value } }) => {\r\n    setFilter(value)\r\n  }\r\n\r\n  return (\r\n    &#x3C;>\r\n      Filter:\r\n      &#x3C;select value={filter} onChange={updateFilter}>\r\n        &#x3C;option value=\"Show All\">All&#x3C;/option>\r\n        &#x3C;option value=\"Show Completed\">Completed&#x3C;/option>\r\n        &#x3C;option value=\"Show Uncompleted\">Uncompleted&#x3C;/option>\r\n      &#x3C;/select>\r\n    &#x3C;/>\r\n  )\r\n}\n</code></pre>\n<h2>2.2. Selectors 수정하기</h2>\n<p><a href=\"https://recoiljs.org/docs/api-reference/core/selector/\">Selector가 set 속성을 가질 때만 수정할 수 있다.</a></p>\n<ol>\n<li>이미 선언된 아톰을 구독하고 있다가 함수를 실행</li>\n<li>서버와의 비동기적인 통신이 가능</li>\n</ol>\n<p>비동기 suspense, loadble 알아보기\r\nrecoil은 데이터를 캐싱함!!!</p>\n<ol>\n<li>\n<p>구독중인 state가 변경</p>\n</li>\n<li>\n<p>요청 파라미터가 새로운 값으로 바뀐경우 (파라미터를 하나 더 만들고</p>\n</li>\n<li>\n<p><a href=\"https://www.youtube.com/watch?v=7nwpEiSpPqY\">https://www.youtube.com/watch?v=7nwpEiSpPqY</a>)</p>\n</li>\n<li>\n<p>19:50</p>\n</li>\n<li>\n<p>내 이벤트는 명시적 업데이트</p>\n</li>\n<li>\n<p>아닌 것은 실시간/주기적 업데이트 : 시간 같은 것을 파라미터를 줌.</p>\n</li>\n</ol>\n<p>이제는 캐싱을 안하는 법이 나온 것 같음. 알아보기</p>\n<h1>3. Asynchronous</h1>"}},"pageContext":{"pagePath":"posts/React/04_React_Recoil.md","id":"ea64eaa9-7187-5055-b7ba-033fddba7549","parent":{"id":"c76c5785-6d82-5786-891b-9d7cddccb0fa","name":"04_React_Recoil","relativePath":"React/04_React_Recoil.md"}}},"staticQueryHashes":["1274812890","3935499650","82772122"],"slicesMap":{}}