{"componentChunkName":"component---src-templates-post-index-tsx","path":"/posts/React/04_React_Recoil.md/","result":{"data":{"markdownRemark":{"id":"ea64eaa9-7187-5055-b7ba-033fddba7549","html":"<blockquote>\n<p><a href=\"https://recoiljs.org/ko/docs/basic-tutorial/atoms\">Recoil 공식문서</a>의 내용을 정리했습니다.</p>\n</blockquote>\n<ul>\n<li><a href=\"#1-atoms\">1. Atoms</a>\n<ul>\n<li><a href=\"#11-atoms-%EC%83%9D%EC%84%B1\">1.1. Atoms 생성</a></li>\n<li><a href=\"#12-atoms-%EC%9D%BD%EA%B8%B0\">1.2. Atoms 읽기</a></li>\n<li><a href=\"#13-atoms-%EC%88%98%EC%A0%95\">1.3. Atoms 수정</a></li>\n</ul>\n</li>\n<li><a href=\"#2-selectors\">2. Selectors</a>\n<ul>\n<li><a href=\"#21-selectors-%EC%83%9D%EC%84%B1\">2.1. Selectors 생성</a></li>\n<li><a href=\"#21-selectors-%EC%9D%BD%EA%B8%B0\">2.1. Selectors 읽기</a></li>\n<li><a href=\"#22-selectors-%EC%88%98%EC%A0%95%ED%95%98%EA%B8%B0\">2.2. Selectors 수정하기</a></li>\n</ul>\n</li>\n<li><a href=\"#3-asynchronous\">3. Asynchronous</a></li>\n</ul>\n<hr>\n<h1 id=\"1-atoms\" style=\"position:relative;\"><a href=\"#1-atoms\" aria-label=\"1 atoms permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Atoms</h1>\n<p>Atom은 어플리케이션의 <a href=\"https://ko.wikipedia.org/wiki/%EB%8B%A8%EC%9D%BC_%EC%A7%84%EC%8B%A4_%EA%B3%B5%EA%B8%89%EC%9B%90\">단일 진실 공급원(source of truth)</a>이다. 즉, 아톰은 특정 데이터의 으뜸되는 하나의 공급원으로 작동하며, 다른 곳에서는 공급원을 참조해서 사용한다. 이 단일 진실 공급원이 갱신될 경우, 해당 데이터를 참조되는 어플리케이션의 모든 곳으로 갱신된 데이터가 전파된다. <del>어렵게 설명했는데 쉽게 말하면 그냥 전역 useState이다.</del></p>\n<h2 id=\"11-atoms-생성\" style=\"position:relative;\"><a href=\"#11-atoms-%EC%83%9D%EC%84%B1\" aria-label=\"11 atoms 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.1. Atoms 생성</h2>\n<p><code class=\"language-text\">atom()</code> 함수를 사용해서 atom을 생성할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> atom <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'recoil'</span>\r\n\r\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> todoListState <span class=\"token operator\">=</span> <span class=\"token function\">atom</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\r\n  <span class=\"token literal-property property\">key</span><span class=\"token operator\">:</span> <span class=\"token string\">'TodoList'</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> todoListState <span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><strong>key</strong><br>\natoms를 식별하는 키로, 어플리케이션의 모든 atoms와 selectors에 대해서 유니크한 값이어야 한다.</li>\n<li><strong>default</strong><br>\natoms 생성 시 할당되는 기본값이다.</li>\n</ul>\n<h2 id=\"12-atoms-읽기\" style=\"position:relative;\"><a href=\"#12-atoms-%EC%9D%BD%EA%B8%B0\" aria-label=\"12 atoms 읽기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.2. Atoms 읽기</h2>\n<p>리액트 컴포넌트에서는 <code class=\"language-text\">useRecoilState()</code> 훅을 이용해서 atoms의 내용을 참조할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useRecoilState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'recoil'</span>\r\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> todoListState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./state/todoListState'</span>\r\n\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">TodoList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">const</span> todoList <span class=\"token operator\">=</span> <span class=\"token function\">useRecoilValue</span><span class=\"token punctuation\">(</span>todoListState<span class=\"token punctuation\">)</span>\r\n\r\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\r\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\r\n      <span class=\"token punctuation\">{</span><span class=\"token comment\">/* 아래 1.3.  Atoms 수정 항목에서 정의되는 컴포넌트이다. */</span><span class=\"token punctuation\">}</span>\r\n      <span class=\"token operator\">&lt;</span>TodoItemCreator <span class=\"token operator\">/</span><span class=\"token operator\">></span>\r\n      <span class=\"token punctuation\">{</span>todoList<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">todoItem</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\r\n        <span class=\"token operator\">&lt;</span>TodoItem key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>todoItem<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span> item<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>todoItem<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\r\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\r\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\r\n  <span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> TodoList</code></pre></div>\n<h2 id=\"13-atoms-수정\" style=\"position:relative;\"><a href=\"#13-atoms-%EC%88%98%EC%A0%95\" aria-label=\"13 atoms 수정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.3. Atoms 수정</h2>\n<p>리액트 컴포넌트에서는 <code class=\"language-text\">useSetRecoilState()</code> 훅을 이용해서 atoms의 내용을 수정하는 함수(setter)에 접근할 수 있다. <code class=\"language-text\">useState()</code>의 setter 함수와 마찬가지로, 갱신시키고자 하는 값을 인자로 넣어서 데이터를 수정할 수 있다. 또한 아래 예시처럼 updater 함수를 인자로 전달시킴으로써 이전 상태를 참조하며 갱신할 수도 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useSetRecoilState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'recoil'</span>\r\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> todoListState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./state/todoListState'</span>\r\n\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">TodoItemCreator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>inputValue<span class=\"token punctuation\">,</span> setInputValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\r\n  <span class=\"token keyword\">const</span> setTodoList <span class=\"token operator\">=</span> <span class=\"token function\">useSetRecoilState</span><span class=\"token punctuation\">(</span>todoListState<span class=\"token punctuation\">)</span>\r\n\r\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addItem</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token function\">setTodoList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">oldTodoList</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span>\r\n      <span class=\"token operator\">...</span>oldTodoList<span class=\"token punctuation\">,</span>\r\n      <span class=\"token punctuation\">{</span>\r\n        <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n        <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> inputValue<span class=\"token punctuation\">,</span>\r\n        <span class=\"token literal-property property\">isComplete</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\r\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token function\">setInputValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\r\n  <span class=\"token punctuation\">}</span>\r\n\r\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onChange</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">target</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> value <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token function\">setInputValue</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\r\n  <span class=\"token punctuation\">}</span>\r\n\r\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\r\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\r\n      <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>inputValue<span class=\"token punctuation\">}</span> onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onChange<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\r\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>addItem<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>Add<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\r\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\r\n  <span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> TodoItemCreator</code></pre></div>\n<p>리액트 컴포넌트에서는 <code class=\"language-text\">useRecoilState()</code> 훅을 이용하면, atoms의 값과 setter함수를 모두 참조할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useRecoilState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'recoil'</span>\r\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> todoListState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./state/todoListState'</span>\r\n\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">TodoItem</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> item <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>todoList<span class=\"token punctuation\">,</span> setTodoList<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useRecoilState</span><span class=\"token punctuation\">(</span>todoListState<span class=\"token punctuation\">)</span>\r\n  <span class=\"token keyword\">const</span> index <span class=\"token operator\">=</span> todoList<span class=\"token punctuation\">.</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">listItem</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> listItem <span class=\"token operator\">===</span> item<span class=\"token punctuation\">)</span>\r\n\r\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">editItemText</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">target</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> value <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">const</span> newList <span class=\"token operator\">=</span> <span class=\"token function\">replaceItemAtIndex</span><span class=\"token punctuation\">(</span>todoList<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\r\n      <span class=\"token operator\">...</span>item<span class=\"token punctuation\">,</span>\r\n      <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> value<span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n\r\n    <span class=\"token function\">setTodoList</span><span class=\"token punctuation\">(</span>newList<span class=\"token punctuation\">)</span>\r\n  <span class=\"token punctuation\">}</span>\r\n\r\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">toggleItemCompletion</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">const</span> newList <span class=\"token operator\">=</span> <span class=\"token function\">replaceItemAtIndex</span><span class=\"token punctuation\">(</span>todoList<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\r\n      <span class=\"token operator\">...</span>item<span class=\"token punctuation\">,</span>\r\n      <span class=\"token literal-property property\">isComplete</span><span class=\"token operator\">:</span> <span class=\"token operator\">!</span>item<span class=\"token punctuation\">.</span>isComplete<span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n\r\n    <span class=\"token function\">setTodoList</span><span class=\"token punctuation\">(</span>newList<span class=\"token punctuation\">)</span>\r\n  <span class=\"token punctuation\">}</span>\r\n\r\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">deleteItem</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">const</span> newList <span class=\"token operator\">=</span> <span class=\"token function\">removeItemAtIndex</span><span class=\"token punctuation\">(</span>todoList<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span>\r\n\r\n    <span class=\"token function\">setTodoList</span><span class=\"token punctuation\">(</span>newList<span class=\"token punctuation\">)</span>\r\n  <span class=\"token punctuation\">}</span>\r\n\r\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\r\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\r\n      <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">}</span> onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>editItemText<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\r\n      <span class=\"token operator\">&lt;</span>input\r\n        type<span class=\"token operator\">=</span><span class=\"token string\">\"checkbox\"</span>\r\n        checked<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>isComplete<span class=\"token punctuation\">}</span>\r\n        onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>toggleItemCompletion<span class=\"token punctuation\">}</span>\r\n      <span class=\"token operator\">/</span><span class=\"token operator\">></span>\r\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>deleteItem<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token constant\">X</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\r\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\r\n  <span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">replaceItemAtIndex</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> newValue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> newValue<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">removeItemAtIndex</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> TodoItem</code></pre></div>\n<h1 id=\"2-selectors\" style=\"position:relative;\"><a href=\"#2-selectors\" aria-label=\"2 selectors permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Selectors</h1>\n<p>selector는 순수함수를 통해 atom으로부터 파생된 값이다. 순수함수란 output이 input에만 종속적인 함수이다. 즉 selector의 값은 참조하는 atom의 값으로 결정된다.</p>\n<h2 id=\"21-selectors-생성\" style=\"position:relative;\"><a href=\"#21-selectors-%EC%83%9D%EC%84%B1\" aria-label=\"21 selectors 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.1. Selectors 생성</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> atom <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'recoil'</span>\r\n\r\n<span class=\"token keyword\">const</span> todoListFilterState <span class=\"token operator\">=</span> <span class=\"token function\">atom</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\r\n  <span class=\"token literal-property property\">key</span><span class=\"token operator\">:</span> <span class=\"token string\">'TodoListFilter'</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token string\">'Show All'</span><span class=\"token punctuation\">,</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token keyword\">const</span> todoListState <span class=\"token operator\">=</span> <span class=\"token function\">atom</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\r\n  <span class=\"token literal-property property\">key</span><span class=\"token operator\">:</span> <span class=\"token string\">'TodoList'</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> todoListFilterState<span class=\"token punctuation\">,</span> todoListState <span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useRecoilState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'recoil'</span>\r\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> todoListFilterState<span class=\"token punctuation\">,</span> todoListState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./state/todoListState'</span>\r\n\r\n<span class=\"token keyword\">const</span> filteredTodoListState <span class=\"token operator\">=</span> <span class=\"token function\">selector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\r\n  <span class=\"token literal-property property\">key</span><span class=\"token operator\">:</span> <span class=\"token string\">'FilteredTodoList'</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> get <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">const</span> filter <span class=\"token operator\">=</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>todoListFilterState<span class=\"token punctuation\">)</span>\r\n    <span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>todoListState<span class=\"token punctuation\">)</span>\r\n\r\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>filter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n      <span class=\"token keyword\">case</span> <span class=\"token string\">'Show Completed'</span><span class=\"token operator\">:</span>\r\n        <span class=\"token keyword\">return</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> item<span class=\"token punctuation\">.</span>isComplete<span class=\"token punctuation\">)</span>\r\n      <span class=\"token keyword\">case</span> <span class=\"token string\">'Show Uncompleted'</span><span class=\"token operator\">:</span>\r\n        <span class=\"token keyword\">return</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">!</span>item<span class=\"token punctuation\">.</span>isComplete<span class=\"token punctuation\">)</span>\r\n      <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\r\n        <span class=\"token keyword\">return</span> list\r\n    <span class=\"token punctuation\">}</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> filteredTodoListState <span class=\"token punctuation\">}</span></code></pre></div>\n<p><a href=\"https://recoiljs.org/docs/api-reference/core/selector/\">Selector 세부 문서</a></p>\n<ul>\n<li><strong>get</strong><br>\nget 속성은 get 함수를 내부적으로 전달받으며, 전달 받은 get 함수를 통해 다른 <strong>atoms</strong>나 <strong>selectors</strong>를 구독할 수 있다.<br>\n위의 예시에서 filteredTodoListState 는 <code class=\"language-text\">todoListFilterState</code>와 <code class=\"language-text\">todoListState</code>를 구독하고 있다.</li>\n</ul>\n<h2 id=\"21-selectors-읽기\" style=\"position:relative;\"><a href=\"#21-selectors-%EC%9D%BD%EA%B8%B0\" aria-label=\"21 selectors 읽기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.1. Selectors 읽기</h2>\n<p>atoms와 동일하게 컴포넌트 단에서 <code class=\"language-text\">useRecoilValue</code>를 이용해서 값을 참조할 수 있다.</p>\n<p>말했던 것처럼 soure of truth는 atom이고, selector는 atom으로부터 파생된 값이다. 따라서 아래 예시에서 <code class=\"language-text\">TodoListFilters</code>컴포넌트에서 <code class=\"language-text\">filter</code> atom이 수정되면, <code class=\"language-text\">filter</code>를 구독하는 <code class=\"language-text\">filteredTodoListState</code>도 자동으로 수정된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useRecoilState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'recoil'</span>\r\n<span class=\"token keyword\">import</span> filteredTodoListState <span class=\"token keyword\">from</span> <span class=\"token string\">'./selectors/filteredTodoListState'</span>\r\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> filter <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./state/filteredTodoListState'</span>\r\n\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">TodoList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token comment\">// changed from todoListState to filteredTodoListState</span>\r\n  <span class=\"token keyword\">const</span> todoList <span class=\"token operator\">=</span> <span class=\"token function\">useRecoilValue</span><span class=\"token punctuation\">(</span>filteredTodoListState<span class=\"token punctuation\">)</span>\r\n\r\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\r\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\r\n      <span class=\"token operator\">&lt;</span>TodoListFilters <span class=\"token operator\">/</span><span class=\"token operator\">></span>\r\n      <span class=\"token operator\">&lt;</span>TodoItemCreator <span class=\"token operator\">/</span><span class=\"token operator\">></span>\r\n\r\n      <span class=\"token punctuation\">{</span>todoList<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">todoItem</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\r\n        <span class=\"token operator\">&lt;</span>TodoItem item<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>todoItem<span class=\"token punctuation\">}</span> key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>todoItem<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\r\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\r\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\r\n  <span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">TodoListFilters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>filter<span class=\"token punctuation\">,</span> setFilter<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useRecoilState</span><span class=\"token punctuation\">(</span>todoListFilterState<span class=\"token punctuation\">)</span>\r\n\r\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">updateFilter</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">target</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> value <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token function\">setFilter</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\r\n  <span class=\"token punctuation\">}</span>\r\n\r\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\r\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\r\n      <span class=\"token literal-property property\">Filter</span><span class=\"token operator\">:</span>\r\n      <span class=\"token operator\">&lt;</span>select value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>filter<span class=\"token punctuation\">}</span> onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>updateFilter<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\r\n        <span class=\"token operator\">&lt;</span>option value<span class=\"token operator\">=</span><span class=\"token string\">\"Show All\"</span><span class=\"token operator\">></span>All<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>option<span class=\"token operator\">></span>\r\n        <span class=\"token operator\">&lt;</span>option value<span class=\"token operator\">=</span><span class=\"token string\">\"Show Completed\"</span><span class=\"token operator\">></span>Completed<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>option<span class=\"token operator\">></span>\r\n        <span class=\"token operator\">&lt;</span>option value<span class=\"token operator\">=</span><span class=\"token string\">\"Show Uncompleted\"</span><span class=\"token operator\">></span>Uncompleted<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>option<span class=\"token operator\">></span>\r\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>select<span class=\"token operator\">></span>\r\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\r\n  <span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"22-selectors-수정하기\" style=\"position:relative;\"><a href=\"#22-selectors-%EC%88%98%EC%A0%95%ED%95%98%EA%B8%B0\" aria-label=\"22 selectors 수정하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.2. Selectors 수정하기</h2>\n<p><a href=\"https://recoiljs.org/docs/api-reference/core/selector/\">Selector가 set 속성을 가질 때만 수정할 수 있다.</a></p>\n<ol>\n<li>이미 선언된 아톰을 구독하고 있다가 함수를 실행</li>\n<li>서버와의 비동기적인 통신이 가능</li>\n</ol>\n<p>비동기 suspense, loadble 알아보기\r\nrecoil은 데이터를 캐싱함!!!</p>\n<ol>\n<li>\n<p>구독중인 state가 변경</p>\n</li>\n<li>\n<p>요청 파라미터가 새로운 값으로 바뀐경우 (파라미터를 하나 더 만들고</p>\n</li>\n<li>\n<p><a href=\"https://www.youtube.com/watch?v=7nwpEiSpPqY\">https://www.youtube.com/watch?v=7nwpEiSpPqY</a>)</p>\n</li>\n<li>\n<p>19:50</p>\n</li>\n<li>\n<p>내 이벤트는 명시적 업데이트</p>\n</li>\n<li>\n<p>아닌 것은 실시간/주기적 업데이트 : 시간 같은 것을 파라미터를 줌.</p>\n</li>\n</ol>\n<p>이제는 캐싱을 안하는 법이 나온 것 같음. 알아보기</p>\n<h1 id=\"3-asynchronous\" style=\"position:relative;\"><a href=\"#3-asynchronous\" aria-label=\"3 asynchronous permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Asynchronous</h1>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#1-atoms\">1. Atoms</a></p>\n<ul>\n<li><a href=\"#11-atoms-%EC%83%9D%EC%84%B1\">1.1. Atoms 생성</a></li>\n<li><a href=\"#12-atoms-%EC%9D%BD%EA%B8%B0\">1.2. Atoms 읽기</a></li>\n<li><a href=\"#13-atoms-%EC%88%98%EC%A0%95\">1.3. Atoms 수정</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#2-selectors\">2. Selectors</a></p>\n<ul>\n<li><a href=\"#21-selectors-%EC%83%9D%EC%84%B1\">2.1. Selectors 생성</a></li>\n<li><a href=\"#21-selectors-%EC%9D%BD%EA%B8%B0\">2.1. Selectors 읽기</a></li>\n<li><a href=\"#22-selectors-%EC%88%98%EC%A0%95%ED%95%98%EA%B8%B0\">2.2. Selectors 수정하기</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#3-asynchronous\">3. Asynchronous</a></p>\n</li>\n</ul>","frontmatter":{"createdAt":"2023-05-02","isCompleted":true,"reference":"Recoil 공식문서: https://recoiljs.org/ko/docs/basic-tutorial/atoms","title":"04. Recoil","updatedAt":"2023-06-05"}},"allMarkdownRemark":{"nodes":[{"id":"c0f1d190-d9c5-515b-9c3e-fe351ead488a","parent":{"id":"8f02b54c-abd9-5fa6-b214-5a4d0b13d5c6","name":"00_React_Initial_Setting","relativePath":"React/00_React_Initial_Setting.md"},"frontmatter":{"title":"00. React 초기 셋팅 정리","createdAt":"2023-04-23","updatedAt":"2023-04-28"},"excerpt":"추후 참고하기 위해, 반복되는 리액트 초기 셋팅 작업을 공식문서를 기반하여 정리한 문서입니다. 1. Create React App 2. eslint & prettier 2.1. eslint 2.2. prettier 3. React Router…"},{"id":"7099aca6-8afd-5588-b84d-83553899916e","parent":{"id":"5311f33a-5afd-5b7b-9f08-2068ff49f92e","name":"02_React_Context_API","relativePath":"React/02_React_Context_API.md"},"frontmatter":{"title":"02. React Context API","createdAt":"2023-05-02","updatedAt":"2023-05-08"},"excerpt":"1. Context 1.1. Props와 비교 1.2. 사용 예시 2. useReducer 1.1. 개념 1.2. 예시 (원시 타입) 1.3. 예시(참조타입) 1. Context…"},{"id":"c0f082af-77c2-5f31-bf53-6a2ba6028a4a","parent":{"id":"d970c1f6-b4ae-520e-93d4-28e9253e5760","name":"03_React_Redux_Toolkit","relativePath":"React/03_React_Redux_Toolkit.md"},"frontmatter":{"title":"03. React & Redux Toolkit","createdAt":"2023-05-02","updatedAt":"2023-05-08"},"excerpt":"1. Redux Toolkit 기본 사용 2. Redux Toolkit 비동기 2.1. 목표 2.2. createAsyncThunk 실전 예제 1. Redux Toolkit 기본 사용 Slice 생성\r\nslice…"},{"id":"ea64eaa9-7187-5055-b7ba-033fddba7549","parent":{"id":"c76c5785-6d82-5786-891b-9d7cddccb0fa","name":"04_React_Recoil","relativePath":"React/04_React_Recoil.md"},"frontmatter":{"title":"04. Recoil","createdAt":"2023-05-02","updatedAt":"2023-06-05"},"excerpt":"Recoil 공식문서의 내용을 정리했습니다. 1. Atoms 1.1. Atoms 생성 1.2. Atoms 읽기 1.3. Atoms 수정 2. Selectors 2.1. Selectors 생성 2.1. Selectors 읽기 2.2. Selectors…"}]}},"pageContext":{"pagePath":"posts/React/04_React_Recoil.md","regex":"/^(?!.*README).*React.*$/","id":"ea64eaa9-7187-5055-b7ba-033fddba7549","parent":{"id":"c76c5785-6d82-5786-891b-9d7cddccb0fa","name":"04_React_Recoil","relativeDirectory":"React","relativePath":"React/04_React_Recoil.md"}}},"staticQueryHashes":["3300660363","3571427910","82772122"],"slicesMap":{}}