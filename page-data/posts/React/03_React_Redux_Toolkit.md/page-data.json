{"componentChunkName":"component---src-templates-post-tsx","path":"/posts/React/03_React_Redux_Toolkit.md/","result":{"data":{"markdownRemark":{"id":"c0f082af-77c2-5f31-bf53-6a2ba6028a4a","html":"<h1>Redux Toolkit</h1>\n<ul>\n<li><a href=\"#redux-toolkit\">Redux Toolkit</a></li>\n<li><a href=\"#1-redux-toolkit-%EA%B8%B0%EB%B3%B8-%EC%82%AC%EC%9A%A9\">1. Redux Toolkit 기본 사용</a></li>\n<li><a href=\"#2-redux-toolkit-%EB%B9%84%EB%8F%99%EA%B8%B0\">2. Redux Toolkit 비동기</a>\n<ul>\n<li><a href=\"#21-%EB%AA%A9%ED%91%9C\">2.1. 목표</a></li>\n<li><a href=\"#22-createasyncthunk\">2.2. createAsyncThunk</a></li>\n<li><a href=\"#%EC%8B%A4%EC%A0%84-%EC%98%88%EC%A0%9C\">실전 예제</a></li>\n</ul>\n</li>\n</ul>\n<h1>1. Redux Toolkit 기본 사용</h1>\n<ul>\n<li>\n<p><strong>Slice 생성</strong>\r\nslice는 하나의 데이터에 대한 작은 저장소라고 생각할 수 있다.</p>\n<pre><code class=\"language-js\">import { createSlice } from '@reduxjs/toolkit'\r\n\r\n// useReducer와 비슷하게 초깃갓과, reducer을 전달\r\nconst counterSlice = createSlice({\r\n  name: 'cntSlice',\r\n  initialState: { value: 0 },\r\n  reducers: {\r\n    // 각가의 reducer가 하나의 type에 대응\r\n    up: (state, action) => {\r\n      // 1) 액션 크리에이터를 사용할 경우\r\n      state.value = state.value + action.payload\r\n      // 2) 액션 크리에이터를 사용하지 않을 경우\r\n      // state.value = state.value + action.step\r\n    },\r\n  },\r\n})\r\n\r\nexport default counterSlice\r\nexport const { up } = counterSlice.actions // action creator라고 부르며, 이를 통해 컴포넌트 단에서 더 간편한게 action을 생성할 수 있다.\n</code></pre>\n</li>\n<li>\n<p><strong>Store 생성</strong></p>\n<p>redux는 여러 개의 slice를 모아 단 하나의 store에서 관리한다.</p>\n<pre><code class=\"language-js\">import { configureStore } from '@reduxjs/toolkit'\r\nimport counterSlice from './counterSlice'\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    // 왜 reducer를 넣어주는지는 잘모르겠음..\r\n    counter: counterSlice.reducer, // 왼쪽이름이 나중에 state를 읽을 때 사용된다\r\n  },\r\n})\r\n\r\nexport default store\n</code></pre>\n</li>\n<li>\n<p><strong>Provider 생성</strong></p>\n<p>store값을 읽고자 하는 컴포넌트의 최상윗단에 Provider로 공급한다.</p>\n<pre><code class=\"language-js\">import { Provider } from 'react-redux'\r\nimport store from './store'\r\n\r\nexport default function App() {\r\n  return (\r\n    &#x3C;Provider store={store}>\r\n      &#x3C;Counter />\r\n    &#x3C;/Provider>\r\n  )\r\n}\n</code></pre>\n</li>\n<li>\n<p><strong>컴포넌트 사용</strong></p>\n<pre><code class=\"language-js\">import { useSelector, useDispatch } from 'react-redux'\r\nimport counterSlice, { up } from './counterSlice'\r\n\r\nexport default function Counter() {\r\n  // store로부터 상태를 읽어온다.\r\n  const count = useSelector((state) => {\r\n    return state.counter.value\r\n  })\r\n\r\n  // reducer를 발동시킬 dispatch\r\n  const dispatch = useDispatch()\r\n\r\n  function countUp() {\r\n    // 1. 액션 직접 입력\r\n    // dispatch({ type: 'cntSlice/up', step: 1 }) // type에서 slice의 name을 사용한다.\r\n\r\n    // 2. 액션 크리에이터 사용\r\n    dispatch(couterSlice.actions.up(2)) // 인자는 자동으로 payload라는 값에 담겨서 감\r\n\r\n    // 3. 액션 크리에이터 사용\r\n    dispatch(up(2)) // 인자는 자동으로 payload라는 값에 담겨서 감\r\n  }\r\n\r\n  return (\r\n    &#x3C;div>\r\n      {count}\r\n      &#x3C;button onClick={countUp}>+&#x3C;/button>\r\n    &#x3C;/div>\r\n  )\r\n}\n</code></pre>\n</li>\n</ul>\n<h1>2. Redux Toolkit 비동기</h1>\n<p>리덕스 툴킷 안에 이미 Thunk라는 기능이 내장되어있어 비동기 reducer를 생성할 수 있다.</p>\n<h2>2.1. 목표</h2>\n<p>동기적 reducer로도 아래처럼 비동기적인 state업데이트를 구현할 수능 있다.</p>\n<pre><code class=\"language-js\">const status = useSelector((state)=> {\r\n  return state.counter.status\r\n})\r\nconst value = useSelector((state)=> {\r\n  return state.counter.value\r\n})\r\n\r\n// 비동기 요청의 반환 값을 받은 뒤, state를 동기 reducer로 업데이트한다.\r\nasync function fetchValue() {\r\n  const res = await fetch('https://api/example')\r\n  const data = await res.json()\r\n  dispatch(set(data.value))\r\n}\r\n\r\nreturn (\r\n&#x3C;div>{count} | {status}&#x3C;/div>\r\n&#x3C;button onClick={fetchValue}>데이터 가져오기&#x3C;/button>\r\n)\n</code></pre>\n<p>하지만 코드의 불필요한 중복을 줄이고 유지 보수를 용이하게 하기 위해서, 아래처럼 비동기 로직을 reducer 자체에 포함시키고자 한다.</p>\n<pre><code class=\"language-js\">const status = useSelector((state)=> {\r\n  return state.counter.status\r\n})\r\nconst vlaue = useSelector((state)=> {\r\n  return state.counter.value\r\n})\r\n\r\nasync function fetchValue() {\r\n  dispatch(asyncFetchReducer()) // 비동기 reducer 호출\r\n}\r\n\r\nreturn (\r\n&#x3C;div>{count} | {status}&#x3C;/div>\r\n&#x3C;button onClick={fetchValue}>데이터 가져오기&#x3C;/button>\r\n)\n</code></pre>\n<h2>2.2. createAsyncThunk</h2>\n<p>createAsyncThunk를 통해 비동기 함수를 처리하는 액션을 만들다. action creater**</p>\n<pre><code class=\"language-js\">const asyncUpFetch = createAsyncThunk(\r\n  'counterSlice/asyncUpFetch', // 타입 정의\r\n  async () => {\r\n    const resp = await fetch('https://api/example')\r\n    const data = await resp.json()\r\n    return data.value\r\n  }\r\n)\n</code></pre>\n<pre><code class=\"language-js\">const counterSlice = createSlice({\r\n  name: 'counterSlice',\r\n  initialState: {\r\n    value: 0,\r\n    status: 'Welcome',\r\n  },\r\n  // createAsyncThunk가 만들어주는 3가지 상태에 대한 리듀서를 정의\r\n  // 실제 reducer 함수는 두번째 인자로 넘겨준다.\r\n  extraReducers: (builder) => {\r\n    builder.addCase(asyncUpFetch.pending, (state, action) => {\r\n      state.status = 'Loading'\r\n    })\r\n    builder.addCase(asyncUpFetch.fullfilled, (state, action) => {\r\n      state.status = action.payload // payload라는 약속된 값으로 위의 코드의 리턴값이 전달됨(data.value)\r\n      state.status = 'complete'\r\n    })\r\n    builder.addCase(asyncUpFetch.pending, (state, action) => {\r\n      state.status = 'fail'\r\n    })\r\n  },\r\n})\n</code></pre>\n<p>동기와 비동기 reducers\r\n동기적인 작업은 reducers -> 툴킷이 액션 크리에이터를 자동으로 만들어줌\r\n비동기적인 작업은 extraReducers -> 툴킷이 액션 크리에이터를 자동으로 만들어주지 못함.</p>\n<pre><code class=\"language-js\">const counterSlice = createSlice({\r\n  name: 'cntSlice',\r\n  initialState: { value: 0, status: 'Welcome' },\r\n  reducers: {\r\n    up: (state, action) => {\r\n      //   state.value = state.value + action.step\r\n      state.value = state.value + action.payload\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(asyncUpFetch.fullfilled, (state, action) => {\r\n      state.value = state.value + action.payload // payload는 액션의 결과가 온다\r\n      state.status = 'complete'\r\n    })\r\n  },\r\n})\n</code></pre>\n<h2>실전 예제</h2>\n<pre><code class=\"language-js\">// counterSlice\r\n\r\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\r\n\r\nconst asyncUpFetch = createAsyncThunk('counterSlice/asyncUpFetch', async () => {\r\n  const resp = await fetch('https://api/example')\r\n  const data = await resp.json()\r\n  return data.value\r\n})\r\n\r\nconst counterSlice = createSlice({\r\n  name: 'counterSlice',\r\n  initialState: {\r\n    value: 0,\r\n    status: 'Welcome',\r\n  },\r\n  reducers: {\r\n    up: (state, action) => {\r\n      state.value = state.value + action.payload\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(asyncUpFetch.pending, (state, action) => {\r\n      state.status = 'Loading'\r\n    })\r\n    builder.addCase(asyncUpFetch.fullfilled, (state, action) => {\r\n      state.status = action.payload // payload라는 약속된 값으로 위의 코드의 리턴값이 전달됨(data.value)\r\n      state.status = 'complete'\r\n    })\r\n    builder.addCase(asyncUpFetch.pending, (state, action) => {\r\n      state.status = 'fail'\r\n    })\r\n  },\r\n})\n</code></pre>\n<pre><code class=\"language-js\">// Counter.js\r\nimport React from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { up, asyncUpFetch } from './counterSlice'\r\n\r\nfunction Counter() {\r\n  const dispatch = useDisptch()\r\n  const count = useSelector((state) => {\r\n    return state.counter.value\r\n  })\r\n  const status = useSelector((state) => {\r\n    return state.counter.status\r\n  })\r\n\r\n  return (\r\n    &#x3C;div>\r\n      &#x3C;div>\r\n        {' '}\r\n        {count} | {status}{' '}\r\n      &#x3C;/div>\r\n      &#x3C;button onClick={() => dispatch(up(2))}>count up&#x3C;/button>\r\n      &#x3C;button onClick={() => dispatch(asyncUpFetch(2))}>fetch count&#x3C;/button>\r\n    &#x3C;/div>\r\n  )\r\n}\n</code></pre>"}},"pageContext":{"pagePath":"posts/React/03_React_Redux_Toolkit.md","id":"c0f082af-77c2-5f31-bf53-6a2ba6028a4a","parent":{"id":"d970c1f6-b4ae-520e-93d4-28e9253e5760","name":"03_React_Redux_Toolkit","relativePath":"React/03_React_Redux_Toolkit.md"}}},"staticQueryHashes":["1274812890","3935499650","82772122"],"slicesMap":{}}