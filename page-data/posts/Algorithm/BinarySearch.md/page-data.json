{"componentChunkName":"component---src-templates-post-index-tsx","path":"/posts/Algorithm/BinarySearch.md/","result":{"data":{"markdownRemark":{"id":"ff6459b0-68d5-5d84-954e-3a1565353b52","html":"<h1 id=\"1-개요\" style=\"position:relative;\"><a href=\"#1-%EA%B0%9C%EC%9A%94\" aria-label=\"1 개요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 개요</h1>\n<p><strong>정렬된 데이터</strong>에서 검색 범위를 줄여 나가면서 목적 값을 찾는 알고리즘이다. 데이터가 <strong>정렬</strong>되어 있을 경우, 데이터를 크기가 같은 두 부분으로 나누고 유효한 데이터집합을 선</p>\n<h2 id=\"11-특징\" style=\"position:relative;\"><a href=\"#11-%ED%8A%B9%EC%A7%95\" aria-label=\"11 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.1. 특징</h2>\n<ul>\n<li>루트 노드(상태)로부터 리프 노드(상태)까지 길이가 유한할 때만 사용가능하다.</li>\n<li>노드 탐색 순서가 재귀적으로 표현될 때 적합하다.</li>\n</ul>\n<h1 id=\"2-동작\" style=\"position:relative;\"><a href=\"#2-%EB%8F%99%EC%9E%91\" aria-label=\"2 동작 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 동작</h1>\n<ol>\n<li>데이터의 중간 값을 찾는다.</li>\n<li>중간 값과 검색 값을 비교한다.\n<ol>\n<li>중간 값이 검색 값이 같을 경우, 종료한다.</li>\n<li>중간 값이 검색 값보다 클 경우, 중간 값 기준 데이터의 왼쪽을 탐색한다.</li>\n<li>중간 값이 검색 값보다 작을 경우, 중간 값 기준 데이터의 오른쪽을 탐색한다.</li>\n</ol>\n</li>\n<li>데이터가 없을 경우 종료한다.</li>\n</ol>\n<h1 id=\"3-시간-복잡도\" style=\"position:relative;\"><a href=\"#3-%EC%8B%9C%EA%B0%84-%EB%B3%B5%EC%9E%A1%EB%8F%84\" aria-label=\"3 시간 복잡도 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 시간 복잡도</h1>\n<p><strong>O(logN)</strong>\r\n데이터를 계속해서 이분하며 탐색해나간다.</p>\n<h1 id=\"4-구현\" style=\"position:relative;\"><a href=\"#4-%EA%B5%AC%ED%98%84\" aria-label=\"4 구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 구현</h1>\n<ul>\n<li>\n<p><strong>Python 코드</strong><br>\n단순히 모든 노드를 완전탐색하는 DFS 알고리즘이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">  <span class=\"token keyword\">def</span> <span class=\"token function\">binary_search</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n      first <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\r\n      last <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\r\n\r\n      <span class=\"token comment\"># 데이터 범위가 있는 한 계속 탐색</span>\r\n      <span class=\"token keyword\">while</span> first <span class=\"token operator\">&lt;=</span> last<span class=\"token punctuation\">:</span>\r\n          mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>first <span class=\"token operator\">+</span> last<span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> <span class=\"token number\">2</span>\r\n\r\n          <span class=\"token keyword\">if</span> arr<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> val<span class=\"token punctuation\">:</span> <span class=\"token comment\"># 검색 값을 찾았을 경우</span>\r\n              <span class=\"token keyword\">return</span> mid\r\n\r\n          <span class=\"token keyword\">if</span> arr<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> val<span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 검색 값이 중간값보다 작은 경우</span>\r\n              last <span class=\"token operator\">=</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\r\n\r\n          <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>               <span class=\"token comment\"># 검색 값이 중간값보다 큰 경우</span>\r\n              first <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\r\n      <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>   <span class=\"token comment\"># 검색 값을 찾지 못했을 경우</span></code></pre></div>\n</li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#1-%EA%B0%9C%EC%9A%94\">1. 개요</a></p>\n<ul>\n<li><a href=\"#11-%ED%8A%B9%EC%A7%95\">1.1. 특징</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#2-%EB%8F%99%EC%9E%91\">2. 동작</a></p>\n</li>\n<li>\n<p><a href=\"#3-%EC%8B%9C%EA%B0%84-%EB%B3%B5%EC%9E%A1%EB%8F%84\">3. 시간 복잡도</a></p>\n</li>\n<li>\n<p><a href=\"#4-%EA%B5%AC%ED%98%84\">4. 구현</a></p>\n</li>\n</ul>","frontmatter":{"createdAt":"2023-04-11","isCompleted":true,"reference":null,"title":"이진탐색(Binary Search) 알고리즘","updatedAt":"2023-04-11"}}},"pageContext":{"pagePath":"posts/Algorithm/BinarySearch.md","id":"ff6459b0-68d5-5d84-954e-3a1565353b52","parent":{"id":"0ed4d430-3364-59b1-81d8-2add31072348","name":"BinarySearch","relativePath":"Algorithm/BinarySearch.md"}}},"staticQueryHashes":["2123968258","3571427910","82772122"],"slicesMap":{}}