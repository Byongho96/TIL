{"componentChunkName":"component---src-templates-post-group-tsx","path":"/posts/Algorithm/","result":{"data":{"allMarkdownRemark":{"nodes":[{"id":"ff6459b0-68d5-5d84-954e-3a1565353b52","parent":{"id":"0ed4d430-3364-59b1-81d8-2add31072348","name":"BinarySearch","relativePath":"Algorithm/BinarySearch.md"},"frontmatter":{"title":""},"excerpt":"Binary Search 1. 개요 정렬된 데이터에서 검색 범위를 줄여 나가면서 목적 값을 찾는 알고리즘이다. 데이터가 정렬되어 있을 경우, 데이터를 크기가 같은 두 부분으로 나누고 유효한 데이터집합을 선 1.…"},{"id":"3a4b2e18-1298-5318-ba3d-367c5264afaf","parent":{"id":"42162e1e-42f8-5384-9248-b7a8cee98455","name":"DFS","relativePath":"Algorithm/DFS.md"},"frontmatter":{"title":""},"excerpt":"Depth First Search 1. 개요 상태공간이나 그래프를 출발점에서 시작하여 모든 리프노드까지 순서대로 탐색하는 완전탐색 기반의 알고리즘이다. 1.…"},{"id":"304cd1e4-5045-51ed-bb74-5d6de909b0b3","parent":{"id":"01eaf46a-e882-5691-ba22-40b8841edb2c","name":"BFS","relativePath":"Algorithm/BFS.md"},"frontmatter":{"title":""},"excerpt":"Breadth First Search 1. 개요 상태공간이나 그래프를 출발점으로부터 가까운 순으로 탐색해가는 완전탐색 기반의 알고리즘이다. 1.…"},{"id":"d152b12a-0aec-5325-87ba-b9912faae2dd","parent":{"id":"982bfef7-ba07-5eb8-a421-444507bbca5f","name":"Dijkstra","relativePath":"Algorithm/Dijkstra.md"},"frontmatter":{"title":""},"excerpt":"Dijsktra 1. 개요 음의 가중치가 없는 그래프의 한 노드에서 다른 모드 노드까지의 최단거리를 각각 구하는 알고리즘. 대표적으로 사용되는 그리디 알고리즘이다.…"},{"id":"fe66208e-7fe6-5afb-a230-a5f12aa201e1","parent":{"id":"54b68164-06d2-5861-b5e4-0e5473d031a0","name":"DP","relativePath":"Algorithm/DP.md"},"frontmatter":{"title":""},"excerpt":"Dynamic Programming…"},{"id":"1bc47ab1-4e2f-5b9f-98d2-9e9863473a91","parent":{"id":"5a994e87-ef15-5f86-b3b4-630d75c93646","name":"Backtracking","relativePath":"Algorithm/Backtracking.md"},"frontmatter":{"title":""},"excerpt":"Backtracking 1. 개요 상태공간이나 그래프의 노드를 모두 탐색하는 완전탐색 기반의 알고리즘이다. 다만, 가지 치기를 통해 탐색할 필요성이 없는 노드(상태)들을 탐색 대상에서 제외함으로써 효율을 높인다.…"},{"id":"f3fa286d-64fa-5dfa-b43e-5772a9b71604","parent":{"id":"f0f6388e-222b-517a-918c-1d580e3dcf99","name":"Sorting","relativePath":"Algorithm/Sorting.md"},"frontmatter":{"title":""},"excerpt":"Sorting Algorithm  Index  1. Bubble Sort (거품 정렬) 1.1. 동작 과정 1.2. 복잡도 1.3. Python 구현 2. Selection Sort (선택 정렬) 2.1. 동작 과정 2.2. 복잡도 2.…"},{"id":"afaa0d6e-7d3c-5a97-a99c-0213c46b899d","parent":{"id":"bd2963c7-7771-553b-8a27-e7d18e30007d","name":"MST","relativePath":"Algorithm/MST.md"},"frontmatter":{"title":""},"excerpt":"Minimum Spanning Tree 1. 개요 신장 트리(Spanning Tree)는 그래프 내의 모든 노드를 포함하는 트리를 의미하며, **최소 신장 트리(Minimum Spanning Tree…"},{"id":"4c60d441-29cc-5f21-9145-7e084ed0bd4b","parent":{"id":"72ea03da-1e21-5f98-909a-87d55576caa1","name":"BFS_DFS_backtracking","relativePath":"Algorithm/First/BFS_DFS_backtracking.md"},"frontmatter":{"title":""},"excerpt":"모든 경로 탐색(가능 여부): DFS, BFS 경로의 수: DFS, (BFS) 최단거리 탐색: BFS, (DFS) 출발이 여러개: BFS BFS와 DFS 모두 반복의 경우, while과 for사이에서 visit(v) DFS…"},{"id":"05a6e0e7-adb0-5387-a88e-ebaec262b7eb","parent":{"id":"91e40e84-52a9-5dab-a8bb-2844cb1f33cf","name":"BruteForce_Greedy","relativePath":"Algorithm/First/BruteForce_Greedy.md"},"frontmatter":{"title":""},"excerpt":"0. Intro 알고리즘은 크게 2가지로 분류할 수 있다. 모든 경우의 수를 고려하여 최적해를 찾아내는 완전탐색(Brute-Force)기반 알고리즘, 그리고 지역적인 최적값 선택의 연속으로 전역적인 최적해를 찾아내는 탐욕(Greedy…"},{"id":"1426f5ab-d830-5c34-a917-54733d927dcc","parent":{"id":"d10f45b4-a7e5-5f2a-b679-b5158fcfa495","name":"Divide_Conquer","relativePath":"Algorithm/First/Divide_Conquer.md"},"frontmatter":{"title":""},"excerpt":"1. Merge Sort 2. Quick Sort Hoare-Partition Lomuto partition 3. Binary Search"},{"id":"548c8a15-1ef3-5374-8d87-aca626ec4ed6","parent":{"id":"3dec582b-52d7-5d8c-9048-61785ae8f22c","name":"List","relativePath":"Algorithm/First/List.md"},"frontmatter":{"title":""},"excerpt":"1. Algorithm The procedure to solve the problem Pseudo code or Flow chart Good Algorithm accuracy time(the amount of operations) memory…"},{"id":"a5b23b3e-57d7-5256-aad0-1959aa72a9f7","parent":{"id":"32062b56-a944-51a7-bc23-f518f65563f6","name":"Tree","relativePath":"Algorithm/First/Tree.md"},"frontmatter":{"title":""},"excerpt":"Tree 1. Definition 1-1. Characteristic Non-linear Data Structure one data -> N data Hierarchical Structure 1-2. terms node elements of the…"},{"id":"f2a7b08b-7678-531c-8d95-91c659a104ac","parent":{"id":"edd944a5-b4ce-5d7f-a1e0-0f22b11c80ab","name":"String","relativePath":"Algorithm/First/String.md"},"frontmatter":{"title":""},"excerpt":"1. String Even strings are stored as 0 abd 1 .jpg/.mp4/.doc ...: all the file has its own encoding rule (binary data) <-> (desirable data)…"},{"id":"fc8ff0c5-29ea-5eb5-bf6c-6e6581d2b490","parent":{"id":"9b9317ef-8c34-5ddf-937b-58385d4ddd1f","name":"Stack","relativePath":"Algorithm/First/Stack.md"},"frontmatter":{"title":""},"excerpt":"Stack 1. Property linear data structure one data -> another data LIFO(Last-In-First-Out) 2. Operators push(obj) top += 1 top: pointer for…"},{"id":"0ef6d409-eed6-57e9-9233-7ea61e94b5b3","parent":{"id":"eca6d33b-f9a8-5fb7-8cbb-bef1fb1654bd","name":"Backtracking","relativePath":"Algorithm/First/Backtracking.md"},"frontmatter":{"title":""},"excerpt":"Backtracking : similar to ==DFS but reduce the number of cases== with appropriate condtion(pruning) Recursive function: when the depth is…"}]}},"pageContext":{"pagePath":"posts/Algorithm","regex":"/^(?!.*README).*Algorithm.*$/","id":"eb5459d8-9799-5c75-95c0-75b19da55713","name":"Algorithm","relativeDirectory":"","relativePath":"Algorithm"}},"staticQueryHashes":["1274812890","3935499650","82772122"],"slicesMap":{}}