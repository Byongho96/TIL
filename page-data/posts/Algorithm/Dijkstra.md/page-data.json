{"componentChunkName":"component---src-templates-post-index-tsx","path":"/posts/Algorithm/Dijkstra.md/","result":{"data":{"markdownRemark":{"id":"fcf42254-8ace-55b3-8e66-f9962c385268","html":"<h1 id=\"1-개요\" style=\"position:relative;\"><a href=\"#1-%EA%B0%9C%EC%9A%94\" aria-label=\"1 개요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 개요</h1>\n<p>음의 가중치가 없는 그래프의 한 노드에서 다른 모드 노드까지의 최단거리를 각각 구하는 알고리즘. 대표적으로 사용되는 <strong>그리디 알고리즘</strong>이다.</p>\n<h1 id=\"2-동작\" style=\"position:relative;\"><a href=\"#2-%EB%8F%99%EC%9E%91\" aria-label=\"2 동작 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 동작</h1>\n<ol>\n<li>시작 노드를 선정한다.</li>\n<li>방문하지 않은 노드 중 가장 가까운 노드를 선택한다.</li>\n<li>선택된 노드를 방문하고, 인접 노드들의 거리를 갱신한다.</li>\n<li>모든 노드를 방문할 때까지 2~3의 과정을 반복한다.</li>\n</ol>\n<h1 id=\"3-시간-복잡도\" style=\"position:relative;\"><a href=\"#3-%EC%8B%9C%EA%B0%84-%EB%B3%B5%EC%9E%A1%EB%8F%84\" aria-label=\"3 시간 복잡도 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 시간 복잡도</h1>\n<p>V: 노드의 갯수\nE: 간선의 갯수</p>\n<h2 id=\"31-basic\" style=\"position:relative;\"><a href=\"#31-basic\" aria-label=\"31 basic permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.1. Basic</h2>\n<p>동작 과정 2번에 의해 시간복잡도가 결정된다.</p>\n<ul>\n<li><strong>O(V^2)</strong><br>\nV개의 노드 중 가장 가까운 노드를 선형탐색하는 과정이 V번 수행 된다.</li>\n</ul>\n<h2 id=\"32-with-heap\" style=\"position:relative;\"><a href=\"#32-with-heap\" aria-label=\"32 with heap permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.2. with Heap</h2>\n<p>heap을 사용할 경우, 시간복잡도 결정인자가 노드 갯수(V)에서 간선 갯수(E)로 바뀐다. 하지만 고전된 노드 갯수에 대해 가장 많은 간선을 가진 완전그래프를 고려하더라도 V와 E는 다음과 관계가 성립한다.\n<code class=\"language-text\">V &lt;= E(E-1)/2</code>\n<code class=\"language-text\">V &lt; E^2</code></p>\n<ul>\n<li><strong>O(E*logV)</strong><br>\nE개의 간선을 힙에 넣고 빼는 과정이 E번 이루어진다.\n<code class=\"language-text\">O(E*logE)</code>\n<code class=\"language-text\">O(E*log(V^2))</code>\n<code class=\"language-text\">O(2*E*logV)</code>\n<code class=\"language-text\">O(E*logV)</code></li>\n</ul>\n<h1 id=\"4-구현\" style=\"position:relative;\"><a href=\"#4-%EA%B5%AC%ED%98%84\" aria-label=\"4 구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 구현</h1>\n<h2 id=\"41-basic\" style=\"position:relative;\"><a href=\"#41-basic\" aria-label=\"41 basic permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.1. Basic</h2>\n<ul>\n<li>\n<p><strong>Python 코드</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token triple-quoted-string string\">'''\nV     : 노드 갯수\nstart : 시작 노드\nadjLst: 특정 노드의 인접 노드들과 가중치를 알 수 있는 컨테이너 자료\n'''</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">dijkstra</span><span class=\"token punctuation\">(</span>V<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> adjLst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\"># 초깃값 셋팅</span>\n  distance <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>INF<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>V<span class=\"token punctuation\">)</span>      <span class=\"token comment\"># 시작점부터 다른 노드까지의 거리</span>\n  visited <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>V<span class=\"token punctuation\">)</span>     <span class=\"token comment\"># 거리 계산 완료 여부</span>\n\n  <span class=\"token comment\"># 시작점 지정</span>\n  distance<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n  <span class=\"token comment\"># 메인 코드</span>\n  <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>V<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      <span class=\"token comment\"># 거리 계산이 완료되지 않은 노드 중 가장 가까운 노드 선정</span>\n      mn <span class=\"token operator\">=</span> INF\n      nearest <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n      <span class=\"token keyword\">for</span> node <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>V<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n          <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> visited<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span> <span class=\"token keyword\">and</span> distance<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> mn<span class=\"token punctuation\">:</span>\n              mn <span class=\"token operator\">=</span> distance<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span>\n              nearest <span class=\"token operator\">=</span> node\n\n      visited<span class=\"token punctuation\">[</span>nearest<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>    <span class=\"token comment\"># 해당 노드 거리 확정</span>\n\n      <span class=\"token comment\"># 새로 거리 확정된 노드의 인접 노드들 거리 갱신</span>\n      <span class=\"token keyword\">for</span> adj<span class=\"token punctuation\">,</span> weight <span class=\"token keyword\">in</span> adjLst<span class=\"token punctuation\">[</span>nearest<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n          <span class=\"token comment\"># if not visited[adj]:</span>\n          distance<span class=\"token punctuation\">[</span>adj<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>distance<span class=\"token punctuation\">[</span>adj<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> distance<span class=\"token punctuation\">[</span>nearest<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> weight<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> distance</code></pre></div>\n</li>\n</ul>\n<h2 id=\"42-with-heap\" style=\"position:relative;\"><a href=\"#42-with-heap\" aria-label=\"42 with heap permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.2. with Heap</h2>\n<ul>\n<li>\n<p><strong>Python 코드</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token triple-quoted-string string\">'''\nV     : 노드 갯수\nstart : 시작 노드\nadjLst: 특정 노드의 인접 노드들과 가중치를 알 수 있는 컨테이너 자료\n'''</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">dijkstra</span><span class=\"token punctuation\">(</span>V<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> adjLst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token comment\"># 초깃값 셋팅</span>\ndistance <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>INF<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>V<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># 시작점부터 다른 노드까지의 거리</span>\n\n<span class=\"token comment\"># 시작점 지정</span>\nheap <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\nheapq<span class=\"token punctuation\">.</span>heappush<span class=\"token punctuation\">(</span>heap<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\ndistance<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n<span class=\"token keyword\">while</span> heap<span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 힙에서 가장 낮은 가중치를 가진 노드를 heap에서 pop</span>\n    dist<span class=\"token punctuation\">,</span> nearest <span class=\"token operator\">=</span> heapq<span class=\"token punctuation\">.</span>heappop<span class=\"token punctuation\">(</span>heap<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 이미 거리 계산이 완료된 노드 무시하기: Basic Dijkstra에서 visited 배열을 기능을 담당</span>\n    <span class=\"token keyword\">if</span> distance<span class=\"token punctuation\">[</span>nearest<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> dist<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">continue</span>\n\n    <span class=\"token comment\"># 해당 노드 거리가 확정되는 시점</span>\n\n    <span class=\"token comment\"># 인접 노드들의 거리 재계산하여 heap에 push</span>\n    <span class=\"token keyword\">for</span> adj<span class=\"token punctuation\">,</span> weight <span class=\"token keyword\">in</span> adjLst<span class=\"token punctuation\">[</span>nearest<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        new_dist <span class=\"token operator\">=</span> dist <span class=\"token operator\">+</span> weight\n        <span class=\"token keyword\">if</span> new_dist <span class=\"token operator\">&lt;</span> distance<span class=\"token punctuation\">[</span>adj<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            distance<span class=\"token punctuation\">[</span>adj<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> new_dist\n            heapq<span class=\"token punctuation\">.</span>heappush<span class=\"token punctuation\">(</span>heap<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>new_dist<span class=\"token punctuation\">,</span> adj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">return</span> distance</code></pre></div>\n</li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#1-%EA%B0%9C%EC%9A%94\">1. 개요</a></p>\n</li>\n<li>\n<p><a href=\"#2-%EB%8F%99%EC%9E%91\">2. 동작</a></p>\n</li>\n<li>\n<p><a href=\"#3-%EC%8B%9C%EA%B0%84-%EB%B3%B5%EC%9E%A1%EB%8F%84\">3. 시간 복잡도</a></p>\n<ul>\n<li><a href=\"#31-basic\">3.1. Basic</a></li>\n<li><a href=\"#32-with-heap\">3.2. with Heap</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#4-%EA%B5%AC%ED%98%84\">4. 구현</a></p>\n<ul>\n<li><a href=\"#41-basic\">4.1. Basic</a></li>\n<li><a href=\"#42-with-heap\">4.2. with Heap</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"createdAt":"2023-02-27","isCompleted":true,"reference":null,"title":"다익스트라(Dijkstra) 알고리즘","updatedAt":"2023-04-17"}},"allMarkdownRemark":{"nodes":[{"id":"5730a298-a25c-588f-a6ef-5e10feb229b6","parent":{"id":"fcdc817f-f629-57c5-863f-078018f1d9e1","name":"DFS","relativePath":"Algorithm/DFS.md"},"frontmatter":{"title":"깊이 우선 탐색(Depth-First Search) 알고리즘","createdAt":"2023-03-14","updatedAt":"2023-04-17"},"excerpt":"1. 개요 상태공간이나 그래프를 출발점에서 시작하여 모든 리프노드까지 순서대로 탐색하는 완전탐색 기반의 알고리즘이다. 1.…"},{"id":"c9f173ac-3763-5e1f-903d-f3045c999d05","parent":{"id":"94b5e585-62f8-5fff-a8d4-98f30a84f8c6","name":"BFS","relativePath":"Algorithm/BFS.md"},"frontmatter":{"title":"너비 우선 탐색(Breadth-First Search) 알고리즘","createdAt":"2023-03-05","updatedAt":"2023-04-17"},"excerpt":"1. 개요 상태공간이나 그래프를 출발점으로부터 가까운 순으로 탐색해가는 완전탐색 기반의 알고리즘이다. 1.…"},{"id":"fcf42254-8ace-55b3-8e66-f9962c385268","parent":{"id":"1b85a26c-6412-557d-ab4c-d00a858a0b7c","name":"Dijkstra","relativePath":"Algorithm/Dijkstra.md"},"frontmatter":{"title":"다익스트라(Dijkstra) 알고리즘","createdAt":"2023-02-27","updatedAt":"2023-04-17"},"excerpt":"1. 개요 음의 가중치가 없는 그래프의 한 노드에서 다른 모드 노드까지의 최단거리를 각각 구하는 알고리즘. 대표적으로 사용되는 그리디 알고리즘이다.…"},{"id":"2d7e5c08-666d-53a3-8b7c-2e2d55bd48df","parent":{"id":"6ef9ac1a-1a41-53b9-b3e3-8411da4f71cd","name":"DP","relativePath":"Algorithm/DP.md"},"frontmatter":{"title":"동적 계획법(Dynamic Programming) 알고리즘","createdAt":"2023-03-27","updatedAt":"2023-04-03"},"excerpt":"…"},{"id":"e86fb310-e394-5424-873b-d2afa994cdb8","parent":{"id":"a2740d81-9401-5f82-9c13-188c6ce2daf2","name":"Backtracking","relativePath":"Algorithm/Backtracking.md"},"frontmatter":{"title":"백트래킹(Backtracking) 알고리즘","createdAt":"2022-08-23","updatedAt":"2023-04-17"},"excerpt":"1. 개요 상태공간이나 그래프의 노드를 모두 탐색하는 완전탐색 기반의 알고리즘이다. 다만, 가지 치기를 통해 탐색할 필요성이 없는 노드(상태)들을 탐색 대상에서 제외함으로써 효율을 높인다.…"},{"id":"2d8f000a-09e8-5d77-8cb7-ef17613eb250","parent":{"id":"c7144735-eeb2-5f34-aa77-fe40a9505ec5","name":"BinarySearch","relativePath":"Algorithm/BinarySearch.md"},"frontmatter":{"title":"이진탐색(Binary Search) 알고리즘","createdAt":"2023-04-11","updatedAt":"2023-04-11"},"excerpt":"1. 개요 정렬된 데이터에서 검색 범위를 줄여 나가면서 목적 값을 찾는 알고리즘이다. 데이터가 정렬되어 있을 경우, 데이터를 크기가 같은 두 부분으로 나누고 유효한 데이터집합을 선 1.…"},{"id":"8c82aef1-764e-58d7-9fd2-f112c22a7738","parent":{"id":"4d88a373-6547-5a1d-bd1a-f3bb4172bf10","name":"Sorting","relativePath":"Algorithm/Sorting.md"},"frontmatter":{"title":"정렬(Sorting) 알고리즘 정리","createdAt":"2023-05-02","updatedAt":"2023-05-03"},"excerpt":"면접에서 탈탈 털린 후 작성한 정렬 관련 알고리즘을 총정리 1. Bubble Sort (거품 정렬) 1.1. 동작 과정 1.2. 복잡도 1.3. Python 구현 2. Selection Sort (선택 정렬) 2.1. 동작 과정 2.2. 복잡도 2.…"},{"id":"7c9622db-f251-58ab-82a5-e205a525f4de","parent":{"id":"bff8b024-ecde-52e7-9534-055482414611","name":"MST","relativePath":"Algorithm/MST.md"},"frontmatter":{"title":"최소 신장 트리(Minimum Spaaning Tree) 알고리즘","createdAt":"2023-04-17","updatedAt":"2023-04-17"},"excerpt":"1. 개요 신장 트리(Spanning Tree)는 그래프 내의 모든 노드를 포함하는 트리를 의미하며, **최소 신장 트리(Minimum Spanning Tree)**란 간선의 가중치 합이 최소가 되는 신장 트리를 말한다. 최소 신장 트리는 Greedy…"}]}},"pageContext":{"pagePath":"posts/Algorithm/Dijkstra.md","regex":"/^(?!.*README).*Algorithm.*$/","id":"fcf42254-8ace-55b3-8e66-f9962c385268","parent":{"id":"1b85a26c-6412-557d-ab4c-d00a858a0b7c","name":"Dijkstra","relativeDirectory":"Algorithm","relativePath":"Algorithm/Dijkstra.md"}}},"staticQueryHashes":["3300660363","3571427910"],"slicesMap":{}}