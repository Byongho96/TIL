{"componentChunkName":"component---src-templates-post-index-tsx","path":"/posts/Algorithm/Dijkstra.md/","result":{"data":{"markdownRemark":{"id":"d152b12a-0aec-5325-87ba-b9912faae2dd","html":"<h1 id=\"1-개요\" style=\"position:relative;\"><a href=\"#1-%EA%B0%9C%EC%9A%94\" aria-label=\"1 개요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 개요</h1>\n<p>음의 가중치가 없는 그래프의 한 노드에서 다른 모드 노드까지의 최단거리를 각각 구하는 알고리즘. 대표적으로 사용되는 <strong>그리디 알고리즘</strong>이다.</p>\n<h1 id=\"2-동작\" style=\"position:relative;\"><a href=\"#2-%EB%8F%99%EC%9E%91\" aria-label=\"2 동작 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 동작</h1>\n<ol>\n<li>시작 노드를 선정한다.</li>\n<li>방문하지 않은 노드 중 가장 가까운 노드를 선택한다.</li>\n<li>선택된 노드를 방문하고, 인접 노드들의 거리를 갱신한다.</li>\n<li>모든 노드를 방문할 때까지 2~3의 과정을 반복한다.</li>\n</ol>\n<h1 id=\"3-시간-복잡도\" style=\"position:relative;\"><a href=\"#3-%EC%8B%9C%EA%B0%84-%EB%B3%B5%EC%9E%A1%EB%8F%84\" aria-label=\"3 시간 복잡도 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 시간 복잡도</h1>\n<p>V: 노드의 갯수\r\nE: 간선의 갯수</p>\n<h2 id=\"31-basic\" style=\"position:relative;\"><a href=\"#31-basic\" aria-label=\"31 basic permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.1. Basic</h2>\n<p>동작 과정 2번에 의해 시간복잡도가 결정된다.</p>\n<ul>\n<li><strong>O(V^2)</strong><br>\nV개의 노드 중 가장 가까운 노드를 선형탐색하는 과정이 V번 수행 된다.</li>\n</ul>\n<h2 id=\"32-with-heap\" style=\"position:relative;\"><a href=\"#32-with-heap\" aria-label=\"32 with heap permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.2. with Heap</h2>\n<p>heap을 사용할 경우, 시간복잡도 결정인자가 노드 갯수(V)에서 간선 갯수(E)로 바뀐다. 하지만 고전된 노드 갯수에 대해 가장 많은 간선을 가진 완전그래프를 고려하더라도 V와 E는 다음과 관계가 성립한다.\r\n<code class=\"language-text\">V &lt;= E(E-1)/2</code>\r\n<code class=\"language-text\">V &lt; E^2</code></p>\n<ul>\n<li><strong>O(E*logV)</strong><br>\nE개의 간선을 힙에 넣고 빼는 과정이 E번 이루어진다.\r\n<code class=\"language-text\">O(E*logE)</code>\r\n<code class=\"language-text\">O(E*log(V^2))</code>\r\n<code class=\"language-text\">O(2*E*logV)</code>\r\n<code class=\"language-text\">O(E*logV)</code></li>\n</ul>\n<h1 id=\"4-구현\" style=\"position:relative;\"><a href=\"#4-%EA%B5%AC%ED%98%84\" aria-label=\"4 구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 구현</h1>\n<h2 id=\"41-basic\" style=\"position:relative;\"><a href=\"#41-basic\" aria-label=\"41 basic permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.1. Basic</h2>\n<ul>\n<li>\n<p><strong>Python 코드</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token triple-quoted-string string\">'''\r\nV     : 노드 갯수\r\nstart : 시작 노드\r\nadjLst: 특정 노드의 인접 노드들과 가중치를 알 수 있는 컨테이너 자료\r\n'''</span>\r\n<span class=\"token keyword\">def</span> <span class=\"token function\">dijkstra</span><span class=\"token punctuation\">(</span>V<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> adjLst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n  <span class=\"token comment\"># 초깃값 셋팅</span>\r\n  distance <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>INF<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>V<span class=\"token punctuation\">)</span>      <span class=\"token comment\"># 시작점부터 다른 노드까지의 거리</span>\r\n  visited <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>V<span class=\"token punctuation\">)</span>     <span class=\"token comment\"># 거리 계산 완료 여부</span>\r\n\r\n  <span class=\"token comment\"># 시작점 지정</span>\r\n  distance<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\r\n\r\n  <span class=\"token comment\"># 메인 코드</span>\r\n  <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>V<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n      <span class=\"token comment\"># 거리 계산이 완료되지 않은 노드 중 가장 가까운 노드 선정</span>\r\n      mn <span class=\"token operator\">=</span> INF\r\n      nearest <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\r\n      <span class=\"token keyword\">for</span> node <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>V<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n          <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> visited<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span> <span class=\"token keyword\">and</span> distance<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> mn<span class=\"token punctuation\">:</span>\r\n              mn <span class=\"token operator\">=</span> distance<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span>\r\n              nearest <span class=\"token operator\">=</span> node\r\n\r\n      visited<span class=\"token punctuation\">[</span>nearest<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>    <span class=\"token comment\"># 해당 노드 거리 확정</span>\r\n\r\n      <span class=\"token comment\"># 새로 거리 확정된 노드의 인접 노드들 거리 갱신</span>\r\n      <span class=\"token keyword\">for</span> adj<span class=\"token punctuation\">,</span> weight <span class=\"token keyword\">in</span> adjLst<span class=\"token punctuation\">[</span>nearest<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\r\n          <span class=\"token comment\"># if not visited[adj]:</span>\r\n          distance<span class=\"token punctuation\">[</span>adj<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>distance<span class=\"token punctuation\">[</span>adj<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> distance<span class=\"token punctuation\">[</span>nearest<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> weight<span class=\"token punctuation\">)</span>\r\n\r\n  <span class=\"token keyword\">return</span> distance</code></pre></div>\n</li>\n</ul>\n<h2 id=\"42-with-heap\" style=\"position:relative;\"><a href=\"#42-with-heap\" aria-label=\"42 with heap permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.2. with Heap</h2>\n<ul>\n<li>\n<p><strong>Python 코드</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token triple-quoted-string string\">'''\r\nV     : 노드 갯수\r\nstart : 시작 노드\r\nadjLst: 특정 노드의 인접 노드들과 가중치를 알 수 있는 컨테이너 자료\r\n'''</span>\r\n<span class=\"token keyword\">def</span> <span class=\"token function\">dijkstra</span><span class=\"token punctuation\">(</span>V<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> adjLst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n<span class=\"token comment\"># 초깃값 셋팅</span>\r\ndistance <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>INF<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>V<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># 시작점부터 다른 노드까지의 거리</span>\r\n\r\n<span class=\"token comment\"># 시작점 지정</span>\r\nheap <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\r\nheapq<span class=\"token punctuation\">.</span>heappush<span class=\"token punctuation\">(</span>heap<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\ndistance<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\r\n\r\n<span class=\"token keyword\">while</span> heap<span class=\"token punctuation\">:</span>\r\n    <span class=\"token comment\"># 힙에서 가장 낮은 가중치를 가진 노드를 heap에서 pop</span>\r\n    dist<span class=\"token punctuation\">,</span> nearest <span class=\"token operator\">=</span> heapq<span class=\"token punctuation\">.</span>heappop<span class=\"token punctuation\">(</span>heap<span class=\"token punctuation\">)</span>\r\n\r\n    <span class=\"token comment\"># 이미 거리 계산이 완료된 노드 무시하기: Basic Dijkstra에서 visited 배열을 기능을 담당</span>\r\n    <span class=\"token keyword\">if</span> distance<span class=\"token punctuation\">[</span>nearest<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> dist<span class=\"token punctuation\">:</span>\r\n        <span class=\"token keyword\">continue</span>\r\n\r\n    <span class=\"token comment\"># 해당 노드 거리가 확정되는 시점</span>\r\n\r\n    <span class=\"token comment\"># 인접 노드들의 거리 재계산하여 heap에 push</span>\r\n    <span class=\"token keyword\">for</span> adj<span class=\"token punctuation\">,</span> weight <span class=\"token keyword\">in</span> adjLst<span class=\"token punctuation\">[</span>nearest<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\r\n        new_dist <span class=\"token operator\">=</span> dist <span class=\"token operator\">+</span> weight\r\n        <span class=\"token keyword\">if</span> new_dist <span class=\"token operator\">&lt;</span> distance<span class=\"token punctuation\">[</span>adj<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\r\n            distance<span class=\"token punctuation\">[</span>adj<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> new_dist\r\n            heapq<span class=\"token punctuation\">.</span>heappush<span class=\"token punctuation\">(</span>heap<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>new_dist<span class=\"token punctuation\">,</span> adj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token keyword\">return</span> distance</code></pre></div>\n</li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#1-%EA%B0%9C%EC%9A%94\">1. 개요</a></p>\n</li>\n<li>\n<p><a href=\"#2-%EB%8F%99%EC%9E%91\">2. 동작</a></p>\n</li>\n<li>\n<p><a href=\"#3-%EC%8B%9C%EA%B0%84-%EB%B3%B5%EC%9E%A1%EB%8F%84\">3. 시간 복잡도</a></p>\n<ul>\n<li><a href=\"#31-basic\">3.1. Basic</a></li>\n<li><a href=\"#32-with-heap\">3.2. with Heap</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#4-%EA%B5%AC%ED%98%84\">4. 구현</a></p>\n<ul>\n<li><a href=\"#41-basic\">4.1. Basic</a></li>\n<li><a href=\"#42-with-heap\">4.2. with Heap</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"createdAt":"2023-02-27","isCompleted":true,"reference":null,"title":"다익스트라(Dijkstra) 알고리즘","updatedAt":"2023-04-17"}}},"pageContext":{"pagePath":"posts/Algorithm/Dijkstra.md","id":"d152b12a-0aec-5325-87ba-b9912faae2dd","parent":{"id":"982bfef7-ba07-5eb8-a421-444507bbca5f","name":"Dijkstra","relativePath":"Algorithm/Dijkstra.md"}}},"staticQueryHashes":["3300660363","3571427910","82772122"],"slicesMap":{}}