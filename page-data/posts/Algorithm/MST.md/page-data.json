{"componentChunkName":"component---src-templates-post-tsx","path":"/posts/Algorithm/MST.md/","result":{"data":{"markdownRemark":{"id":"afaa0d6e-7d3c-5a97-a99c-0213c46b899d","html":"<h1>Minimum Spanning Tree</h1>\n<h1>1. 개요</h1>\n<p>신장 트리(Spanning Tree)는 그래프 내의 모든 노드를 포함하는 트리를 의미하며, **최소 신장 트리(Minimum Spanning Tree)**란 간선의 가중치 합이 최소가 되는 신장 트리를 말한다.</p>\n<p>최소 신장 트리는 Greedy 기법을 이용하여 구할 수 있으며, 대표적으로 프림 알고리즘(Prim's algorithm)과 크루스칼 알고리즘(Kruskal's algorithm)이 있다.</p>\n<h1>2. 동작</h1>\n<h2>2.1. 프림 알고리즘</h2>\n<ol>\n<li>임의의 정점을 선택하여 하나의 정점을 갖는 최초의 트리를 구성한다.</li>\n<li>트리에 포함된 정점과 트리에 포함되지 않은 정점 간의 간선 중 가장 작은 가중치를 가지는 간선을 선택하여 트리에 추가한다.</li>\n<li>모든 정점이 트리에 포함될 때 까지 2를 반복한다.</li>\n</ol>\n<h2>2.2. 크루스칼 알고리즘</h2>\n<ol>\n<li>그래프의 모든 간선의 집합 E을 만든다.</li>\n<li>E의 간선들 중 가중치가 최소인 간선을 지운다.</li>\n<li>삭제된 간선이 가리키는 두 정점 x,y를 연결하여도 사이클이 발생하지 않는다면 연결한다.</li>\n<li>모든 정점이 연결되거나 E가 비워질 때까지 2~3을 반복한다.</li>\n</ol>\n<h1>3. 시간 복잡도</h1>\n<p>V: 노드의 갯수<br>\nE: 간선이 갯수</p>\n<p>간선이 많을수록 그래프의 경우 prim알고리즘이 유리하고, 간선이 적을수록 Kruskal 알고리즘이 유리하다.</p>\n<h2>3.1. 프림 알고리즘</h2>\n<p>O((V+E)logV)</p>\n<ul>\n<li>V개의 노드를 heap에서 V번 탐색하는 알고리즘 O(VlogV)</li>\n<li>E개의 간선을 탐색하는 과정 O(E)</li>\n<li>E개의 간선을 heap에 push하는 과정 O(ElogV)</li>\n</ul>\n<h2>3.2. 크루스칼 알고리즘</h2>\n<p>O(ElogE)</p>\n<ul>\n<li>E개의 간선을 정렬하는 과정 O(ElogE)</li>\n<li>E개의 간선을 탐색하는 과정 O(E)</li>\n</ul>\n<h1>4 구현</h1>\n<h2>4.1. Prim</h2>\n<ul>\n<li>\n<p><strong>Python</strong></p>\n<pre><code class=\"language-python\">'''\r\nN     : 노드 갯수\r\nstart : 시작 노드\r\nadjLst: 특정 노드의 인접 노드들과 가중치를 알 수 있는 컨테이너 자료\r\n'''\r\ndef prim(N, start, adjLst):\r\n    # 초깃값 셋팅\r\n    weight = [INF] * N\r\n    visited = [0] * N\r\n\r\n    # 시작점 지정\r\n    weight[start] = 0\r\n\r\n    for _ in range(N):\r\n        # MST 인접 노드 중 최소 가중치의 노드를 탐색\r\n        mn = INF\r\n        nearest = -1\r\n        for node in range(N):\r\n            if not visited[node] and weight[node] &#x3C; mn:\r\n                mn = weight[node]\r\n                nearest = node\r\n\r\n        visited[nearest] = True # 해당 노드 MST에 포함\r\n\r\n        # 새로 확정된 노드의 인접 노드들 거리 갱신\r\n        for adj, adj_w in adjLst[nearest]:\r\n            if not visited[adj]:\r\n                weight[adj] = min(weight[adj], adj_w)\r\n\r\n    return sum(weight)\n</code></pre>\n</li>\n</ul>\n<h2>4.2. Prim with heap</h2>\n<ul>\n<li>\n<p><strong>Python</strong></p>\n<pre><code class=\"language-python\">'''\r\nN     : 노드 갯수\r\nstart : 시작 노드\r\nadjLst: 특정 노드의 인접 노드들과 가중치를 알 수 있는 컨테이너 자료\r\n'''\r\ndef prim_with_heap(N, start, adjLst):\r\n    # 초깃값 셋팅\r\n    weight = [INF] * N\r\n    visited = [0] * N\r\n\r\n    # 시작점 셋팅\r\n    heap = []\r\n    heapq.heappush(heap, (0, start))\r\n    weight[start] = 0\r\n\r\n    while heap:\r\n        w, nearest = heapq.heappop(heap)\r\n\r\n        if weight[nearest] &#x3C; w: # 새로 거리가 갱신된 노드는 무시\r\n            continue\r\n\r\n        visited[nearest] = 1    # MST에 해당 노드 포함\r\n\r\n        # 새로 확정된 노드의 인접 노드들 거리 갱신\r\n        for adj, adj_w in adjLst[nearest]:\r\n            if not visited[adj] and adj_w &#x3C; weight[adj]:\r\n                weight[adj] = adj_w\r\n                heapq.heappush(heap, (adj_w, adj))\r\n\r\n    return sum(weight)\n</code></pre>\n</li>\n</ul>\n<h2>4.3. Kruskal</h2>\n<ul>\n<li>\n<p><strong>Python</strong></p>\n<pre><code class=\"language-python\">'''\r\nN     : 노드 갯수\r\nadjLst: 특정 노드의 인접 노드들과 가중치를 알 수 있는 컨테이너 자료\r\n'''\r\n# 트리의 루트 노드를 찾는 함수\r\ndef find_set(par, x):\r\n  while x != par[x]:\r\n      x = par[x]\r\n  return x\r\n\r\n# 두 트리를 병합하는 함수\r\ndef union_by_rank(par, rank, x, y):\r\n    X = find_set(par, x)\r\n    Y = find_set(par, y)\r\n\r\n    X_rank = rank[X]\r\n    Y_rank = rank[Y]\r\n\r\n    # 트리의 rank(depth)를 기준으로, 작은 것을 큰 것에 병합\r\n    if X_rank == Y_rank:\r\n        par[Y] = X\r\n        rank[X] += 1\r\n    elif rank[X] > rank[Y]:\r\n        par[Y] = X\r\n    else:\r\n        par[X] = Y\r\n\r\ndef kruskal(N, adjLst):\r\n  par = [node for node in range(N)]   # 부모 노두 정보를 담는 리스트\r\n  rank = [1] * N                      # 루트 노드의 depth\r\n\r\n  # 간선 리스트를 만드는 과정. input에 따라 적절하게 설계\r\n  edges = []\r\n  for node1 in adjLst:\r\n      for node2, weight in adjLst[node1]:\r\n          edges.append((weight, node1, node2))\r\n  edges.sort() # 간선정보를 가중치를 기준으로 오름차순 정렬\r\n\r\n  mst_size = 0    # MST로 연결된 노드의 갯수\r\n  sum_weight = 0  # MST를 연결하기 위한 총 비용\r\n\r\n  for n1, ne, weight in edges:\r\n      if find_set(par, n1) != find_set(par, n2):  # n1, n2가 다른 집합에 속해있을 경우\r\n          union_by_rank(par, rank, n1, n2)  # par, rank모두 참조형 타입으로 넘겨줌\r\n          sum_weight += weight\r\n          mst_size += 1\r\n          if mst_size == N:   # 모든 노드를 연결했다면 종료\r\n              break\r\n\r\n  return sum_weight\n</code></pre>\n</li>\n</ul>"}},"pageContext":{"pagePath":"posts/Algorithm/MST.md","id":"afaa0d6e-7d3c-5a97-a99c-0213c46b899d","parent":{"id":"bd2963c7-7771-553b-8a27-e7d18e30007d","name":"MST","relativePath":"Algorithm/MST.md"}}},"staticQueryHashes":["1274812890","3935499650","82772122"],"slicesMap":{}}