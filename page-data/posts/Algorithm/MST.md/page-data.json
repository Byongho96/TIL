{"componentChunkName":"component---src-templates-post-index-tsx","path":"/posts/Algorithm/MST.md/","result":{"data":{"markdownRemark":{"id":"afaa0d6e-7d3c-5a97-a99c-0213c46b899d","html":"<h1 id=\"1-개요\" style=\"position:relative;\"><a href=\"#1-%EA%B0%9C%EC%9A%94\" aria-label=\"1 개요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 개요</h1>\n<p>신장 트리(Spanning Tree)는 그래프 내의 모든 노드를 포함하는 트리를 의미하며, **최소 신장 트리(Minimum Spanning Tree)**란 간선의 가중치 합이 최소가 되는 신장 트리를 말한다.</p>\n<p>최소 신장 트리는 Greedy 기법을 이용하여 구할 수 있으며, 대표적으로 프림 알고리즘(Prim's algorithm)과 크루스칼 알고리즘(Kruskal's algorithm)이 있다.</p>\n<h1 id=\"2-동작\" style=\"position:relative;\"><a href=\"#2-%EB%8F%99%EC%9E%91\" aria-label=\"2 동작 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 동작</h1>\n<h2 id=\"21-프림-알고리즘\" style=\"position:relative;\"><a href=\"#21-%ED%94%84%EB%A6%BC-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\" aria-label=\"21 프림 알고리즘 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.1. 프림 알고리즘</h2>\n<ol>\n<li>임의의 정점을 선택하여 하나의 정점을 갖는 최초의 트리를 구성한다.</li>\n<li>트리에 포함된 정점과 트리에 포함되지 않은 정점 간의 간선 중 가장 작은 가중치를 가지는 간선을 선택하여 트리에 추가한다.</li>\n<li>모든 정점이 트리에 포함될 때 까지 2를 반복한다.</li>\n</ol>\n<h2 id=\"22-크루스칼-알고리즘\" style=\"position:relative;\"><a href=\"#22-%ED%81%AC%EB%A3%A8%EC%8A%A4%EC%B9%BC-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\" aria-label=\"22 크루스칼 알고리즘 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.2. 크루스칼 알고리즘</h2>\n<ol>\n<li>그래프의 모든 간선의 집합 E을 만든다.</li>\n<li>E의 간선들 중 가중치가 최소인 간선을 지운다.</li>\n<li>삭제된 간선이 가리키는 두 정점 x,y를 연결하여도 사이클이 발생하지 않는다면 연결한다.</li>\n<li>모든 정점이 연결되거나 E가 비워질 때까지 2~3을 반복한다.</li>\n</ol>\n<h1 id=\"3-시간-복잡도\" style=\"position:relative;\"><a href=\"#3-%EC%8B%9C%EA%B0%84-%EB%B3%B5%EC%9E%A1%EB%8F%84\" aria-label=\"3 시간 복잡도 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 시간 복잡도</h1>\n<p>V: 노드의 갯수<br>\nE: 간선이 갯수</p>\n<p>간선이 많을수록 그래프의 경우 prim알고리즘이 유리하고, 간선이 적을수록 Kruskal 알고리즘이 유리하다.</p>\n<h2 id=\"31-프림-알고리즘\" style=\"position:relative;\"><a href=\"#31-%ED%94%84%EB%A6%BC-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\" aria-label=\"31 프림 알고리즘 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.1. 프림 알고리즘</h2>\n<p>O((V+E)logV)</p>\n<ul>\n<li>V개의 노드를 heap에서 V번 탐색하는 알고리즘 O(VlogV)</li>\n<li>E개의 간선을 탐색하는 과정 O(E)</li>\n<li>E개의 간선을 heap에 push하는 과정 O(ElogV)</li>\n</ul>\n<h2 id=\"32-크루스칼-알고리즘\" style=\"position:relative;\"><a href=\"#32-%ED%81%AC%EB%A3%A8%EC%8A%A4%EC%B9%BC-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\" aria-label=\"32 크루스칼 알고리즘 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.2. 크루스칼 알고리즘</h2>\n<p>O(ElogE)</p>\n<ul>\n<li>E개의 간선을 정렬하는 과정 O(ElogE)</li>\n<li>E개의 간선을 탐색하는 과정 O(E)</li>\n</ul>\n<h1 id=\"4-구현\" style=\"position:relative;\"><a href=\"#4-%EA%B5%AC%ED%98%84\" aria-label=\"4 구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4 구현</h1>\n<h2 id=\"41-prim\" style=\"position:relative;\"><a href=\"#41-prim\" aria-label=\"41 prim permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.1. Prim</h2>\n<ul>\n<li>\n<p><strong>Python</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token triple-quoted-string string\">'''\r\nN     : 노드 갯수\r\nstart : 시작 노드\r\nadjLst: 특정 노드의 인접 노드들과 가중치를 알 수 있는 컨테이너 자료\r\n'''</span>\r\n<span class=\"token keyword\">def</span> <span class=\"token function\">prim</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> adjLst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    <span class=\"token comment\"># 초깃값 셋팅</span>\r\n    weight <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>INF<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> N\r\n    visited <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> N\r\n\r\n    <span class=\"token comment\"># 시작점 지정</span>\r\n    weight<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\r\n\r\n    <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n        <span class=\"token comment\"># MST 인접 노드 중 최소 가중치의 노드를 탐색</span>\r\n        mn <span class=\"token operator\">=</span> INF\r\n        nearest <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\r\n        <span class=\"token keyword\">for</span> node <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> visited<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span> <span class=\"token keyword\">and</span> weight<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> mn<span class=\"token punctuation\">:</span>\r\n                mn <span class=\"token operator\">=</span> weight<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span>\r\n                nearest <span class=\"token operator\">=</span> node\r\n\r\n        visited<span class=\"token punctuation\">[</span>nearest<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span> <span class=\"token comment\"># 해당 노드 MST에 포함</span>\r\n\r\n        <span class=\"token comment\"># 새로 확정된 노드의 인접 노드들 거리 갱신</span>\r\n        <span class=\"token keyword\">for</span> adj<span class=\"token punctuation\">,</span> adj_w <span class=\"token keyword\">in</span> adjLst<span class=\"token punctuation\">[</span>nearest<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\r\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> visited<span class=\"token punctuation\">[</span>adj<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\r\n                weight<span class=\"token punctuation\">[</span>adj<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>weight<span class=\"token punctuation\">[</span>adj<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> adj_w<span class=\"token punctuation\">)</span>\r\n\r\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>weight<span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"42-prim-with-heap\" style=\"position:relative;\"><a href=\"#42-prim-with-heap\" aria-label=\"42 prim with heap permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.2. Prim with heap</h2>\n<ul>\n<li>\n<p><strong>Python</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token triple-quoted-string string\">'''\r\nN     : 노드 갯수\r\nstart : 시작 노드\r\nadjLst: 특정 노드의 인접 노드들과 가중치를 알 수 있는 컨테이너 자료\r\n'''</span>\r\n<span class=\"token keyword\">def</span> <span class=\"token function\">prim_with_heap</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> adjLst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    <span class=\"token comment\"># 초깃값 셋팅</span>\r\n    weight <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>INF<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> N\r\n    visited <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> N\r\n\r\n    <span class=\"token comment\"># 시작점 셋팅</span>\r\n    heap <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\r\n    heapq<span class=\"token punctuation\">.</span>heappush<span class=\"token punctuation\">(</span>heap<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n    weight<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\r\n\r\n    <span class=\"token keyword\">while</span> heap<span class=\"token punctuation\">:</span>\r\n        w<span class=\"token punctuation\">,</span> nearest <span class=\"token operator\">=</span> heapq<span class=\"token punctuation\">.</span>heappop<span class=\"token punctuation\">(</span>heap<span class=\"token punctuation\">)</span>\r\n\r\n        <span class=\"token keyword\">if</span> weight<span class=\"token punctuation\">[</span>nearest<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> w<span class=\"token punctuation\">:</span> <span class=\"token comment\"># 새로 거리가 갱신된 노드는 무시</span>\r\n            <span class=\"token keyword\">continue</span>\r\n\r\n        visited<span class=\"token punctuation\">[</span>nearest<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>    <span class=\"token comment\"># MST에 해당 노드 포함</span>\r\n\r\n        <span class=\"token comment\"># 새로 확정된 노드의 인접 노드들 거리 갱신</span>\r\n        <span class=\"token keyword\">for</span> adj<span class=\"token punctuation\">,</span> adj_w <span class=\"token keyword\">in</span> adjLst<span class=\"token punctuation\">[</span>nearest<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\r\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> visited<span class=\"token punctuation\">[</span>adj<span class=\"token punctuation\">]</span> <span class=\"token keyword\">and</span> adj_w <span class=\"token operator\">&lt;</span> weight<span class=\"token punctuation\">[</span>adj<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\r\n                weight<span class=\"token punctuation\">[</span>adj<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> adj_w\r\n                heapq<span class=\"token punctuation\">.</span>heappush<span class=\"token punctuation\">(</span>heap<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>adj_w<span class=\"token punctuation\">,</span> adj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n\r\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>weight<span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"43-kruskal\" style=\"position:relative;\"><a href=\"#43-kruskal\" aria-label=\"43 kruskal permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.3. Kruskal</h2>\n<ul>\n<li>\n<p><strong>Python</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token triple-quoted-string string\">'''\r\nN     : 노드 갯수\r\nadjLst: 특정 노드의 인접 노드들과 가중치를 알 수 있는 컨테이너 자료\r\n'''</span>\r\n<span class=\"token comment\"># 트리의 루트 노드를 찾는 함수</span>\r\n<span class=\"token keyword\">def</span> <span class=\"token function\">find_set</span><span class=\"token punctuation\">(</span>par<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n  <span class=\"token keyword\">while</span> x <span class=\"token operator\">!=</span> par<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\r\n      x <span class=\"token operator\">=</span> par<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span>\r\n  <span class=\"token keyword\">return</span> x\r\n\r\n<span class=\"token comment\"># 두 트리를 병합하는 함수</span>\r\n<span class=\"token keyword\">def</span> <span class=\"token function\">union_by_rank</span><span class=\"token punctuation\">(</span>par<span class=\"token punctuation\">,</span> rank<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    X <span class=\"token operator\">=</span> find_set<span class=\"token punctuation\">(</span>par<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span>\r\n    Y <span class=\"token operator\">=</span> find_set<span class=\"token punctuation\">(</span>par<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span>\r\n\r\n    X_rank <span class=\"token operator\">=</span> rank<span class=\"token punctuation\">[</span>X<span class=\"token punctuation\">]</span>\r\n    Y_rank <span class=\"token operator\">=</span> rank<span class=\"token punctuation\">[</span>Y<span class=\"token punctuation\">]</span>\r\n\r\n    <span class=\"token comment\"># 트리의 rank(depth)를 기준으로, 작은 것을 큰 것에 병합</span>\r\n    <span class=\"token keyword\">if</span> X_rank <span class=\"token operator\">==</span> Y_rank<span class=\"token punctuation\">:</span>\r\n        par<span class=\"token punctuation\">[</span>Y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> X\r\n        rank<span class=\"token punctuation\">[</span>X<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\r\n    <span class=\"token keyword\">elif</span> rank<span class=\"token punctuation\">[</span>X<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> rank<span class=\"token punctuation\">[</span>Y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\r\n        par<span class=\"token punctuation\">[</span>Y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> X\r\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\r\n        par<span class=\"token punctuation\">[</span>X<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Y\r\n\r\n<span class=\"token keyword\">def</span> <span class=\"token function\">kruskal</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">,</span> adjLst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n  par <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>node <span class=\"token keyword\">for</span> node <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>   <span class=\"token comment\"># 부모 노두 정보를 담는 리스트</span>\r\n  rank <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> N                      <span class=\"token comment\"># 루트 노드의 depth</span>\r\n\r\n  <span class=\"token comment\"># 간선 리스트를 만드는 과정. input에 따라 적절하게 설계</span>\r\n  edges <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\r\n  <span class=\"token keyword\">for</span> node1 <span class=\"token keyword\">in</span> adjLst<span class=\"token punctuation\">:</span>\r\n      <span class=\"token keyword\">for</span> node2<span class=\"token punctuation\">,</span> weight <span class=\"token keyword\">in</span> adjLst<span class=\"token punctuation\">[</span>node1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\r\n          edges<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>weight<span class=\"token punctuation\">,</span> node1<span class=\"token punctuation\">,</span> node2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n  edges<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 간선정보를 가중치를 기준으로 오름차순 정렬</span>\r\n\r\n  mst_size <span class=\"token operator\">=</span> <span class=\"token number\">0</span>    <span class=\"token comment\"># MST로 연결된 노드의 갯수</span>\r\n  sum_weight <span class=\"token operator\">=</span> <span class=\"token number\">0</span>  <span class=\"token comment\"># MST를 연결하기 위한 총 비용</span>\r\n\r\n  <span class=\"token keyword\">for</span> n1<span class=\"token punctuation\">,</span> ne<span class=\"token punctuation\">,</span> weight <span class=\"token keyword\">in</span> edges<span class=\"token punctuation\">:</span>\r\n      <span class=\"token keyword\">if</span> find_set<span class=\"token punctuation\">(</span>par<span class=\"token punctuation\">,</span> n1<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> find_set<span class=\"token punctuation\">(</span>par<span class=\"token punctuation\">,</span> n2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># n1, n2가 다른 집합에 속해있을 경우</span>\r\n          union_by_rank<span class=\"token punctuation\">(</span>par<span class=\"token punctuation\">,</span> rank<span class=\"token punctuation\">,</span> n1<span class=\"token punctuation\">,</span> n2<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># par, rank모두 참조형 타입으로 넘겨줌</span>\r\n          sum_weight <span class=\"token operator\">+=</span> weight\r\n          mst_size <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\r\n          <span class=\"token keyword\">if</span> mst_size <span class=\"token operator\">==</span> N<span class=\"token punctuation\">:</span>   <span class=\"token comment\"># 모든 노드를 연결했다면 종료</span>\r\n              <span class=\"token keyword\">break</span>\r\n\r\n  <span class=\"token keyword\">return</span> sum_weight</code></pre></div>\n</li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#1-%EA%B0%9C%EC%9A%94\">1. 개요</a></p>\n</li>\n<li>\n<p><a href=\"#2-%EB%8F%99%EC%9E%91\">2. 동작</a></p>\n<ul>\n<li><a href=\"#21-%ED%94%84%EB%A6%BC-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\">2.1. 프림 알고리즘</a></li>\n<li><a href=\"#22-%ED%81%AC%EB%A3%A8%EC%8A%A4%EC%B9%BC-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\">2.2. 크루스칼 알고리즘</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#3-%EC%8B%9C%EA%B0%84-%EB%B3%B5%EC%9E%A1%EB%8F%84\">3. 시간 복잡도</a></p>\n<ul>\n<li><a href=\"#31-%ED%94%84%EB%A6%BC-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\">3.1. 프림 알고리즘</a></li>\n<li><a href=\"#32-%ED%81%AC%EB%A3%A8%EC%8A%A4%EC%B9%BC-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\">3.2. 크루스칼 알고리즘</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#4-%EA%B5%AC%ED%98%84\">4 구현</a></p>\n<ul>\n<li><a href=\"#41-prim\">4.1. Prim</a></li>\n<li><a href=\"#42-prim-with-heap\">4.2. Prim with heap</a></li>\n<li><a href=\"#43-kruskal\">4.3. Kruskal</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"createdAt":"2023-04-17","isCompleted":true,"reference":null,"title":"최소 신장 트리(Minimum Spaaning Tree) 알고리즘","updatedAt":"2023-04-17"}}},"pageContext":{"pagePath":"posts/Algorithm/MST.md","id":"afaa0d6e-7d3c-5a97-a99c-0213c46b899d","parent":{"id":"bd2963c7-7771-553b-8a27-e7d18e30007d","name":"MST","relativePath":"Algorithm/MST.md"}}},"staticQueryHashes":["3300660363","3571427910","82772122"],"slicesMap":{}}