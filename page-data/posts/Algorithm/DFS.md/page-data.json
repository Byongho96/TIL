{"componentChunkName":"component---src-templates-post-index-tsx","path":"/posts/Algorithm/DFS.md/","result":{"data":{"markdownRemark":{"id":"3a4b2e18-1298-5318-ba3d-367c5264afaf","html":"<h1 id=\"1-개요\" style=\"position:relative;\"><a href=\"#1-%EA%B0%9C%EC%9A%94\" aria-label=\"1 개요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 개요</h1>\n<p>상태공간이나 그래프를 출발점에서 시작하여 모든 리프노드까지 순서대로 탐색하는 <strong>완전탐색</strong> 기반의 알고리즘이다.</p>\n<h2 id=\"11-특징\" style=\"position:relative;\"><a href=\"#11-%ED%8A%B9%EC%A7%95\" aria-label=\"11 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.1. 특징</h2>\n<ul>\n<li>루트 노드(상태)로부터 리프 노드(상태)까지 길이가 유한할 때만 사용가능하다.</li>\n<li>노드 탐색 순서가 재귀적으로 표현될 때 적합하다.</li>\n</ul>\n<h1 id=\"2-동작\" style=\"position:relative;\"><a href=\"#2-%EB%8F%99%EC%9E%91\" aria-label=\"2 동작 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 동작</h1>\n<p>아래는 DFS가 동작하는 하나의 예시일 뿐이다.</p>\n<ol>\n<li>시작 노드를 선정한다.</li>\n<li>인접 노드 중 방문하지 않은 노드를 스택에 추가한다.</li>\n<li>스택에서 노드를 꺼낸다.</li>\n<li>목적 노드에 도착할 때까지 2~3의 과정을 반복한다.</li>\n</ol>\n<h1 id=\"3-시간-복잡도\" style=\"position:relative;\"><a href=\"#3-%EC%8B%9C%EA%B0%84-%EB%B3%B5%EC%9E%A1%EB%8F%84\" aria-label=\"3 시간 복잡도 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 시간 복잡도</h1>\n<p>V: 노드의 갯수\r\nE: 간선의 갯수</p>\n<ul>\n<li><strong>O(N + E)</strong><br>\n최대 V개의 노드를 다 탐색하거나, 또는 모든 간선의 연결관계를 탐색해야 한다.\n<ul>\n<li>인접 행렬의 경우, 노드의 갯수가 N^2 이고 간선의 갯수가 4*N^2이므로 <strong>O(N^2)</strong></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"4-구현\" style=\"position:relative;\"><a href=\"#4-%EA%B5%AC%ED%98%84\" aria-label=\"4 구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 구현</h1>\n<ul>\n<li>\n<p><strong>Python 코드</strong><br>\n단순히 모든 노드를 완전탐색하는 DFS 알고리즘이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token triple-quoted-string string\">'''\r\nN     : 노드 갯수\r\nstart : 시작 노드\r\nend   : 끝 노드\r\nadjLst: 특정 노드의 인접 노드를 알 수 있는 컨테이너 자료\r\n'''</span>\r\n\r\n<span class=\"token keyword\">def</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> adjLst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    visited <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> N     <span class=\"token comment\"># 방문 여부를 체크할 visited 배열</span>\r\n    stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>            <span class=\"token comment\"># 시작점부터 거리 순으로 노드를 저장할 큐</span>\r\n\r\n    <span class=\"token comment\"># 시작점 셋팅</span>\r\n    stack<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span>\r\n    visited<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\r\n\r\n    <span class=\"token keyword\">while</span> stack<span class=\"token punctuation\">:</span>\r\n        node <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n\r\n        <span class=\"token comment\"># 종료 조건</span>\r\n        <span class=\"token keyword\">if</span> node <span class=\"token operator\">==</span> end<span class=\"token punctuation\">:</span>       <span class=\"token comment\"># 목적 노드를 도달 시</span>\r\n          <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\r\n\r\n        <span class=\"token comment\"># 인접 노드 탐색</span>\r\n        <span class=\"token keyword\">for</span> adj <span class=\"token keyword\">in</span> adjLst<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\r\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> visited<span class=\"token punctuation\">[</span>adj<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 방문하지 않은 노드 만 탐색</span>\r\n                visited<span class=\"token punctuation\">[</span>adj<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\r\n                stack<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>adj<span class=\"token punctuation\">)</span>\r\n\r\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span> <span class=\"token comment\"># 목적 노드를 도달할 수 없음</span></code></pre></div>\n<p>지나온 경로를 기억할 수 있는 DFS 알고리즘이다</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token triple-quoted-string string\">'''\r\nN     : 노드 갯수\r\nstart : 시작 노드\r\nend   : 끝 노드\r\nadjLst: 특정 노드의 인접 노드를 알 수 있는 컨테이너 자료\r\n'''</span>\r\n<span class=\"token keyword\">def</span> <span class=\"token function\">dfs_while</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> adjLst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n  visited <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span>\r\n  stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\r\n\r\n  node <span class=\"token operator\">=</span> start\r\n  visited<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\r\n\r\n  <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\r\n      <span class=\"token comment\"># 종료 조건</span>\r\n      <span class=\"token keyword\">if</span> node <span class=\"token operator\">==</span> end<span class=\"token punctuation\">:</span>\r\n          path <span class=\"token operator\">=</span> stack <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span>\r\n          <span class=\"token keyword\">return</span> path\r\n\r\n      <span class=\"token comment\"># 인접 노드 탐색</span>\r\n      <span class=\"token keyword\">for</span> adj <span class=\"token keyword\">in</span> adjLst<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\r\n          <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> visited<span class=\"token punctuation\">[</span>adj<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\r\n              stack<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span>\r\n              node <span class=\"token operator\">=</span> adj\r\n              visited<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\r\n              <span class=\"token keyword\">break</span>\r\n\r\n      <span class=\"token comment\"># 인접 노드 없을 시, 부모 상태 노드로 후퇴</span>\r\n      <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\r\n          <span class=\"token keyword\">if</span> stack<span class=\"token punctuation\">:</span>\r\n              node <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n          <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 모든 노드 탐색 완료 시, 반복문 break</span>\r\n              <span class=\"token keyword\">break</span>\r\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span></code></pre></div>\n</li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#1-%EA%B0%9C%EC%9A%94\">1. 개요</a></p>\n<ul>\n<li><a href=\"#11-%ED%8A%B9%EC%A7%95\">1.1. 특징</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#2-%EB%8F%99%EC%9E%91\">2. 동작</a></p>\n</li>\n<li>\n<p><a href=\"#3-%EC%8B%9C%EA%B0%84-%EB%B3%B5%EC%9E%A1%EB%8F%84\">3. 시간 복잡도</a></p>\n</li>\n<li>\n<p><a href=\"#4-%EA%B5%AC%ED%98%84\">4. 구현</a></p>\n</li>\n</ul>","frontmatter":{"createdAt":"2023-03-14","isCompleted":true,"reference":null,"title":"깊이 우선 탐색(Depth-First Search) 알고리즘","updatedAt":"2023-04-17"}}},"pageContext":{"pagePath":"posts/Algorithm/DFS.md","id":"3a4b2e18-1298-5318-ba3d-367c5264afaf","parent":{"id":"42162e1e-42f8-5384-9248-b7a8cee98455","name":"DFS","relativePath":"Algorithm/DFS.md"}}},"staticQueryHashes":["2123968258","3571427910","82772122"],"slicesMap":{}}