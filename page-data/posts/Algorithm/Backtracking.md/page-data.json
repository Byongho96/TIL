{"componentChunkName":"component---src-templates-post-index-tsx","path":"/posts/Algorithm/Backtracking.md/","result":{"data":{"markdownRemark":{"id":"1bc47ab1-4e2f-5b9f-98d2-9e9863473a91","html":"<h1 id=\"1-개요\" style=\"position:relative;\"><a href=\"#1-%EA%B0%9C%EC%9A%94\" aria-label=\"1 개요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 개요</h1>\n<p>상태공간이나 그래프의 노드를 모두 탐색하는 <strong>완전탐색</strong> 기반의 알고리즘이다.</p>\n<p>다만, <strong>가지 치기</strong>를 통해 탐색할 필요성이 없는 노드(상태)들을 탐색 대상에서 제외함으로써 효율을 높인다.</p>\n<h1 id=\"2-동작\" style=\"position:relative;\"><a href=\"#2-%EB%8F%99%EC%9E%91\" aria-label=\"2 동작 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 동작</h1>\n<ol>\n<li>모든 상태를 트리 형태로 구조화한다.</li>\n<li>루트 노드부터 탐색을 시작한다.</li>\n<li>자식 노드 중 탐색하지 않은 노드를 깊이 우선 탐색한다.</li>\n<li>노드가 유망하지 않다고 판단 되면, 이전 분기점(부모 노드)로 돌아간다.</li>\n<li>완전 탐색하거나 해를 구할 때까지 3 ~ 4의 과정을 반복한다.</li>\n</ol>\n<h1 id=\"3-시간-복잡도\" style=\"position:relative;\"><a href=\"#3-%EC%8B%9C%EA%B0%84-%EB%B3%B5%EC%9E%A1%EB%8F%84\" aria-label=\"3 시간 복잡도 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 시간 복잡도</h1>\n<ul>\n<li><strong>O(V + E)</strong><br>\n최대 V개의 노드를 다 탐색하거나, 또는 모든 간선의 연결관계를 탐색해야 한다.\n<ul>\n<li>인접 행렬의 경우, 노드의 갯수가 N^2 이고 간선의 갯수가 4*N^2이므로 <strong>O(N^2)</strong></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"4-예시\" style=\"position:relative;\"><a href=\"#4-%EC%98%88%EC%8B%9C\" aria-label=\"4 예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 예시</h1>\n<p>백트래킹의 경우, 크게 <strong>종료조건, 가지치기(가능할 경우), 자식 상태 탐색</strong>에 대응하는 로직을 가진다.\r\n문제 상황에 따라 다양하게 수정 및 적용이 가능하다. 아래는 백트래킹의 예시 중 하나인 백준의 알파 틱택토 문제에 대한 정답 로직을 첨부한다.</p>\n<p><a href=\"https://www.acmicpc.net/problem/16571\">백준 16571번 알파 틱택토</a>\r\n백트래킹이 완전탐색 기반 알고리즘이라는 것을 잘 활용한 문제이다. 다음 자식 상태의 모든 값을 비교하여 최선의 결과를 반환함으로써 최종 결과 또한 최선의 결과를 도출한다.</p>\n<ul>\n<li>\n<p><strong>Python</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token triple-quoted-string string\">'''\r\n&lt;input>\r\nN: 최대 단계\r\nstep: 현재 단계\r\nboard: 틱택토 현재 상황\r\n\r\n&lt;output>\r\n0: 현재 플레이어의 패배\r\n1: 비김\r\n2: 현재 플레이어의 승리\r\n'''</span>\r\n<span class=\"token keyword\">def</span> <span class=\"token function\">backtracking</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">,</span> step<span class=\"token punctuation\">,</span> board<span class=\"token punctuation\">,</span> player1<span class=\"token punctuation\">,</span> player2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n\r\n  current <span class=\"token operator\">=</span> player1\r\n  previous <span class=\"token operator\">=</span> player2\r\n  <span class=\"token keyword\">if</span> step <span class=\"token operator\">%</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\r\n      current <span class=\"token operator\">=</span> player2\r\n      previous <span class=\"token operator\">=</span> player1\r\n\r\n  <span class=\"token comment\"># 종료조건1: 승패 판정</span>\r\n  <span class=\"token keyword\">if</span> isWin<span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">,</span> previous<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n      <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\r\n\r\n  <span class=\"token comment\"># 종료조건2: 게임이 더 진행될 수 없는 경우</span>\r\n  <span class=\"token keyword\">if</span> N <span class=\"token operator\">==</span> step<span class=\"token punctuation\">:</span>\r\n      <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\r\n\r\n  <span class=\"token comment\"># 내가 둘 수 있는 경우의 수 중 최선을 반납</span>\r\n  best_result <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\r\n  <span class=\"token keyword\">for</span> n <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n      i<span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> <span class=\"token builtin\">divmod</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\r\n      <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> board<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\r\n          board<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> current\r\n          result <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">-</span> backtracking<span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">,</span> step <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> board<span class=\"token punctuation\">,</span> player1<span class=\"token punctuation\">,</span> player2<span class=\"token punctuation\">)</span>\r\n          board<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\r\n          best_result <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>best_result<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span>\r\n          <span class=\"token keyword\">if</span> best_result <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\r\n              <span class=\"token keyword\">break</span>\r\n\r\n  <span class=\"token keyword\">return</span> best_result</code></pre></div>\n</li>\n</ul>","tableOfContents":"<ul>\n<li><a href=\"#1-%EA%B0%9C%EC%9A%94\">1. 개요</a></li>\n<li><a href=\"#2-%EB%8F%99%EC%9E%91\">2. 동작</a></li>\n<li><a href=\"#3-%EC%8B%9C%EA%B0%84-%EB%B3%B5%EC%9E%A1%EB%8F%84\">3. 시간 복잡도</a></li>\n<li><a href=\"#4-%EC%98%88%EC%8B%9C\">4. 예시</a></li>\n</ul>","frontmatter":{"createdAt":"2022-08-23","isCompleted":true,"reference":null,"title":"백트래킹(Backtracking) 알고리즘","updatedAt":"2023-04-17"}}},"pageContext":{"pagePath":"posts/Algorithm/Backtracking.md","id":"1bc47ab1-4e2f-5b9f-98d2-9e9863473a91","parent":{"id":"5a994e87-ef15-5f86-b3b4-630d75c93646","name":"Backtracking","relativeDirectory":"Algorithm","relativePath":"Algorithm/Backtracking.md"}}},"staticQueryHashes":["3300660363","3571427910","82772122"],"slicesMap":{}}