{"componentChunkName":"component---src-templates-post-index-tsx","path":"/posts/Algorithm/Backtracking.md/","result":{"data":{"markdownRemark":{"id":"e86fb310-e394-5424-873b-d2afa994cdb8","html":"<h1 id=\"1-개요\" style=\"position:relative;\"><a href=\"#1-%EA%B0%9C%EC%9A%94\" aria-label=\"1 개요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 개요</h1>\n<p>상태공간이나 그래프의 노드를 모두 탐색하는 <strong>완전탐색</strong> 기반의 알고리즘이다.</p>\n<p>다만, <strong>가지 치기</strong>를 통해 탐색할 필요성이 없는 노드(상태)들을 탐색 대상에서 제외함으로써 효율을 높인다.</p>\n<h1 id=\"2-동작\" style=\"position:relative;\"><a href=\"#2-%EB%8F%99%EC%9E%91\" aria-label=\"2 동작 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 동작</h1>\n<ol>\n<li>모든 상태를 트리 형태로 구조화한다.</li>\n<li>루트 노드부터 탐색을 시작한다.</li>\n<li>자식 노드 중 탐색하지 않은 노드를 깊이 우선 탐색한다.</li>\n<li>노드가 유망하지 않다고 판단 되면, 이전 분기점(부모 노드)로 돌아간다.</li>\n<li>완전 탐색하거나 해를 구할 때까지 3 ~ 4의 과정을 반복한다.</li>\n</ol>\n<h1 id=\"3-시간-복잡도\" style=\"position:relative;\"><a href=\"#3-%EC%8B%9C%EA%B0%84-%EB%B3%B5%EC%9E%A1%EB%8F%84\" aria-label=\"3 시간 복잡도 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 시간 복잡도</h1>\n<ul>\n<li><strong>O(V + E)</strong><br>\n최대 V개의 노드를 다 탐색하거나, 또는 모든 간선의 연결관계를 탐색해야 한다.\n<ul>\n<li>인접 행렬의 경우, 노드의 갯수가 N^2 이고 간선의 갯수가 4*N^2이므로 <strong>O(N^2)</strong></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"4-예시\" style=\"position:relative;\"><a href=\"#4-%EC%98%88%EC%8B%9C\" aria-label=\"4 예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 예시</h1>\n<p>백트래킹의 경우, 크게 <strong>종료조건, 가지치기(가능할 경우), 자식 상태 탐색</strong>에 대응하는 로직을 가진다.\n문제 상황에 따라 다양하게 수정 및 적용이 가능하다. 아래는 백트래킹의 예시 중 하나인 백준의 알파 틱택토 문제에 대한 정답 로직을 첨부한다.</p>\n<p><a href=\"https://www.acmicpc.net/problem/16571\">백준 16571번 알파 틱택토</a>\n백트래킹이 완전탐색 기반 알고리즘이라는 것을 잘 활용한 문제이다. 다음 자식 상태의 모든 값을 비교하여 최선의 결과를 반환함으로써 최종 결과 또한 최선의 결과를 도출한다.</p>\n<ul>\n<li>\n<p><strong>Python</strong></p>\n<pre><code class=\"language-python\">'''\n&#x3C;input>\nN: 최대 단계\nstep: 현재 단계\nboard: 틱택토 현재 상황\n\n&#x3C;output>\n0: 현재 플레이어의 패배\n1: 비김\n2: 현재 플레이어의 승리\n'''\ndef backtracking(N, step, board, player1, player2):\n\n  current = player1\n  previous = player2\n  if step % 2:\n      current = player2\n      previous = player1\n\n  # 종료조건1: 승패 판정\n  if isWin(board, previous):\n      return 0\n\n  # 종료조건2: 게임이 더 진행될 수 없는 경우\n  if N == step:\n      return 1\n\n  # 내가 둘 수 있는 경우의 수 중 최선을 반납\n  best_result = 0\n  for n in range(9):\n      i, j = divmod(n, 3)\n      if not board[i][j]:\n          board[i][j] = current\n          result = 2 - backtracking(N, step + 1, board, player1, player2)\n          board[i][j] = 0\n          best_result = max(best_result, result)\n          if best_result == 2:\n              break\n\n  return best_result\n</code></pre>\n</li>\n</ul>","tableOfContents":"<ul>\n<li><a href=\"#1-%EA%B0%9C%EC%9A%94\">1. 개요</a></li>\n<li><a href=\"#2-%EB%8F%99%EC%9E%91\">2. 동작</a></li>\n<li><a href=\"#3-%EC%8B%9C%EA%B0%84-%EB%B3%B5%EC%9E%A1%EB%8F%84\">3. 시간 복잡도</a></li>\n<li><a href=\"#4-%EC%98%88%EC%8B%9C\">4. 예시</a></li>\n</ul>","frontmatter":{"createdAt":"2022-08-23","isCompleted":true,"reference":null,"title":"백트래킹(Backtracking) 알고리즘","updatedAt":"2023-04-17"}},"allMarkdownRemark":{"nodes":[{"id":"5730a298-a25c-588f-a6ef-5e10feb229b6","parent":{"id":"fcdc817f-f629-57c5-863f-078018f1d9e1","name":"DFS","relativePath":"Algorithm/DFS.md"},"frontmatter":{"title":"깊이 우선 탐색(Depth-First Search) 알고리즘","createdAt":"2023-03-14","updatedAt":"2023-04-17"},"excerpt":"1. 개요 상태공간이나 그래프를 출발점에서 시작하여 모든 리프노드까지 순서대로 탐색하는 완전탐색 기반의 알고리즘이다. 1.…"},{"id":"c9f173ac-3763-5e1f-903d-f3045c999d05","parent":{"id":"94b5e585-62f8-5fff-a8d4-98f30a84f8c6","name":"BFS","relativePath":"Algorithm/BFS.md"},"frontmatter":{"title":"너비 우선 탐색(Breadth-First Search) 알고리즘","createdAt":"2023-03-05","updatedAt":"2023-04-17"},"excerpt":"1. 개요 상태공간이나 그래프를 출발점으로부터 가까운 순으로 탐색해가는 완전탐색 기반의 알고리즘이다. 1.…"},{"id":"fcf42254-8ace-55b3-8e66-f9962c385268","parent":{"id":"1b85a26c-6412-557d-ab4c-d00a858a0b7c","name":"Dijkstra","relativePath":"Algorithm/Dijkstra.md"},"frontmatter":{"title":"다익스트라(Dijkstra) 알고리즘","createdAt":"2023-02-27","updatedAt":"2023-04-17"},"excerpt":"1. 개요 음의 가중치가 없는 그래프의 한 노드에서 다른 모드 노드까지의 최단거리를 각각 구하는 알고리즘. 대표적으로 사용되는 그리디 알고리즘이다.…"},{"id":"2d7e5c08-666d-53a3-8b7c-2e2d55bd48df","parent":{"id":"6ef9ac1a-1a41-53b9-b3e3-8411da4f71cd","name":"DP","relativePath":"Algorithm/DP.md"},"frontmatter":{"title":"동적 계획법(Dynamic Programming) 알고리즘","createdAt":"2023-03-27","updatedAt":"2023-04-03"},"excerpt":"…"},{"id":"e86fb310-e394-5424-873b-d2afa994cdb8","parent":{"id":"a2740d81-9401-5f82-9c13-188c6ce2daf2","name":"Backtracking","relativePath":"Algorithm/Backtracking.md"},"frontmatter":{"title":"백트래킹(Backtracking) 알고리즘","createdAt":"2022-08-23","updatedAt":"2023-04-17"},"excerpt":"1. 개요 상태공간이나 그래프의 노드를 모두 탐색하는 완전탐색 기반의 알고리즘이다. 다만, 가지 치기를 통해 탐색할 필요성이 없는 노드(상태)들을 탐색 대상에서 제외함으로써 효율을 높인다.…"},{"id":"2d8f000a-09e8-5d77-8cb7-ef17613eb250","parent":{"id":"c7144735-eeb2-5f34-aa77-fe40a9505ec5","name":"BinarySearch","relativePath":"Algorithm/BinarySearch.md"},"frontmatter":{"title":"이진탐색(Binary Search) 알고리즘","createdAt":"2023-04-11","updatedAt":"2023-04-11"},"excerpt":"1. 개요 정렬된 데이터에서 검색 범위를 줄여 나가면서 목적 값을 찾는 알고리즘이다. 데이터가 정렬되어 있을 경우, 데이터를 크기가 같은 두 부분으로 나누고 유효한 데이터집합을 선 1.…"},{"id":"8c82aef1-764e-58d7-9fd2-f112c22a7738","parent":{"id":"4d88a373-6547-5a1d-bd1a-f3bb4172bf10","name":"Sorting","relativePath":"Algorithm/Sorting.md"},"frontmatter":{"title":"정렬(Sorting) 알고리즘 정리","createdAt":"2023-05-02","updatedAt":"2023-05-03"},"excerpt":"면접에서 탈탈 털린 후 작성한 정렬 관련 알고리즘을 총정리 1. Bubble Sort (거품 정렬) 1.1. 동작 과정 1.2. 복잡도 1.3. Python 구현 2. Selection Sort (선택 정렬) 2.1. 동작 과정 2.2. 복잡도 2.…"},{"id":"7c9622db-f251-58ab-82a5-e205a525f4de","parent":{"id":"bff8b024-ecde-52e7-9534-055482414611","name":"MST","relativePath":"Algorithm/MST.md"},"frontmatter":{"title":"최소 신장 트리(Minimum Spaaning Tree) 알고리즘","createdAt":"2023-04-17","updatedAt":"2023-04-17"},"excerpt":"1. 개요 신장 트리(Spanning Tree)는 그래프 내의 모든 노드를 포함하는 트리를 의미하며, **최소 신장 트리(Minimum Spanning Tree)**란 간선의 가중치 합이 최소가 되는 신장 트리를 말한다. 최소 신장 트리는 Greedy…"}]}},"pageContext":{"pagePath":"posts/Algorithm/Backtracking.md","regex":"/^(?!.*README).*Algorithm.*$/","relativeDirectory":"Algorithm","id":"e86fb310-e394-5424-873b-d2afa994cdb8","parent":{"id":"a2740d81-9401-5f82-9c13-188c6ce2daf2","name":"Backtracking","relativePath":"Algorithm/Backtracking.md"}}},"staticQueryHashes":["3300660363","3571427910"],"slicesMap":{}}