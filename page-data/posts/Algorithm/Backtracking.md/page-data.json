{"componentChunkName":"component---src-templates-post-tsx","path":"/posts/Algorithm/Backtracking.md/","result":{"data":{"markdownRemark":{"id":"1bc47ab1-4e2f-5b9f-98d2-9e9863473a91","html":"<h1>Backtracking</h1>\n<h1>1. 개요</h1>\n<p>상태공간이나 그래프의 노드를 모두 탐색하는 <strong>완전탐색</strong> 기반의 알고리즘이다.</p>\n<p>다만, <strong>가지 치기</strong>를 통해 탐색할 필요성이 없는 노드(상태)들을 탐색 대상에서 제외함으로써 효율을 높인다.</p>\n<h1>2. 동작</h1>\n<ol>\n<li>모든 상태를 트리 형태로 구조화한다.</li>\n<li>루트 노드부터 탐색을 시작한다.</li>\n<li>자식 노드 중 탐색하지 않은 노드를 깊이 우선 탐색한다.</li>\n<li>노드가 유망하지 않다고 판단 되면, 이전 분기점(부모 노드)로 돌아간다.</li>\n<li>완전 탐색하거나 해를 구할 때까지 3 ~ 4의 과정을 반복한다.</li>\n</ol>\n<h1>3. 시간 복잡도</h1>\n<ul>\n<li><strong>O(V + E)</strong><br>\n최대 V개의 노드를 다 탐색하거나, 또는 모든 간선의 연결관계를 탐색해야 한다.\n<ul>\n<li>인접 행렬의 경우, 노드의 갯수가 N^2 이고 간선의 갯수가 4*N^2이므로 <strong>O(N^2)</strong></li>\n</ul>\n</li>\n</ul>\n<h1>4. 예시</h1>\n<p>백트래킹의 경우, 크게 <strong>종료조건, 가지치기(가능할 경우), 자식 상태 탐색</strong>에 대응하는 로직을 가진다.\r\n문제 상황에 따라 다양하게 수정 및 적용이 가능하다. 아래는 백트래킹의 예시 중 하나인 백준의 알파 틱택토 문제에 대한 정답 로직을 첨부한다.</p>\n<p><a href=\"https://www.acmicpc.net/problem/16571\">백준 16571번 알파 틱택토</a>\r\n백트래킹이 완전탐색 기반 알고리즘이라는 것을 잘 활용한 문제이다. 다음 자식 상태의 모든 값을 비교하여 최선의 결과를 반환함으로써 최종 결과 또한 최선의 결과를 도출한다.</p>\n<ul>\n<li>\n<p><strong>Python</strong></p>\n<pre><code class=\"language-python\">'''\r\n&#x3C;input>\r\nN: 최대 단계\r\nstep: 현재 단계\r\nboard: 틱택토 현재 상황\r\n\r\n&#x3C;output>\r\n0: 현재 플레이어의 패배\r\n1: 비김\r\n2: 현재 플레이어의 승리\r\n'''\r\ndef backtracking(N, step, board, player1, player2):\r\n\r\n  current = player1\r\n  previous = player2\r\n  if step % 2:\r\n      current = player2\r\n      previous = player1\r\n\r\n  # 종료조건1: 승패 판정\r\n  if isWin(board, previous):\r\n      return 0\r\n\r\n  # 종료조건2: 게임이 더 진행될 수 없는 경우\r\n  if N == step:\r\n      return 1\r\n\r\n  # 내가 둘 수 있는 경우의 수 중 최선을 반납\r\n  best_result = 0\r\n  for n in range(9):\r\n      i, j = divmod(n, 3)\r\n      if not board[i][j]:\r\n          board[i][j] = current\r\n          result = 2 - backtracking(N, step + 1, board, player1, player2)\r\n          board[i][j] = 0\r\n          best_result = max(best_result, result)\r\n          if best_result == 2:\r\n              break\r\n\r\n  return best_result\n</code></pre>\n</li>\n</ul>"}},"pageContext":{"pagePath":"posts/Algorithm/Backtracking.md","id":"1bc47ab1-4e2f-5b9f-98d2-9e9863473a91","parent":{"id":"5a994e87-ef15-5f86-b3b4-630d75c93646","name":"Backtracking","relativePath":"Algorithm/Backtracking.md"}}},"staticQueryHashes":["1274812890","3935499650","82772122"],"slicesMap":{}}