{"componentChunkName":"component---src-templates-post-tsx","path":"/posts/Algorithm/DP.md/","result":{"data":{"markdownRemark":{"id":"fe66208e-7fe6-5afb-a230-a5f12aa201e1","html":"<h1>Dynamic Programming</h1>\n<h1>1. 개요</h1>\n<p>상태공간이나 그래프의 노드를 모두 탐색하는 <strong>완전탐색</strong> 기반의 알고리즘이다.\r\n다만 하위 집합의 최적해를 기억해 재활용함으로써, 상위 집합의 해를 구하는 과정의 복잡도를 줄인다는 특징을 가진다.</p>\n<p>동적계획법은 접근방식에 따라 크게 두가지로 나눌 수 있다. 문제 조건에 따라 더 적절한 방식을 골라 사용할 수 있따.</p>\n<ul>\n<li><strong>동적 계획법(상향식 접근)</strong><br>\n보통 말하는 동적 계획법은 상향식 접근을 말한다. 원하는 집합의 해를 얻기 위해서 가장 작은 부분 집합부터 해를 계산해 나간다.\r\n반복문을 사용해 비교적 빠른 한 편, 모든 부분 집합의 해를 계산해야한다.</li>\n<li><strong>메모이제이션(하향식 접근)</strong><br>\n메모이제이션을 동적 계획법을 하향식 접근으로 구현한 것이다. 원하는 집합의 해를 얻기 위해 필요한 부분집합의 해를 계산해 나간다.\r\n필요한 부분 집합의 해만 구할 수 있지만, 재귀로 구현되어 반복문보다 속도가 느릴 수 있다.</li>\n</ul>\n<h1>2. 동작</h1>\n<ol>\n<li>크기가 N인 집합과 (N - k)인 부분집합의 관계를 찾는다.<br>\nk는 1 이상의 정수이며, 한 개 이상의 값이 할당 될 수 있다.</li>\n<li>가장 작은 부분집합의 해를 구한다.</li>\n<li>1에서 찾은 규칙과 2의 값을 이용하여 크기가 N인 부분집합까지의 해를 구한다.</li>\n</ol>\n<h1>3. 시간 복잡도</h1>\n<ul>\n<li><strong>O(N)</strong><br>\n보통 크기가 N인 집합의 해를 구하기 위해 크기가 1인 집합부터 반복문을 활용하여 탐색해나가므로, N번의 반복을 통해 해를 구할 수 있다.</li>\n</ul>\n<h1>4. 예시</h1>\n<p>DP의 대표 문제 중 하나인 배낭싸기 문제를 예로 든다.</p>\n<p>배낭싸기 문제는 기본적으로 2차원의 DP배열을 만들어서 풀이할 수 있다. 아래에서 행은 배낭의 최대 무게가 w(&#x3C; W)인 부분집함를 말하고, 열은 첫번째 물건부터 n(&#x3C; N)개의 물건이 주어진 부분집합을 말한다. 그리고 DP배열 안에 들어가는 값은 해당 부분집합에서 배낭에 넣을 수 있는 최대 가치를 말한다.</p>\n<table>\r\n<tr>\r\n<td>\r\n무게\\물건 갯수\r\n</td>\r\n<td>\r\n0\r\n</td>\r\n<td>\r\n1\r\n</td>\r\n<td>\r\n2\r\n</td>\r\n<td>\r\n3\r\n</td>\r\n<td>\r\n...\r\n</td>\r\n<td>\r\nN-2\r\n</td>\r\n<td>\r\nN-1\r\n</td>\r\n<td>\r\nN\r\n</td>\r\n</tr>\r\n<tr>\r\n<td>\r\n0\r\n</td>\r\n<td>\r\n0\r\n</td>\r\n<td>\r\n0\r\n</td>\r\n<td>\r\n0\r\n</td>\r\n<td>\r\n0\r\n</td>\r\n<td>\r\n...\r\n</td>\r\n<td>\r\n0\r\n</td>\r\n<td>\r\n0\r\n</td>\r\n<td>\r\n0\r\n</td>\r\n</tr>\r\n<tr>\r\n<td>\r\n1\r\n</td>\r\n<td>\r\n0\r\n</td>\r\n<td>\r\n</td>\r\n<td>\r\n</td>\r\n<td>\r\n</td>\r\n<td>\r\n</td>\r\n<td>\r\n</td>\r\n<td>\r\n</td>\r\n<td>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td>\r\n2\r\n</td>\r\n<td>\r\n0\r\n</td>\r\n<td>\r\n</td>\r\n<td>\r\n</td>\r\n<td>\r\n</td>\r\n<td>\r\n</td>\r\n<td>\r\n</td>\r\n<td>\r\n</td>\r\n<td>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td>\r\n3\r\n</td>\r\n<td>\r\n0\r\n</td>\r\n<td>\r\n</td>\r\n<td>\r\n</td>\r\n<td>\r\n</td>\r\n<td>\r\n</td>\r\n<td>\r\n</td>\r\n<td>\r\n</td>\r\n<td>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td>\r\n...\r\n</td>\r\n<td>\r\n...\r\n</td>\r\n<td>\r\n</td>\r\n<td>\r\n</td>\r\n<td>\r\n</td>\r\n<td>\r\n</td>\r\n<td>\r\n</td>\r\n<td>\r\n</td>\r\n<td>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td>\r\nW-2\r\n</td>\r\n<td>\r\n0\r\n</td>\r\n<td>\r\n</td>\r\n<td>\r\n</td>\r\n<td>\r\n</td>\r\n<td>\r\n</td>\r\n<td>\r\n</td>\r\n<td>\r\n</td>\r\n<td>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td>\r\nW-1\r\n</td>\r\n<td>\r\n0\r\n</td>\r\n<td>\r\n</td>\r\n<td>\r\n</td>\r\n<td>\r\n</td>\r\n<td>\r\n</td>\r\n<td>\r\n</td>\r\n<td>\r\n</td>\r\n<td>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td>\r\nW\r\n</td>\r\n<td>\r\n0\r\n</td>\r\n<td>\r\n</td>\r\n<td>\r\n</td>\r\n<td>\r\n</td>\r\n<td>\r\n</td>\r\n<td>\r\n</td>\r\n<td>\r\n</td>\r\n<td>\r\n</td>\r\n</tr>\r\n</table>\n<ul>\n<li><strong>초깃값 셋팅하기</strong>\n<ul>\n<li>배낭의 최대 무게가 0일 경우, 배낭에 넣을 수 있는 최대 가치는 0이다.</li>\n<li>주어진 물건이 0개 일 경우, 배낭에 넣을 수 있는 최대 가치는 0이다.</li>\n</ul>\n</li>\n<li><strong>부분집합의 최적해와 상위집합의 최적해 관계 찾기</strong>\n<ul>\n<li>DP[w][n] (1 &#x3C;= w &#x3C;= W, 1 &#x3C;= n &#x3C;= N) 의 경우를 생각해보자.<br>\n즉 가방의 최대 무게가 w이고, 첫번째 물건부터 n번째 물건이 주어졌을 때 가방에 최대로 넣을 수 있는 가치를 부분집합의 관계를 이용해 설명하면 다음과 같다.</li>\n<li>DP[w][n] = max(DP[w][n-1], DP[w-k][n-1] + v) (k는 n번째 물건의 무게이고, v는 n번째 물건의 가치이다.)<br>\nn번째 까지의 물건이 주어졌을 때 모든 가짓 수는, n번째 물건을 넣지 못한 경우와 n번째 물건을 넣은 두 가지로 분리할 수 있다. 따라서 각각의 경우에 대한 최적해를 비교함으로써 n번째 까지의 물건이 주어졌을 때의 최적해를 얻을 수 있다.</li>\n</ul>\n</li>\n</ul>\n<h2>4.1. DP</h2>\n<pre><code class=\"language-python\">def DP(N, MAX_WEIGHT, weight, value):\r\n    # 행 : 가방의 최대 무게/ 열: i번째 물건\r\n    # DP[i][j] : 무게가 i인 가방에 j번째 물건가지 고려했을 때, 최대로 넣을 수 있는 가치\r\n    DP = [[0] * (N + 1) for _ in range(MAX_WEIGHT + 1)]\r\n\r\n    for bag_weight in range(1, MAX_WEIGHT + 1):\r\n        for obj_idx in range(1, N + 1):\r\n            obj_weight = weight[obj_idx]  # n번째 물건의 무게\r\n            obj_value = value[obj_idx]    # n번째 물건의 가치\r\n\r\n            include_case = 0              # n번째 물건의 무게가 가방의 무게를 초과할 경우, default 값으로 0을 설정\r\n            if bag_weight >= obj_weight:\r\n                include_case = DP[bag_weight-obj_weight][obj_idx - 1] + obj_value\r\n            exclude_case = DP[bag_weight][obj_idx - 1]\r\n            DP[bag_weight][obj_idx] = max(include_case, exclude_case)  # max(n번째 물건을 넣는 경우, n번째 물건을 넣지 않는 경우)\r\n\r\n    return DP[-1][-1]\r\n\r\nif __name__ == \"__main__\":\r\n    N, MAX_WEIGHT = map(int, input().split())\r\n\r\n    weight = [0] * (N + 1)\r\n    value = [0] * (N + 1)\r\n    for i in range(1, N + 1):\r\n        weight[i], value[i] = map(int, input().split())\r\n\r\n    answer = DP_top_down(N, MAX_WEIGHT, weight, value)\r\n    print(answer)\r\n\n</code></pre>\n<h2>4.2. Memoization</h2>\n<pre><code class=\"language-python\">def DP_top_down(N, MAX_WEIGHT, weight, value):\r\n    # 행 : 가방의 최대 무게/ 열: i번째 물건\r\n    # DP[i][j] : 무게가 i인 가방에 j번째 물건가지 고려했을 때, 최대로 넣을 수 있는 가치\r\n    DP = [[0] * (N + 1) for _ in range(MAX_WEIGHT + 1)]\r\n\r\n    def memoization(bag_weight, obj_idx):\r\n        # 베이스 조건\r\n        if bag_weight &#x3C;= 0 or obj_idx &#x3C;= 0:\r\n            return 0\r\n\r\n        # memoization한 값이 있을 경우, 해당 값을 반환\r\n        if DP[bag_weight][obj_idx]:\r\n            return DP[bag_weight][obj_idx]\r\n\r\n        # memoization한 값이 없을 경우, DP와 같은 방식으로 계산\r\n        obj_weight = weight[obj_idx]\r\n        obj_value = value[obj_idx]\r\n\r\n        include_case = 0              # n번째 물건의 무게가 가방의 무게를 초과할 경우, default 값으로 0을 설정\r\n        if bag_weight >= obj_weight:\r\n            include_case = memoization(bag_weight-obj_weight, obj_idx - 1) + obj_value  # n번째 물건을 넣는 경우\r\n        exclude_case = memoization(bag_weight, obj_idx - 1)                         # n번째 물건을 넣지 않는 경우\r\n        DP[bag_weight][obj_idx] = max(include_case, exclude_case)                   # 결괏값 memoization\r\n\r\n        return DP[bag_weight][obj_idx]  # 결괏값 반환\r\n\r\n    return memoization(MAX_WEIGHT, N)  # 목표값부터 top-down방식으로 재귀호출\r\n\r\nif __name__ == \"__main__\":\r\n    N, MAX_WEIGHT = map(int, input().split())\r\n\r\n    weight = [0] * (N + 1)\r\n    value = [0] * (N + 1)\r\n    for i in range(1, N + 1):\r\n        weight[i], value[i] = map(int, input().split())\r\n\r\n    answer = DP_top_down(N, MAX_WEIGHT, weight, value)\r\n    print(answer)\n</code></pre>"}},"pageContext":{"pagePath":"posts/Algorithm/DP.md","id":"fe66208e-7fe6-5afb-a230-a5f12aa201e1","parent":{"id":"54b68164-06d2-5861-b5e4-0e5473d031a0","name":"DP","relativePath":"Algorithm/DP.md"}}},"staticQueryHashes":["1274812890","3935499650","82772122"],"slicesMap":{}}