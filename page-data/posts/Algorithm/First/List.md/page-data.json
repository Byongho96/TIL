{"componentChunkName":"component---src-templates-post-tsx","path":"/posts/Algorithm/First/List.md/","result":{"data":{"markdownRemark":{"id":"548c8a15-1ef3-5374-8d87-aca626ec4ed6","html":"<h2>1. Algorithm</h2>\n<ul>\n<li>The procedure to solve the problem</li>\n<li><strong>Pseudo code</strong> or <strong>Flow chart</strong></li>\n<li><strong>Good Algorithm</strong>\n<ul>\n<li>accuracy</li>\n<li>time(the amount of operations)</li>\n<li>memory usage</li>\n<li>simplicity(easy to be recognized)</li>\n<li>opimization</li>\n</ul>\n</li>\n<li><strong>Indicator of Performance</strong>\n<ul>\n<li>Time complexity == O\n<ul>\n<li>the order of the highest order term</li>\n<li>O(3*n**2 + 2*n + 3) == O(n**2)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2>2. Array</h2>\n<ul>\n<li>==in python == List==</li>\n<li>The Data structure arraying several data in a list</li>\n<li>control several data by only one variable</li>\n</ul>\n<h3>2-1. 1-Dimensional Array</h3>\n<ul>\n<li><strong>Declaration</strong>\n<ul>\n<li>Arr = list()</li>\n<li>Arr = []</li>\n<li>Arr = [0] * 10</li>\n</ul>\n</li>\n<li><strong>Access</strong>\n<ul>\n<li>by using index of a list</li>\n</ul>\n</li>\n</ul>\n<h2>3. Sort</h2>\n<ul>\n<li>Arraging more than one data according to certain criteria</li>\n<li>Types\n<ul>\n<li>Bubble</li>\n<li>Counting</li>\n<li>Selection</li>\n<li>Quick</li>\n<li>Insertion</li>\n<li>Merge</li>\n</ul>\n</li>\n</ul>\n<h3>3-1. Bubble Sort</h3>\n<ul>\n<li>exchaing positions by comparing two adjacent elements</li>\n<li><strong>O(n**2)</strong></li>\n</ul>\n<pre><code class=\"language-python\">def BubbleSort(arr):\r\n    N = len(arr)\r\n    # for i: N-1 -> 1\r\n    for i in range(N-1, 0, -1):\r\n        # for j: 0 -> i-1\r\n        for j in range(0, i):\r\n            if a[j] > a[j+1]:\r\n                a[j], a[j+1] = a[j+1], a[j]\n</code></pre>\n<h3>3-2. Counting Sort</h3>\n<ul>\n<li>Counting how many times each element appears in the array</li>\n<li>limitation\n<ul>\n<li><strong>the elements could be expressed by int</strong></li>\n</ul>\n</li>\n<li><strong>O(n+k)</strong>\n<ul>\n<li>n = len(arr)</li>\n<li>k = the biggest integer</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"language-python\">def CountingSort(arr, k):\r\n    result = [0] * len(arr)\r\n    # 0 ~ k\r\n    # counts array starts with 0\r\n    # check the last for-loop\r\n    counts = [0] * (k + 1)\r\n    # make counts array\r\n    for i in range(0, len(arr)):\r\n        counts[arr[i]] += 1\r\n    # accumulate counts array\r\n    for i in range(1, len(counts)):\r\n        counts[i] += counts[i-1]\r\n    # make results from behind of arr\r\n    # stable sort\r\n    for i in range (len(result)-1, -1, -1):\r\n        counts[arr[i]] -= 1\r\n        results[counts[arr[i]]] = arr[i]\n</code></pre>\n<h3>3-3. Baby-Gin Game(Ex. Exaustive Search)**</h3>\n<h4>3-3-1. Exaustive Search</h4>\n<ul>\n<li>a.k.a <strong>Brute-force</strong> or <strong>generate-and-test</strong></li>\n<li>Check the number of all cases and return the result</li>\n<li>useful when the cases is not big</li>\n<li>Permutation\n<ul>\n<li>pick several elements and arrange them</li>\n<li>nPr = n * (n-1) * (n-2) * ... * (n-r+1) = n! / (n-r)!</li>\n<li>nPn = n!</li>\n<li>Ex. making permutation for {1, 2, 3}\n<pre><code class=\"language-python\">for i1 in range(1, 4):\r\n    for i2 in range(1, 4):\r\n        if i2 != i1:\r\n            for i3 in range(1, 4):\r\n                if i3 != i1 and i3 != i2:\r\n                    print(i1, i2, i3)\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<h4>3-3-2. Greedy Algorithm</h4>\n<ul>\n<li><strong>the solution for a local range</strong> == ==<strong>user design</strong>==</li>\n<li>alternative of exaustive search</li>\n<li><strong>Procedure</strong>\n<ol>\n<li>Selecting solution\n<ul>\n<li>select the best solution\n<ul>\n<li>Ex. select the largest coin</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Feasiblity check\n<ul>\n<li>check whether the selected solution is feasible\n<ul>\n<li>Ex. check whether the coin is smaller than the change</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Solution check\n<ul>\n<li>check whether the problem is solved\n<ul>\n<li>Ex. check wheter all the change is returned</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>Ex. 444345\n<ul>\n<li>counts = [0, 0, 0, 1, 4, 1, 0, 0, 0, 0, 0]</li>\n<li>tri -> run\n<ul>\n<li>check tri repeatedly until there's none</li>\n<li>check run repeatedly until there's none</li>\n</ul>\n<pre><code class=\"language-python\">num = 444345\r\n# adding two more space to complete tri-run check in one loop\r\n# depend on wheter you choose between using more memory or spending more time\r\ncounts = [0] * 12\r\n# making counts array\r\nwhile num > 0:\r\n    counts[num % 10] += 1\r\n    num //= 10 \r\n\r\ni = 0\r\ntri  = run = 0\r\nwhile i &#x3C; 10:\r\n    # to check triplet\r\n    if counts[i] >= 3:\r\n        c[i] -= 3\r\n        tri += 1\r\n        continue\r\n    # to check run\r\n    if counts[i] >= 1 and c[i+1] >= 1 and c[i+2] >= 3=2:\r\n        c[i] -= 1\r\n        c[i+1] -= 1\r\n        c[i+2] -= 1\r\n        continue\r\n    i += 1\r\nif run + tri == 2 : print('Baby Gin') \n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<h3>3-4. Selection Sort</h3>\n<ul>\n<li><strong>O(n**2)</strong>\n<pre><code class=\"language-python\">    def selectionSort(a, N):\r\n        for i in range(N-1):\r\n            minIdx = i\r\n            for j in range(i+1, N):\r\n                if a[minIdx] > a[j]:\r\n                    minIdx = j\r\n            a[i], a[minIdx] = a[minIdx], a[i]\n</code></pre>\n</li>\n<li>find k_th minimum\n<ul>\n<li>O(n*k)\n<pre><code class=\"language-python\">def selectionSort(a, k):\r\n    for i in range(k):\r\n        minIdx = i\r\n        for j in range(i+1, len(a)):\r\n            if a[minIdx] > a[j]:\r\n                minIdx = j\r\n        a[i], a[minIdx] = a[minIdx], a[i]\r\n    return a[k-1] # k_th min\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2>4. 2-dimensional Array</h2>\n<p><strong>list that has lists as elements</strong></p>\n<h3>4-1. traversal</h3>\n<ul>\n<li>row-first\n<pre><code class=\"language-python\">for i in range(N):\r\n    for j in range(M):\r\n        arr[i][j]\n</code></pre>\n</li>\n<li>column-first\n<pre><code class=\"language-python\">for j in range(N):\r\n    for i in range(M):\r\n        arr[i][j]\n</code></pre>\n</li>\n<li>zig-zag\n<pre><code class=\"language-python\">for i in range(N):\r\n    for j in range(M):\r\n        arr[i][j + (M - 1 - 2*j) * (i % 2)]\n</code></pre>\n</li>\n<li>using <strong>delta</strong>\n<pre><code class=\"language-python\"># N * M\r\ndi[] = [0, 1, 0, -1] # 우, 하, 좌, 상\r\ndj[] = [1, 0, -1, 0]\r\nfor i in range(N):\r\n    for j in range(M):\r\n        for k in range(4):\r\n            ni = i + di[k]\r\n            nj = j + dj[k]\r\n            if  0 &#x3C;= ni &#x3C; N and 0 &#x3C;= nj &#x3C; M\r\n                test(arr[ni][nj])\n</code></pre>\n<pre><code class=\"language-python\"># N * M\r\ndi[] = [0, 1, 0, -1] # (우, 하, 좌, 상) * 2\r\ndj[] = [1, 0, -1, 0]\r\nfor i in range(N):\r\n    for j in range(M):\r\n        for d in range(1, 3):\r\n            for k in range(4):\r\n                ni = i + di[k] * d\r\n                nj = j + dj[k] * d\r\n                if  0 &#x3C;= ni &#x3C; N and 0 &#x3C;= nj &#x3C; M\r\n                    test(arr[ni][nj])\n</code></pre>\n</li>\n</ul>\n<h3>4-2. Transpose matrix</h3>\n<pre><code class=\"language-python\">arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\r\n\r\nfor i in range(N):\r\n    for j in range(N):\r\n        if i &#x3C; j:\r\n            arr[i][j], arr[j][i] = arr[j][i], arr[i][j]\n</code></pre>\n<hr>\n<h2>5. Subset</h2>\n<ul>\n<li>the num of subset of n-array == 2**n</li>\n</ul>\n<pre><code class=\"language-python\"># len(arr) == 4\r\nbit = [0] * 4\r\nfor i in range(2):\r\n    bit[0] = i\r\n    for j in range(2):\r\n        bit[1] = j\r\n        for k in range(2):\r\n            bit[2] = k\r\n            for j in range(2):\r\n                bit[3] = l\r\n                print(bit)\n</code></pre>\n<ul>\n<li>bit operator\n<ul>\n<li><strong>&#x26;</strong>: bit AND</li>\n<li><strong>|</strong>: bit OR</li>\n<li><strong>&#x3C;&#x3C;</strong>: bit left(==*2)</li>\n<li><strong>>></strong>: bit right(//*2)</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"language-python\"># len(arr) == 4\r\narr = [1, 2, 3, 4, 5, 6]\r\n\r\nn = len(arr)\r\nfor i in range(1&#x3C;&#x3C;n): #2**n bit\r\n    subset = [0]\r\n    for j in range(n):\r\n        if i &#x26; (1&#x3C;&#x3C;j): # i's jth == 0? \r\n            subset.append[arr[j]]\r\n    subsets.append(subset)\n</code></pre>\n<hr>\n<h2>6. Search</h2>\n<p><strong>Types</strong></p>\n<ul>\n<li>Sequential search</li>\n<li>Binary search</li>\n<li>hash</li>\n</ul>\n<h3>6-1. Suequential Search</h3>\n<ul>\n<li><strong>un-sorted</strong>\n<ul>\n<li><strong>O(n)</strong>: (n+1)/2\n<pre><code class=\"language-python\">def SequentialSearch(a, n, key)\r\ni = 0\r\nwhile i &#x3C; n and a[i] != key:\r\n    i +=1\r\nif i &#x3C; n: return i # serched\r\nelse: return -1\n</code></pre>\n</li>\n</ul>\n</li>\n<li><strong>sorted</strong>\n<ul>\n<li><strong>O(n)</strong>\n<pre><code class=\"language-python\">def SequentialSearch2(a, n, key)\r\ni = 0\r\nwhile i &#x3C; n and a[i] &#x3C; key:\r\n    i +=1\r\nif i &#x3C; n and a[i] == key:\r\n    return i # serched\r\nelse: return -1\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<h3>6-2. Binary Search</h3>\n<ul>\n<li><strong>only for the sorted</strong>\n<ul>\n<li>if data is inserted or deleted, the set has to be sorted again</li>\n<li><strong>O(n)</strong>\n<pre><code class=\"language-python\">def BinarySearch(a, N, key):\r\n    start = 0\r\n    end = N-1\r\n    while start &#x3C;= end: # `&#x3C;=`should be used!\r\n        middle = (start + end) // 2\r\n        if a[middle] = key:\r\n            return True\r\n        elif a[middle] > key:\r\n            end = middle - 1\r\n        else:\r\n            start = middle + 1\r\n    return False\n</code></pre>\n</li>\n<li><strong>O(log(n))</strong>\n<pre><code class=\"language-python\">def BinarySearch2(a, start, end, key):\r\n    if start > end:\r\n        return False\r\n    else:\r\n        middle = (start + end) // 2\r\n        if a[middle] = key:\r\n            return True\r\n        elif a[middle] > key:\r\n            return BinarySearch2(a, start, middle-1, key)\r\n        else:\r\n            return BinarySearch2(a, middle+1,end, key)\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<p>.</p>"}},"pageContext":{"pagePath":"posts/Algorithm/First/List.md","id":"548c8a15-1ef3-5374-8d87-aca626ec4ed6","parent":{"id":"3dec582b-52d7-5d8c-9048-61785ae8f22c","name":"List","relativePath":"Algorithm/First/List.md"}}},"staticQueryHashes":["1274812890","3935499650","82772122"],"slicesMap":{}}