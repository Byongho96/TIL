{"componentChunkName":"component---src-templates-post-tsx","path":"/posts/Algorithm/First/Divide_Conquer.md/","result":{"data":{"markdownRemark":{"id":"1426f5ab-d830-5c34-a917-54733d927dcc","html":"<h2>1. Merge Sort</h2>\n<pre><code class=\"language-python\">def merge(left, right):\r\n    result = []\r\n    L = len(left)\r\n    R = len(right)\r\n    l, r = 0,  0 \r\n    while l &#x3C; L or r &#x3C; R:\r\n        if l &#x3C; L and r &#x3C; R:\r\n            if left[l] &#x3C;= right[r]:\r\n                result.append(left[l])\r\n                l += 1\r\n            else:\r\n                result.append(right[r])\r\n                r += 1\r\n        elif l &#x3C; L:\r\n            result.append(left[l])\r\n            l += 1\r\n        elif r &#x3C; R:\r\n            result.append(right[r])\r\n            r += 1\r\n    return result\r\n\r\ndef merge_sort(lst):\r\n    L = len(lst)\r\n\r\n    if L == 1:\r\n        return lst\r\n\r\n    m = L // 2\r\n    left = merge_sort(:m)\r\n    right = merge_sort(m:)\r\n\r\n    return merge(left, right)\n</code></pre>\n<pre><code class=\"language-python\">def merge_sort(lst):\r\n    L = len(lst)\r\n\r\n    if L == 1:\r\n        return lst\r\n\r\n    m = L // 2\r\n    left = merge_sort(:m)\r\n    right = merge_sort(m:)\r\n\r\n    result = []\r\n    l = r = 0\r\n    while l &#x3C; len(left) and r &#x3C; len(right):\r\n        if left[l] &#x3C; right[r]:\r\n            result.append(left[l])\r\n            l += 1\r\n        else:\r\n            result.append(right[r])\r\n            r += 1\r\n    result += left[l:] + right[r:]  # lst[index:]이면, index out of range가 아니라 그냥 빈 리스트 반환!!\r\n\r\n    return result\n</code></pre>\n<h2>2. Quick Sort</h2>\n<ul>\n<li>Hoare-Partition</li>\n</ul>\n<pre><code class=\"language-python\">def partition(l, r):\r\n    pivot = lst[l]\r\n    i = l\r\n    j = r\r\n    while i &#x3C;= j:\r\n        while i &#x3C;= j and lst[i] &#x3C;= pivot:\r\n            i += 1\r\n        while i &#x3C;= j and lst[j] >= pivot:\r\n            j -= 1\r\n        if i &#x3C; j:\r\n            lst[i], lst[j] = lst[j], lst[i]\r\n    lst[l], lst[j] = lst[j], lst[l]\r\n    return j\r\n\r\ndef quick_sort(l, r):\r\n    if l &#x3C; r:\r\n        s = partition(l, r)\r\n        quick_sort(l, s-1)\r\n        quick_sort(s+1, r)\n</code></pre>\n<ul>\n<li>Lomuto partition</li>\n</ul>\n<pre><code class=\"language-python\">def quick_sort(l, r):\r\n    if l >= r:\r\n        return\r\n    \r\n    p = lst[r]\r\n    i = l\r\n    for j in range(l, r):\r\n        if lst[j] &#x3C; p:\r\n            lst[i], lst[j] = lst[j], lst[i]\r\n            i += 1\r\n    lst[i], lst[r] = lst[r], lst[i]\r\n\r\n    quick_sort(l, i-1)\r\n    quick_sort(i+1, r)\n</code></pre>\n<h2>3. Binary Search</h2>\n<pre><code class=\"language-python\">def binarysearch(l, r, key):\r\n    while l &#x3C;= r:\r\n        m = (l + r) // 2\r\n        if lst[m] == key:\r\n            return m\r\n        elif lst[m] > key:\r\n            r = m - 1\r\n        else:\r\n            l = m + 1\r\n    return -1\n</code></pre>"}},"pageContext":{"pagePath":"posts/Algorithm/First/Divide_Conquer.md","id":"1426f5ab-d830-5c34-a917-54733d927dcc","parent":{"id":"d10f45b4-a7e5-5f2a-b679-b5158fcfa495","name":"Divide_Conquer","relativePath":"Algorithm/First/Divide_Conquer.md"}}},"staticQueryHashes":["1274812890","3935499650","82772122"],"slicesMap":{}}