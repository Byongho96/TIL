{"componentChunkName":"component---src-templates-post-tsx","path":"/posts/Django/09_Django_Static_Media.md/","result":{"data":{"markdownRemark":{"id":"44df22b1-b52a-58a0-80aa-087d36beccf2","html":"<h1>Django Static Media</h1>\n<h2>Index</h2>\n<ul>\n<li><a href=\"#1-static-files\">1. Static Files</a>\n<ul>\n<li><a href=\"#11-static-files\">1.1. Static Files</a></li>\n<li><a href=\"#12-static-files-with-django\">1.2. Static Files with Django</a></li>\n<li><a href=\"#13-deploy-static-files\">1.3. Deploy Static Files</a>\n<ul>\n<li><a href=\"#131-static-root\">1.3.1. STATIC_ROOT</a></li>\n<li><a href=\"#132-procedure\">1.3.2. Procedure</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#2-media-files\">2. Media Files</a>\n<ul>\n<li><a href=\"#21-imagefield\">2.1. ImageField()</a>\n<ul>\n<li><a href=\"#212-filefield\">2.1.2. FileField()</a></li>\n</ul>\n</li>\n<li><a href=\"#22-before-using-media-files\">2.2. Before Using Media Files</a></li>\n</ul>\n</li>\n<li><a href=\"#3-image-file-crud\">3. Image File CRUD</a>\n<ul>\n<li><a href=\"#31-create\">3.1. Create</a></li>\n<li><a href=\"#32-read\">3.2. READ</a></li>\n<li><a href=\"#33-update\">3.3. UPDATE</a></li>\n</ul>\n</li>\n<li><a href=\"#4-image-resizing\">4. Image Resizing</a>\n<ul>\n<li><a href=\"#41-django-imagekit\">4.1. Django Imagekit</a></li>\n<li><a href=\"#42-make-thumbnail-without-saving-the-original-image\">4.2. Make Thumbnail Without Saving the Original Image</a></li>\n<li><a href=\"#43-make-thumbnail-with-saving-the-original-image\">4.3. Make Thumbnail With Saving the Original Image</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1>1. Static Files</h1>\n<h2>1.1. Static Files</h2>\n<p><strong>Files that do not require additional processing before being shown to the user.</strong> To request a static file to the server, we should know the address(url) of the file</p>\n<ul>\n<li><strong>Examples</strong>\n<ul>\n<li>media file</li>\n<li>javascript file</li>\n<li>CSS file</li>\n</ul>\n</li>\n</ul>\n<h2>1.2. Static Files with Django</h2>\n<ol>\n<li>\n<p><strong>Check <code>INSTALLED_APPS</code> in settings.py</strong><br>\nIt is set by default.</p>\n<pre><code class=\"language-python\">INSTALLED_APPS = [\r\n django.contrib.staticfile,\r\n ... ]\n</code></pre>\n</li>\n<li>\n<p><strong>Set <code>STATIC_DIRS</code> in settings.py</strong><br>\nIt's about setting an additional static file path in addition to the app path.</p>\n<pre><code class=\"language-python\"># Default: []\r\nSTATICFILES_DIRS = [\r\n    BASE_DIR / 'static',\r\n]\n</code></pre>\n</li>\n<li>\n<p><strong>Set <code>STATIC_URL</code> in settings.py</strong><br>\nThe path corresponding to <code>STATIC_ROOT</code>. It is set to <code>STATIC_URL = '/static/'</code> by default.</p>\n</li>\n<li>\n<p><strong>Make 'static/app_name/' folder for each app to divide namespace</strong><br>\n<code>my_app/static/my_app/sample_img.jpg</code></p>\n</li>\n<li>\n<p><strong>print with static templates tags</strong></p>\n<pre><code class=\"language-html\">{% extends 'must_be_on_the_top.html' %}\r\n&#x3C;!-- import static -->\r\n{% load static %}\r\n&#x3C;img src=\"{% static 'app_name/img_name.jpg' %}\" />\n</code></pre>\n</li>\n</ol>\n<h2>1.3. Deploy Static Files</h2>\n<h3>1.3.1. STATIC_ROOT</h3>\n<p><strong>Where all the static files are collected</strong> when the command <code>collectstatic</code> is excuted. The default is <code>None</code>. If <code>DEBUG = TRUE</code>, STATIC_ROOT is not applied.</p>\n<p>It's required because the server which actually runs the project doesn't know where the static files are.</p>\n<h3>1.3.2. Procedure</h3>\n<ol>\n<li><strong>Set <code>STATIC_ROOT</code> in settings.py</strong>\n<pre><code class=\"language-python\">STATIC_ROOT = BASE_DIR / 'staticfiles'\n</code></pre>\n</li>\n<li><strong>Run the cmd</strong><br>\n<code>python manage.py collectstatic</code></li>\n</ol>\n<hr>\n<h1>2. Media Files</h1>\n<p><strong>The static files which are uploaded by the user.</strong></p>\n<h2>2.1. ImageField()</h2>\n<ul>\n<li><strong>The model field for image files.</strong></li>\n<li>It inherits FileField and has a function of checking the validity of an image file.</li>\n<li><strong>The instance of ImageField is a string with a maximum length of 100</strong>\n<ul>\n<li>The string is the path after <code>MEDIA_ROOT</code></li>\n<li>When the same name of image is saved in the exactly the same directory, a random string is added to the name</li>\n</ul>\n</li>\n</ul>\n<h3>2.1.2. FileField()</h3>\n<p><strong>FileField(upload_to='', storage=None, max_length=100, **options)</strong></p>\n<ul>\n<li><strong>upload_to</strong>\n<ul>\n<li>setting the detailed path (path after MEDIA_ROOT)</li>\n</ul>\n</li>\n</ul>\n<h2>2.2. Before Using Media Files</h2>\n<ol>\n<li>\n<p><strong>Set <code>MEDIA_ROOT</code></strong><br>\nThe absolute path where all the media files will be stored. It must be different from <code>STATIC_ROOT</code></p>\n<pre><code class=\"language-python\"># Default: ''\r\nMEDIA_ROOT = BASE_DIR / 'media'\n</code></pre>\n</li>\n<li>\n<p><strong>Set <code>MEDIA_URL</code></strong><br>\nThe path corresponding to <code>MEDIA_ROOT</code>. It must be different from STATIC_URL.<br>\n<code>MEDIA_URL = '/media/'</code></p>\n</li>\n<li>\n<p><strong>Link MEDIA_URL to MEDIA_ROOT</strong></p>\n<pre><code class=\"language-python\"># project/urls.py\r\nfrom django.conf import settings\r\nfrom django.conf.urls.static import static\r\n\r\nurlpatterns = [\r\n    ...,\r\n] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n</code></pre>\n</li>\n<li>\n<p><strong>Install Pillow library</strong><br>\nThe libarary which is necessary for processing image files in Python.<br>\n<code>pip install Pillow</code></p>\n</li>\n</ol>\n<hr>\n<h1>3. Image File CRUD</h1>\n<h2>3.1. Create</h2>\n<ul>\n<li>\n<p><strong>models.py</strong></p>\n<pre><code class=\"language-python\">class Article(models.Model):\r\n    image = models.ImageField(blank=True, upload_to='images/')\n</code></pre>\n<ul>\n<li>\n<p><strong>blank</strong></p>\n<ul>\n<li>The field can be blank, and '' can pass the validation test.</li>\n<li>validation-related</li>\n</ul>\n</li>\n<li>\n<p><strong>upload_to(optional)</strong></p>\n<ul>\n<li>\n<p>Sets the detailed path (path after MEDIA_ROOT)</p>\n<ul>\n<li>Example of using Python time module<br>\n<code>upload_to = '%Y/%m/%d/</code></li>\n</ul>\n</li>\n<li>\n<p>A functon can be used as the parameter.</p>\n<pre><code class=\"language-python\">def articles_image_path(self, filename):\r\n    return f'images/{self.user.username}/{filename}'\r\n\r\nclass Article(models.Model):\r\n    image = models.ImageField(blank=True, upload_to=articles_image_path)\n</code></pre>\n<ul>\n<li>The arguments are fixed like above. <a href=\"https://docs.djangoproject.com/en/4.1/ref/models/fields/#filefield\">Django doc about upload_to</a></li>\n<li>pk can't be used in the function becuase the function is excuted before saved</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>create.html</strong></p>\n<pre><code class=\"language-html\">&#x3C;form action=\"#\" method=\"POST\" enctyp=\"multipart/form-data\">&#x3C;/form>\n</code></pre>\n<ul>\n<li><strong>enctype</strong>\n<ul>\n<li>Sets the encoding type of the form</li>\n<li>Default: aplication/x-www-from-rulencoded</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>views.py</strong></p>\n<pre><code class=\"language-python\">def created(request):\r\n    if request.method == 'POST':\r\n        form = ArticleForm(request.POST, request.FILES)\r\n    ...\n</code></pre>\n<ul>\n<li>BaseModelForm(data=None, files=None, ..., instance=None)</li>\n</ul>\n</li>\n</ul>\n<h2>3.2. READ</h2>\n<ul>\n<li><strong>detail.html</strong>\n<pre><code class=\"language-html\">{% if article.image %}\r\n&#x3C;img src=\"{{ article.image.url }}\" alt=\"{{ article.image }}\" />\r\n{% endif %}\n</code></pre>\n</li>\n</ul>\n<h2>3.3. UPDATE</h2>\n<p><strong>Strictly speaking, it's not updating but a replacement</strong>\r\nThe manage the previous file, you should use an addtional library like <a href=\"https://pypi.org/project/django-cleanup/\">django-cleanup</a></p>\n<ul>\n<li><strong>update.html</strong>\n<pre><code class=\"language-html\">&#x3C;form action=\"#\" method=\"POST\" enctyp=\"multipart/form-data\">&#x3C;/form>\n</code></pre>\n</li>\n<li><strong>views.py</strong>\n<pre><code class=\"language-python\">def update(request):\r\n    article = Article.objects.get(pk=pk)\r\n    if request.method == 'POST':\r\n        form = ArticleForm(request.POST, request.FILES, instance=article)\r\n...\n</code></pre>\n</li>\n</ul>\n<hr>\n<h1>4. Image Resizing</h1>\n<p>Resizing the uploaded image to use storage space efficiently</p>\n<h2>4.1. Django Imagekit</h2>\n<ol>\n<li><strong>Install dajngo-imagekit</strong>\n<ul>\n<li><code>pip install dajngo-imagekit</code></li>\n</ul>\n</li>\n<li><strong>Add to INSTALLED_APPS</strong>\n<ul>\n<li><code>INSTALLED_APPS = ['imagekit', ]</code></li>\n</ul>\n</li>\n</ol>\n<h2>4.2. Make Thumbnail Without Saving the Original Image</h2>\n<ul>\n<li>\n<p><strong>models.py</strong></p>\n<pre><code class=\"language-python\">from imagekit.processors import Thumbnail\r\nfrom imagekit.models import ProcessedImageField\r\n\r\nclass Article(models.Model):\r\n    image = ProcessedIamgeField(\r\n        blank=True,\r\n        upload_to='thumbnails/',\r\n        processors=[Thumbnail(200, 300)],   # pixel : width, height\r\n        format='JPEG',\r\n        options={'quality':80}              # resolution\r\n    )\n</code></pre>\n</li>\n</ul>\n<h2>4.3. Make Thumbnail With Saving the Original Image</h2>\n<ul>\n<li>\n<p><strong>models.py</strong></p>\n<pre><code class=\"language-python\">from imagekit.processors import Thumbnail\r\nfrom imagekit.models import ProcessedImageField, ImageSpecField\r\n\r\nclass Article(models.Model):\r\n    image = models.ImageField(blank=True)\r\n    image_thumbnail = ProcessedImageField(\r\n        source='image',\r\n        processors=[Thumbnail(200, 300)],   # pixel : width, height\r\n        format='JPEG',\r\n        options={'quality':80}              # resolution\r\n    )\n</code></pre>\n<ul>\n<li><strong>The column of the <code>image_thumbnail</code> is not created.</strong> Only a cache file is created in the cache folder when the field is used.</li>\n</ul>\n</li>\n</ul>"}},"pageContext":{"pagePath":"posts/Django/09_Django_Static_Media.md","id":"44df22b1-b52a-58a0-80aa-087d36beccf2","parent":{"id":"96311594-f51e-5d4d-9660-adc9b52d31a9","name":"09_Django_Static_Media","relativePath":"Django/09_Django_Static_Media.md"}}},"staticQueryHashes":["1274812890","3935499650","82772122"],"slicesMap":{}}