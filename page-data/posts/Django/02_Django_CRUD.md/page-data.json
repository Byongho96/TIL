{"componentChunkName":"component---src-templates-post-tsx","path":"/posts/Django/02_Django_CRUD.md/","result":{"data":{"markdownRemark":{"id":"611caa65-0a75-5a55-90c6-13ebcec6de3f","html":"<h1>Django CRUD</h1>\n<h2>Index</h2>\n<ul>\n<li><a href=\"#0-cross-site-request-forgerycsrf\">0. Cross Site Request Forgery(CSRF)</a>\n<ul>\n<li><a href=\"#01-what-is-csrf\">0.1. What is CSRF</a></li>\n<li><a href=\"#02-csrf-token\">0.2. CSRF Token</a></li>\n</ul>\n</li>\n<li><a href=\"#1-model\">1. Model</a>\n<ul>\n<li><a href=\"#11-modelspy\">1.1. models.py</a></li>\n</ul>\n</li>\n<li><a href=\"#2-create\">2. Create</a>\n<ul>\n<li><a href=\"#21-urlspy\">2.1. urls.py</a></li>\n<li><a href=\"#22-viewspy\">2.2. views.py</a>\n<ul>\n<li><a href=\"#23-templateshtml\">2.3. templates.html</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#3-read\">3. Read</a>\n<ul>\n<li><a href=\"#31-urlspy\">3.1. urls.py</a></li>\n<li><a href=\"#32-viewspy\">3.2. views.py</a></li>\n<li><a href=\"#33-templateshtml\">3.3. templates.html</a></li>\n</ul>\n</li>\n<li><a href=\"#4-update\">4. Update</a>\n<ul>\n<li><a href=\"#41-urlspy\">4.1. urls.py</a></li>\n<li><a href=\"#42-viewspy\">4.2. views.py</a></li>\n<li><a href=\"#43-templateshtml\">4.3. templates.html</a></li>\n</ul>\n</li>\n<li><a href=\"#5-delete\">5. Delete</a>\n<ul>\n<li><a href=\"#51-urlspy\">5.1. urls.py</a></li>\n<li><a href=\"#52-viewspy\">5.2. views.py</a></li>\n<li><a href=\"#53-templateshtml\">5.3. templates.html</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1>0. Cross Site Request Forgery(CSRF)</h1>\n<p><a href=\"https://codevang.tistory.com/282\">CSRF에 대해 정리된 블로그 글</a></p>\n<h2>0.1. What is CSRF</h2>\n<p><strong>An attack that sends a request to the server that is unrelated to the user's intention</strong></p>\n<p>It can be done by creating a fake template that matches the server request format.</p>\n<h2>0.2. CSRF Token</h2>\n<p><strong>It's arbitrarily issued token by the server.</strong></p>\n<p>Server inserts a CSRF token into the template so that it can be automatically returned with the user's request. When a user request is received, the server checks the validity of the CSRF token. if the token is not valid, the server considers it as abnormal, and doesn't accept the data.</p>\n<hr>\n<h1>1. Model</h1>\n<h2>1.1. models.py</h2>\n<pre><code class=\"language-python\"># articles/models.py\r\nfrom django.db import models\r\n\r\n# Article inherits model.Model\r\nclass Article(models.Model):\r\n    title = models.CharField(max_length=10)\r\n    content = models.TextField()\n</code></pre>\n<hr>\n<h1>2. Create</h1>\n<h2>2.1. urls.py</h2>\n<pre><code class=\"language-python\">app_name = 'articles'\r\nurlpatterns = [\r\n    path('new/', views.new, name='new'),\r\n    path('create/', views.create, name='create'),\r\n]\n</code></pre>\n<h2>2.2. views.py</h2>\n<pre><code class=\"language-python\">def new(request):\r\n    return render(request, 'articles/new.html')\r\n\r\ndef create(request):\r\n    title = request.POST.get('title')\r\n    content = request.POST.get('content')\r\n\r\n    # 1.\r\n    # article = Article()\r\n    # article.title = title\r\n    # article.content = content\r\n    # article.save()\r\n\r\n    # 2.\r\n    article = Article(tite=title, content=content)\r\n    article.save()\r\n\r\n    # 3.\r\n    # Article.objects.create(title=title, content=content)\r\n\r\n    return redirect('articles:detail', article.pk)\n</code></pre>\n<h3>2.3. templates.html</h3>\n<p><strong>new.html</strong></p>\n<pre><code class=\"language-django\">&#x3C;h1>NEW&#x3C;/h1>\r\n&#x3C;form action=\"{% url 'articles:create' %}\" method=\"POST\">\r\n    {% csrf_token %}\r\n    &#x3C;label for=\"title\">Title:&#x3C;/label>\r\n    &#x3C;input type=\"text\" name=\"title\">&#x3C;br>\r\n    &#x3C;label for=\"content\">Content:&#x3C;/label>\r\n    &#x3C;textarea name=\"content\">&#x3C;/textarea>&#x3C;br>\r\n    &#x3C;input type=\"submit\">\r\n&#x3C;/form>\n</code></pre>\n<hr>\n<h1>3. Read</h1>\n<h2>3.1. urls.py</h2>\n<pre><code class=\"language-python\">app_name = 'articles'\r\nurlpatterns = [\r\n    path('index/', views.index, name='index'),\r\n    path('&#x3C;int:pk>/', views.detail, name='detail'),\r\n]\n</code></pre>\n<h2>3.2. views.py</h2>\n<pre><code class=\"language-python\">def index(request):\r\n    articles = Article.objects.all()\r\n    context = {\r\n        'articles': articles,\r\n    }\r\n    return render(request, 'articles/index.html', context)\r\n\r\ndef detail(request, pk):\r\n    article = Article.objects.get(pk=pk)\r\n    context = {\r\n        'article': article,\r\n    }\r\n    return render(request, 'articles/detail.html', context)\n</code></pre>\n<h2>3.3. templates.html</h2>\n<p><strong>index.html</strong></p>\n<pre><code class=\"language-django\">&#x3C;h1>Articles&#x3C;/h1>\r\n&#x3C;hr>\r\n{% for article in articles %}\r\n    &#x3C;p> title: {{ article.title }} &#x3C;/p>\r\n    &#x3C;p> content: {{ article.content }} &#x3C;/p>\r\n    &#x3C;hr>\r\n{% endfor %}\n</code></pre>\n<p><strong>detail.html</strong></p>\n<pre><code class=\"language-django\">&#x3C;h1>DETAIL&#x3C;/h1>\r\n&#x3C;h3>{{ article.pk }}th article&#x3C;/h3>\r\n&#x3C;hr>\r\n&#x3C;p> title: {{ article.title }} &#x3C;/p>\r\n&#x3C;p> content: {{ article.content }} &#x3C;/p>\r\n&#x3C;p> created at: {{ article.created_at }} &#x3C;/p>\r\n&#x3C;p> updated at: {{ article.updated_at }} &#x3C;/p>\r\n&#x3C;hr>\n</code></pre>\n<hr>\n<h1>4. Update</h1>\n<h2>4.1. urls.py</h2>\n<pre><code class=\"language-python\">app_name = 'articles'\r\nurlpatterns = [\r\n    path('&#x3C;int:pk>/edit/', views.edit, name='edit'),\r\n    path('&#x3C;int:pk>/update/', views.update, name='update'),\r\n]\n</code></pre>\n<h2>4.2. views.py</h2>\n<pre><code class=\"language-python\">def edit(request, pk):\r\n    article = Article.objects.get(pk=pk)\r\n    context = {\r\n        'article': article,\r\n    }\r\n    return render(request, 'articles/edit.html', context)\r\n\r\ndef update(request, pk):\r\n    article = Article.objects.get(pk=pk)\r\n    article.title = request.POST.get('title')\r\n    article.content = request.POST.get('content')\r\n    article.save()\r\n    return redirect('articles:detail', article.pk)\n</code></pre>\n<h2>4.3. templates.html</h2>\n<p><strong>edit.html</strong></p>\n<pre><code class=\"language-django\">&#x3C;h1>EDIT&#x3C;/h1>\r\n&#x3C;form action=\"{% url 'articles:update' article.pk %}\" method=\"POST\">\r\n    {% csrf_token %}\r\n    &#x3C;label for=\"title\">Title:&#x3C;/label>\r\n    &#x3C;input type=\"text\" name=\"title\" value={{article.title}}>&#x3C;br>\r\n    &#x3C;label for=\"content\">Content:&#x3C;/label>\r\n    &#x3C;textarea name=\"content\">{{article.content}}&#x3C;/textarea>&#x3C;br>\r\n    &#x3C;input type=\"submit\">\r\n&#x3C;/form>\n</code></pre>\n<hr>\n<h1>5. Delete</h1>\n<h2>5.1. urls.py</h2>\n<pre><code class=\"language-python\">app_name = 'articles'\r\nurlpatterns = [\r\n    path('&#x3C;int:pk>/delete/', views.delete, name='delete'),\r\n]\n</code></pre>\n<h2>5.2. views.py</h2>\n<pre><code class=\"language-python\">def delete(request, pk):\r\n    article = Article.objects.get(pk=pk)\r\n    article.delete()\r\n    return redirect('articles:index')\n</code></pre>\n<h2>5.3. templates.html</h2>\n<p><strong>detail.html</strong></p>\n<pre><code class=\"language-django\">&#x3C;h1>DETAIL&#x3C;/h1>\r\n&#x3C;h3>{{ article.pk }}th article&#x3C;/h3>\r\n&#x3C;hr>\r\n&#x3C;p> title: {{ article.title }} &#x3C;/p>\r\n&#x3C;p> content: {{ article.content }} &#x3C;/p>\r\n&#x3C;p> created at: {{ article.created_at }} &#x3C;/p>\r\n&#x3C;p> updated at: {{ article.updated_at }} &#x3C;/p>\r\n&#x3C;hr>\r\n&#x3C;form action=\"{% url 'articles:delete' article.pk %}\" method=\"POST\">\r\n    {% csrf_token %}\r\n    &#x3C;input type=\"submit\" value=\"DELETE\">\r\n&#x3C;/form>\n</code></pre>"}},"pageContext":{"pagePath":"posts/Django/02_Django_CRUD.md","id":"611caa65-0a75-5a55-90c6-13ebcec6de3f","parent":{"id":"b2e6f99d-aae0-5222-bce5-3b8604829118","name":"02_Django_CRUD","relativePath":"Django/02_Django_CRUD.md"}}},"staticQueryHashes":["1274812890","3935499650","82772122"],"slicesMap":{}}