{"componentChunkName":"component---src-templates-post-tsx","path":"/posts/Django/08_Django_Many_to_Many.md/","result":{"data":{"markdownRemark":{"id":"67bbe6fe-fa2d-5504-8ec0-573007b2fe98","html":"<h1>Django Many To Many Relationship</h1>\n<h2>Index</h2>\n<ul>\n<li><a href=\"#1-intro\">1. Intro</a>\n<ul>\n<li><a href=\"#11-terms\">1.1. Terms</a></li>\n<li><a href=\"#12-the-limits-of-n-1-relationship\">1.2. The limits of N:1 Relationship</a></li>\n<li><a href=\"#13-intermediary-model\">1.3. Intermediary Model</a></li>\n<li><a href=\"#14-many-to-many-field\">1.4. Many To Many Field</a></li>\n<li><a href=\"#15-many-to-many-table\">1.5. Many To Many Table</a></li>\n<li><a href=\"#16-with-extra-fields\">1.6. with Extra Fields</a></li>\n</ul>\n</li>\n<li><a href=\"#2-like-article-user\">2. Like (Article-User)</a></li>\n<li><a href=\"#3-follow-user-user\">3. Follow (User-User)</a>\n<ul>\n<li><a href=\"#31-profile-page\">3.1. Profile Page</a></li>\n<li><a href=\"#32-follow\">3.2. Follow</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1>1. Intro</h1>\n<h2>1.1. Terms</h2>\n<ul>\n<li><strong>Source Model</strong>\n<ul>\n<li>The model that has ManyToManyField</li>\n</ul>\n</li>\n<li><strong>Target model</strong>\n<ul>\n<li>The model that doesn't have ManyToManyField</li>\n</ul>\n</li>\n</ul>\n<h2>1.2. The limits of N:1 Relationship</h2>\n<pre><code class=\"language-python\">class Doctor(models.Model):\r\n    name = models.TextField()\r\n\r\nclass Patient(models.Model):\r\n    doctor = models.ForeignKey(Doctor, on_delete=modles.CASCADE)\r\n    name = models.TextField()\n</code></pre>\n<p>If one patient make reservations with 2 diffrent doctors, you can't distingush whether the first Alex and the second Alex is the same person.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">id</th>\n<th align=\"center\">name</th>\n<th align=\"center\">doctor_id</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">1</td>\n<td align=\"center\">Alex</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">1</td>\n<td align=\"center\">Alex</td>\n<td align=\"center\">2</td>\n</tr>\n</tbody>\n</table>\n<h2>1.3. Intermediary Model</h2>\n<pre><code class=\"language-python\">class Doctor(models.Model):\r\n    name = models.TextField()\r\n\r\nclass Patient(models.Model):\r\n    name = models.TextField()\r\n\r\nclass Reservation(models.Model):\r\n    doctor = models.ForeignKey(Doctor, on_delete=modles.CASCADE)\r\n    patient = models.ForeignKey(Patient, on_delete=modles.CASCADE)\n</code></pre>\n<ul>\n<li><strong>Create</strong>\n<ul>\n<li><code>Reservation.objects.create(doctor=doctor_instance, patient=patient_instance)</code></li>\n</ul>\n</li>\n<li><strong>Read</strong>\n<ul>\n<li>if doctor1 wants to read all the reservation\n<ul>\n<li><code>doctor1.reservaton_set.all()</code></li>\n</ul>\n</li>\n<li>if patient1 wants to read all the reservation\n<ul>\n<li><code>patinet1.reservaton_set.all()</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2>1.4. Many To Many Field</h2>\n<pre><code class=\"language-python\">class Doctor(models.Model):\r\n    name = models.TextField()\r\n\r\nclass Patient(models.Model):\r\n    doctors = models.ManyToManyField(Doctor)\r\n    name = models.TextField()\n</code></pre>\n<ul>\n<li>\n<p><strong>MantoToManyField(to, **options)</strong></p>\n<ul>\n<li><strong>to</strong>\n<ul>\n<li>the target model</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><strong>options</strong>\n<ul>\n<li><strong>related_name</strong>\n<ul>\n<li>The alias of the dereference manager.</li>\n<li>Default value is <code>modelName_set</code></li>\n</ul>\n</li>\n<li><strong>through</strong>\n<ul>\n<li><a href=\"#16-manytomanyfield-with-extra-fields\">Desginate an intermediary table</a></li>\n</ul>\n</li>\n<li><strong>symmetrical</strong>\n<ul>\n<li>Default: True</li>\n<li>This argument is valid, only when <code>to = 'self'</code></li>\n<li>When it's True, the record for the opposite direction is automatically added.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><strong>Create</strong>\n<ul>\n<li><code>patient1.doctors.add(doctor1)</code></li>\n<li><code>doctor1.patient_set.add(patient1)</code></li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><strong>Read</strong>\n<ul>\n<li>if doctor1 wants to read all the reservation\n<ul>\n<li><code>doctor1.patient_set.all()</code></li>\n<li><code>doctor1.patient_set.get(id=doctor_id)</code></li>\n</ul>\n</li>\n<li>if patient1 wants to read all the reservation\n<ul>\n<li><code>patient1.doctors.all()</code></li>\n<li><code>doctor1.patient_set.get(id=patient_id)</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>Delete</strong>\n<ul>\n<li>if doctor1 wants to cancel the reservation with patient1\n<ul>\n<li><code>doctor1.patient_set.remove(patient1)</code></li>\n</ul>\n</li>\n<li>if patient1 wants to cancel the reservation with doctor1\n<ul>\n<li><code>patient1.doctors.remove(doctor1)</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2>1.5. Many To Many Table</h2>\n<ul>\n<li><strong>Table Name</strong>\n<ul>\n<li>Default: <code>AppName_ModelName_FieldName</code></li>\n<li><code>db_table</code>\n<ul>\n<li>the argument for changing the table name</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>Field name</strong>\n<ul>\n<li>source model != target model\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>SourceModel_id</th>\n<th>TargetModel_id</th>\n</tr>\n</thead>\n</table>\n</li>\n<li>source model == target model (<code>to = 'self'</code>)\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>form_ModelName_id</th>\n<th>to_ModelName_id</th>\n</tr>\n</thead>\n</table>\n</li>\n</ul>\n</li>\n</ul>\n<h2>1.6. with Extra Fields</h2>\n<p><strong>Make an intermediary model</strong></p>\n<pre><code class=\"language-python\">class Doctor(models.Model):\r\n    name = models.TextField()\r\n\r\nclass Patient(models.Model):\r\n    doctors = models.ManyToManyField(Doctor, related_name='patients', through='Reservation')\r\n    name = models.TextField()\r\n\r\nclass Reservation(models.Model):\r\n    doctor = models.ForeignKey(Doctor, on_delete=modles.CASCADE)\r\n    patient = models.ForeignKey(Patient, on_delete=modles.CASCADE)\r\n    symptom = models.TextField()\r\n    reserved_at = models.DateTimeField(auto_now_add=True)\n</code></pre>\n<ul>\n<li><strong>Create</strong>\n<ul>\n<li>through Reservation Model\n<ul>\n<li><code>Reservation.objects.create(doctor=doctor1, patient=patient1, symptom='stomachache')</code></li>\n</ul>\n</li>\n<li>through ManyToMany Field\n<ul>\n<li><code>patient1.doctors.add(doctor1, through_defaults={'symptom': 'flu'})</code></li>\n<li>through_defaults can be defined as a function</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1>2. Like (Article-User)</h1>\n<ul>\n<li>\n<p><strong>models.py</strong></p>\n<pre><code class=\"language-python\">class Article(models.Model):\r\n    user = models.ForeignKey(setttings.AUTH_USER_MODEL, on_delete=models.CASCADE)\r\n    like_users = models.ManyToManyField(settings.AUTH_USER_MODEL, related_name=like_articles)\n</code></pre>\n<ul>\n<li><strong>relate_name should be specified</strong><br>\nOtherwise, in the upper case, the dereference manager name(user.article_set) would be duplicated.</li>\n</ul>\n</li>\n<li>\n<p><strong>forms.py</strong></p>\n<pre><code class=\"language-python\">class ArticleForm(models.ModelForm):\r\n\r\n    class Meta:\r\n        model = Article\r\n        exclude = ('user', 'like_users', )\n</code></pre>\n</li>\n<li>\n<p><strong>urls.py</strong></p>\n<pre><code class=\"language-python\">app_name = 'articles',\r\nurlpatterns = [\r\n    ...,\r\n    path('&#x3C;int:article_pk>/likes/', views.likes, name='likes')\r\n]\n</code></pre>\n</li>\n<li>\n<p><strong>views.py</strong></p>\n<pre><code class=\"language-python\">@require_POST\r\ndef likes(request, article_pk):\r\n    if request.user.is_authenticated:\r\n        article = Article.objects.get(pk=article_pk)\r\n        if article.like_usres.filter(pk=request.user.pk).exists():\r\n        # if request.user in article.like_users.all():\r\n        # get을 쓰면 객체가 없을 때 Error 발생\r\n            article.like_users.remove(request.user)\r\n        else:\r\n            article.like_users.add(request.user)\r\n        return redirect('articles:index')\r\n    return redirect('accounts:login')\n</code></pre>\n<ul>\n<li><strong>exists()</strong><br>\nReturns True if the QuerySet has value, or False</li>\n</ul>\n</li>\n<li>\n<p><strong>index.html</strong></p>\n<pre><code class=\"language-html\">{% block content %} {% for article in articles %}\r\n&#x3C;p>&#x3C;b>작성자 : {{ article.user }}&#x3C;/b>&#x3C;/p>\r\n&#x3C;p>글 번호: {{ article.pk }}&#x3C;/p>\r\n&#x3C;p>글 제목: {{ article.title }}&#x3C;/p>\r\n&#x3C;p>글 내용: {{ article.content }}&#x3C;/p>\r\n&#x3C;div>\r\n  &#x3C;form action=\"{% url 'article:likes' article.pk %}\" method=\"POST\">\r\n    {% csrf_token %} {% if request.user in article.like_users.all %}\r\n    &#x3C;input type=\"submit\" value=\"좋아요취소\" />\r\n    {% else %}\r\n    &#x3C;input type=\"submit\" value=\"좋아요\" />\r\n    {% endif %}\r\n  &#x3C;/form>\r\n&#x3C;/div>\r\n&#x3C;a href=\"{% url 'articles:detail' article.pk %}\">DETAIL&#x3C;/a>\r\n&#x3C;hr />\r\n{% endfor %} {% endblock content %}\n</code></pre>\n</li>\n</ul>\n<hr>\n<h1>3. Follow (User-User)</h1>\n<h2>3.1. Profile Page</h2>\n<ul>\n<li>\n<p><strong>urls.py</strong></p>\n<pre><code class=\"language-python\">app_name='accounts'\r\nurlpatterns = [\r\n    path('profile/&#x3C;str:username>/', views.profile, name='profile'),\r\n]\n</code></pre>\n<ul>\n<li>if you name the path as <code>path('&#x3C;str:username>/', views.profile, name='profile')</code>, you should consider the order of the url paths carefully.</li>\n</ul>\n</li>\n<li>\n<p><strong>views.py</strong></p>\n<pre><code class=\"language-python\">from django.contrib.auth import get_user_model\r\n\r\ndef profile(request, username):\r\n    User = get_user_model()\r\n    person = User.objects.get(username=username)\r\n    context = {\r\n        'person': person,\r\n    }\r\n    return render(request, 'accounts/prfile.html', context)\n</code></pre>\n</li>\n<li>\n<p><strong>profile.html</strong></p>\n<pre><code class=\"language-html\">{% block content %}\r\n&#x3C;h1>{{ person.username }}'s profile&#x3C;/h1>\r\n\r\n&#x3C;h4>{{ person.username }}'s articles&#x3C;/h4>\r\n{% for article in person.article_set.all %}\r\n&#x3C;div>{{ article.title }}&#x3C;/div>\r\n{% endfor %}\r\n&#x3C;hr />\r\n&#x3C;h4>{{ person.username }}'s comments&#x3C;/h4>\r\n{% for comment in person.comment_set.all %}\r\n&#x3C;div>{{ comment.content }}&#x3C;/div>\r\n{% endfor %}\r\n&#x3C;hr />\r\n&#x3C;h4>{{ person.username }}'s liked articles&#x3C;/h4>\r\n{% for article in person.like_articles.all %}\r\n&#x3C;div>{{ article.title }}&#x3C;/div>\r\n{% endfor %} {% endblock content %}\n</code></pre>\n</li>\n<li>\n<p><strong>base.html</strong></p>\n<pre><code class=\"language-html\">&#x3C;a href=\"{% url 'accounts:profile' user.username %}\">My Profile&#x3C;/a>\n</code></pre>\n</li>\n<li>\n<p><strong>index.html</strong></p>\n<pre><code class=\"language-html\">{% block content %} {% for article in articles %}\r\n&#x3C;p>\r\n  &#x3C;b\r\n    >작성자 :\r\n    &#x3C;a href=\"{% url 'accounts:profile' article.user.username %}\"\r\n      >{{ article.user }}&#x3C;/a\r\n    >&#x3C;/b\r\n  >\r\n&#x3C;/p>\r\n&#x3C;p>글 번호: {{ article.pk }}&#x3C;/p>\r\n&#x3C;p>글 제목: {{ article.title }}&#x3C;/p>\r\n&#x3C;p>글 내용: {{ article.content }}&#x3C;/p>\r\n&#x3C;a href=\"{% url 'articles:detail' article.pk %}\">DETAIL&#x3C;/a>\r\n&#x3C;hr />\r\n{% endfor %} {% endblock content %}\n</code></pre>\n</li>\n</ul>\n<h2>3.2. Follow</h2>\n<ul>\n<li><strong>models.py</strong>\n<pre><code class=\"language-python\">class User(AbstractUser):\r\n    followings = models.ManyToManyField('self', symmetrical=False, related_name='followers')\n</code></pre>\n</li>\n<li><strong>urls.py</strong>\n<pre><code class=\"language-python\">app_name = 'accounts',\r\nurlpatterns = [\r\n    ...,\r\n    path('&#x3C;int:user_pk>/follow/', views.follow, name='follow')\r\n]\n</code></pre>\n</li>\n<li><strong>views.py</strong>\n<pre><code class=\"language-python\">@require_POST\r\ndef follow(request, user_pk):\r\n    if request.user.is_authenticated:\r\n        if request.user.pk != user_pk:\r\n            User = get_user_model()\r\n            person = User.objects.get(pk=user_pk)\r\n            if person.followers.filter(pk=reqeust.user.pk).exists():\r\n            # if reuqest.user in person.followers.all():\r\n                person.followers.remove(request.user)\r\n            else:\r\n                person.followers.add(request.user)\r\n        return redirect('accounts:profile' person.username)\r\n    return redirect('accounts:login')\n</code></pre>\n</li>\n<li><strong>profile.html</strong>\n<pre><code class=\"language-html\">{% block content %}\r\n&#x3C;h1>{{ person.username }}'s profile&#x3C;/h1>\r\n&#x3C;div>\r\n  Followers: {{ person.followers.all|length }} Followings:{{\r\n  erson.followings.all|length }}\r\n&#x3C;/div>\r\n{% if request.user != person %}\r\n&#x3C;div>\r\n  &#x3C;form action=\"{% url 'accounts:follow' person.pk %}\" method=\"POST\">\r\n    {% csrf_token %} {% if request.user in person.followers.all %} &#x3C;input\r\n    type=\"submit\" value==\"Follow\"> {% else %} &#x3C;input type=\"submit\"\r\n    value==\"Unfollow\"> {% endif %}\r\n  &#x3C;/form>\r\n&#x3C;/div>\r\n... {% endblock content %}\n</code></pre>\n</li>\n</ul>"}},"pageContext":{"pagePath":"posts/Django/08_Django_Many_to_Many.md","id":"67bbe6fe-fa2d-5504-8ec0-573007b2fe98","parent":{"id":"67e5455f-99b7-58a9-ac4b-f85ae34df124","name":"08_Django_Many_to_Many","relativePath":"Django/08_Django_Many_to_Many.md"}}},"staticQueryHashes":["1274812890","3935499650","82772122"],"slicesMap":{}}