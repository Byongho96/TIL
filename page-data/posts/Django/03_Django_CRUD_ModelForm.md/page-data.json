{"componentChunkName":"component---src-templates-post-tsx","path":"/posts/Django/03_Django_CRUD_ModelForm.md/","result":{"data":{"markdownRemark":{"id":"3dafc061-f18c-5e23-8739-27602c5ae127","html":"<h1>Django CRUD with ModelForm</h1>\n<h2>Index</h2>\n<ul>\n<li><a href=\"#1-model-form\">1. Model Form</a>\n<ul>\n<li><a href=\"#11-model-class\">1.1. Model Class</a></li>\n<li><a href=\"#12-form-class\">1.2. Form Class</a></li>\n<li><a href=\"#13-modeform-class\">1.3. ModeForm Class</a></li>\n</ul>\n</li>\n<li><a href=\"#2-create\">2. Create</a>\n<ul>\n<li><a href=\"#21-urlspy\">2.1. urls.py</a></li>\n<li><a href=\"#22-viewspy\">2.2. views.py</a></li>\n<li><a href=\"#23-templateshtml\">2.3. templates.html</a></li>\n</ul>\n</li>\n<li><a href=\"#3-read\">3. Read</a>\n<ul>\n<li><a href=\"#31-urlspy\">3.1. urls.py</a></li>\n<li><a href=\"#32-viewspy\">3.2. views.py</a></li>\n<li><a href=\"#33-templateshtml\">3.3. templates.html</a></li>\n</ul>\n</li>\n<li><a href=\"#4-update\">4. Update</a>\n<ul>\n<li><a href=\"#41-urlspy\">4.1. urls.py</a></li>\n<li><a href=\"#42-viewspy\">4.2. views.py</a></li>\n<li><a href=\"#43-templateshtml\">4.3. templates.html</a></li>\n</ul>\n</li>\n<li><a href=\"#5-delete\">5. Delete</a>\n<ul>\n<li><a href=\"#51-urlspy\">5.1. urls.py</a></li>\n<li><a href=\"#52-viewspy\">5.2. views.py</a></li>\n<li><a href=\"#53-templateshtml\">5.3. templates.html</a></li>\n</ul>\n</li>\n<li><a href=\"#6-handling-http-request-methods\">6. Handling HTTP Request Methods</a>\n<ul>\n<li><a href=\"#61-view-decoarators\">6.1. View Decoarators</a></li>\n<li><a href=\"#62-urlspy\">6.2. urls.py</a></li>\n<li><a href=\"#63-viewspy\">6.3. views.py</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1>1. Model Form</h1>\n<h2>1.1. Model Class</h2>\n<pre><code class=\"language-python\"># articles/models.py\r\nfrom django.db import models\r\n\r\n# Article inherits model.Model\r\nclass Article(models.Model):\r\n    title = models.CharField(max_length=10)\r\n    content = models.TextField()\n</code></pre>\n<h2>1.2. Form Class</h2>\n<p><strong>In a similar way that a model class’s fields map to database fields, a form class’s fields map to HTML form &#x3C;input> elements.</strong></p>\n<ul>\n<li>\n<p><strong>is_valid()</strong><br>\nA Form instance has an <strong>is_valid() method</strong>, which runs validation routines for all its fields. When this method is called, if all fields contain valid data, it will:</p>\n<ul>\n<li>return True</li>\n<li>place the form’s data in its cleaned_data attribute.</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>\n<p><strong>Widgets</strong><br>\n<a href=\"https://docs.djangoproject.com/en/4.1/ref/forms/widgets/\">Django Widgets 공식문서</a><br>\nEach form field has a corresponding Widget class, which in turn corresponds to an HTML form widget such as &#x3C;input type=\"text\">.</p>\n</li>\n<li>\n<p><strong>Form rendering options</strong></p>\n<ul>\n<li><strong>as_div</strong>: will render them wrapped in &#x3C;div> tags.</li>\n<li><strong>as_table</strong>: will render them as table cells wrapped in &#x3C;tr> tags.</li>\n<li><strong>as_p</strong>: will render them wrapped in &#x3C;p> tags.</li>\n<li><strong>as_ul</strong>: will render them wrapped in &#x3C;li> tags.</li>\n</ul>\n</li>\n</ul>\n<p>Example</p>\n<pre><code class=\"language-python\"># articles/forms.py\r\nfrom django import forms\r\n\r\nclass ArticleForm(forms.Form):\r\n    NATION_A = 'kr'\r\n    NATION_B = 'ch'\r\n    NATION_C = 'jp'\r\n    NATIONS_CHOICES = [\r\n        (NATION_A, '한국'), # (value, showing)\r\n        (NATION_B, '중국'),\r\n        (NATION_C, '일본'),\r\n    ]\r\n    title = forms.CharField(max_length=10)\r\n    content = forms.CharField(widget=forms.Textarea())\r\n    nation = forms.ChoiceField(choices=NATIONS_CHOICES)\n</code></pre>\n<h2>1.3. ModeForm Class</h2>\n<p><strong>The form Class that map closely to Django models.</strong></p>\n<pre><code class=\"language-python\"># articles/forms.py\r\nfrom django import forms\r\nfrom .models import Article\r\n\r\nclass ArticleForm(forms.ModelForm):\r\n    title = forms.CharField(\r\n        label = 'Title',\r\n        widget=forms.TextInput(\r\n            attrs={\r\n                'class': 'my-title',\r\n                'placeholder': 'Enter the title',\r\n            }\r\n        )\r\n    )\r\n\r\n    content = forms.CharField(\r\n        label = 'Content',\r\n        widget=forms.Textarea(\r\n            attrs={\r\n                'class': 'my-content',\r\n                'placeholder': 'Enter the content',\r\n                'rows': 5,\r\n                'cols': 50,\r\n            }\r\n            error_message={\r\n                'required': 'Please enter your content'\r\n            }\r\n        )\r\n    )\r\n\r\n    class Meta:\r\n        model = Article\r\n        fields = '__all__'\r\n        # fields = ('title', 'content',)\r\n        # exclude = ('title', )\n</code></pre>\n<hr>\n<h1>2. Create</h1>\n<h2>2.1. urls.py</h2>\n<pre><code class=\"language-python\">app_name = 'articles'\r\nurlpatterns = [\r\n    path('new/', views.new, name='new'),\r\n    path('create/', views.create, name='create'),\r\n]\n</code></pre>\n<h2>2.2. views.py</h2>\n<pre><code class=\"language-python\">from .forms import ArticleForm\r\n\r\ndef new(request):\r\n    form  = ArticleForm()\r\n    context = {\r\n        'form': form,\r\n    }\r\n    return render(request, 'articles/new.html', context)\r\n\r\ndef create(request):\r\n    form = ArticleForm(request.POST)\r\n    if form.is_valid():\r\n        article = form.save()\r\n        return redirect('articles:detail', article.pk)\r\n    # the reason is saved in form.errors\r\n    # print(f'Error: {form.errors}')\r\n\r\n    # also by hand over the form again, the error message can be printed on the new.html\r\n    context = {\r\n        'form': form,\r\n    }\r\n    return render(request, 'articles/new.html', context)\n</code></pre>\n<h2>2.3. templates.html</h2>\n<p><strong>new.html</strong></p>\n<pre><code class=\"language-django\">&#x3C;h1>NEW&#x3C;/h1>\r\n&#x3C;form action=\"{% url 'articles:create' %}\" method=\"POST\">\r\n    {% csrf_token %}\r\n    {{ form.as_p }}\r\n    &#x3C;input type=\"submit\">\r\n&#x3C;/form>\n</code></pre>\n<hr>\n<h1>3. Read</h1>\n<h2>3.1. urls.py</h2>\n<pre><code class=\"language-python\">app_name = 'articles'\r\nurlpatterns = [\r\n    path('index/', views.index, name='index'),\r\n    path('&#x3C;int:pk>/', views.detail, name='detail'),\r\n]\n</code></pre>\n<h2>3.2. views.py</h2>\n<pre><code class=\"language-python\">def index(request):\r\n    articles = Article.objects.all()\r\n    context = {\r\n        'articles': articles,\r\n    }\r\n    return render(request, 'articles/index.html', context)\r\n\r\ndef detail(request, pk):\r\n    article = Article.objects.get(pk=pk)\r\n    context = {\r\n        'article': article,\r\n    }\r\n    return render(request, 'articles/detail.html', context)\n</code></pre>\n<h2>3.3. templates.html</h2>\n<p><strong>index.html</strong></p>\n<pre><code class=\"language-django\">&#x3C;h1>Articles&#x3C;/h1>\r\n&#x3C;hr>\r\n{% for article in articles %}\r\n    &#x3C;p> title: {{ article.title }} &#x3C;/p>\r\n    &#x3C;p> content: {{ article.content }} &#x3C;/p>\r\n    &#x3C;hr>\r\n{% endfor %}\n</code></pre>\n<p><strong>detail.html</strong></p>\n<pre><code class=\"language-django\">&#x3C;h1>DETAIL&#x3C;/h1>\r\n&#x3C;h3>{{ article.pk }}th article&#x3C;/h3>\r\n&#x3C;hr>\r\n&#x3C;p> title: {{ article.title }} &#x3C;/p>\r\n&#x3C;p> content: {{ article.content }} &#x3C;/p>\r\n&#x3C;p> created at: {{ article.created_at }} &#x3C;/p>\r\n&#x3C;p> updated at: {{ article.updated_at }} &#x3C;/p>\r\n&#x3C;hr>\n</code></pre>\n<hr>\n<h1>4. Update</h1>\n<h2>4.1. urls.py</h2>\n<pre><code class=\"language-python\">app_name = 'articles'\r\nurlpatterns = [\r\n    path('&#x3C;int:pk>/edit/', views.edit, name='edit'),\r\n    path('&#x3C;int:pk>/update/', views.update, name='update'),\r\n]\n</code></pre>\n<h2>4.2. views.py</h2>\n<pre><code class=\"language-python\">def edit(request, pk):\r\n    article = Article.objects.get(pk=pk)\r\n    # make hte instance based on another data\r\n    form = ArticleFrom(instance=aritcle)\r\n    context = {\r\n        'form': form,\r\n    }\r\n    return render(request, 'articles/edit.html', context)\r\n\r\ndef update(request, pk):\r\n    article = Article.objects.get(pk=pk)\r\n    form = ArticleForm(request.POST, instance=article)\r\n    if form.is_Valid():\r\n        form.save()\r\n        return redirect('articles:detial', article.pk)\r\n    context = {\r\n        'form': form,\r\n    }\r\n    return render(request, 'articles/edit.html', context)\n</code></pre>\n<h2>4.3. templates.html</h2>\n<p><strong>edit.html</strong></p>\n<pre><code class=\"language-django\">&#x3C;h1>EDIT&#x3C;/h1>\r\n&#x3C;form action=\"{% url 'articles:update' article.pk %}\" method=\"POST\">\r\n    {% csrf_token %}\r\n    {{ form.as_p }}\r\n    &#x3C;input type=\"submit\">\r\n&#x3C;/form>\n</code></pre>\n<hr>\n<h1>5. Delete</h1>\n<h2>5.1. urls.py</h2>\n<pre><code class=\"language-python\">app_name = 'articles'\r\nurlpatterns = [\r\n    path('&#x3C;int:pk>/delete/', views.delete, name='delete'),\r\n]\n</code></pre>\n<h2>5.2. views.py</h2>\n<pre><code class=\"language-python\">def delete(request, pk):\r\n    article = Article.objects.get(pk=pk)\r\n    article.delete()\r\n    return redirect('articles:index')\n</code></pre>\n<h2>5.3. templates.html</h2>\n<p><strong>detail.html</strong></p>\n<pre><code class=\"language-django\">&#x3C;h1>DETAIL&#x3C;/h1>\r\n&#x3C;h3>{{ article.pk }}th article&#x3C;/h3>\r\n&#x3C;hr>\r\n&#x3C;p> title: {{ article.title }} &#x3C;/p>\r\n&#x3C;p> content: {{ article.content }} &#x3C;/p>\r\n&#x3C;p> created at: {{ article.created_at }} &#x3C;/p>\r\n&#x3C;p> updated at: {{ article.updated_at }} &#x3C;/p>\r\n&#x3C;hr>\r\n&#x3C;form action=\"{% url 'articles:delete' article.pk %}\" method=\"POST\">\r\n    {% csrf_token %}\r\n    &#x3C;input type=\"submit\" value=\"DELETE\">\r\n&#x3C;/form>\n</code></pre>\n<hr>\n<h1>6. Handling HTTP Request Methods</h1>\n<p><strong>By distinguishing the request method, url and view codes can be written more concisely.</strong></p>\n<h2>6.1. View Decoarators</h2>\n<p><code>from django.views.decorators.http import</code></p>\n<ul>\n<li><code>@require_http_methods(['',])</code>\n<ul>\n<li>Allow only the methods in the list</li>\n</ul>\n</li>\n<li><code>@require_POST</code>\n<ul>\n<li>Allow POST only</li>\n</ul>\n</li>\n<li><code>@require_safe</code>\n<ul>\n<li>Allow GET only</li>\n</ul>\n</li>\n</ul>\n<h2>6.2. urls.py</h2>\n<pre><code class=\"language-python\">app_name = 'articles'\r\nurlpatterns = [\r\n    path('create/', views.create, name='create'),\r\n    path('index/', views.index, name='index'),\r\n    path('&#x3C;int:pk>/', views.detail, name='detail'),\r\n    path('&#x3C;int:pk>/update/', views.update, name='update'),\r\n    path('&#x3C;int:pk>/delete/', views.delete, name='delete'),\r\n]\n</code></pre>\n<h2>6.3. views.py</h2>\n<pre><code class=\"language-python\">from django.views.decorators.http import require_http_methods, require_safe, require_POST\r\nfrom .forms import ArticleForm\r\n\r\n# Create an Article\r\n@require_http_methods(['GET','POST'])\r\ndef create(request):\r\n    if request.method == 'POST':    # Post an article\r\n        form = ArticleForm(request.POST)\r\n        if form.is_valid():\r\n            article = form.save()\r\n            return redirect('articles:detail', article.pk)\r\n    else:                           # Get the article form\r\n        form  = ArticleForm()\r\n    context = {\r\n        'form': form,\r\n    }\r\n    return render(request, 'articles/create.html', context)\r\n\r\n# Read Article List\r\n@require_safe\r\ndef index(request):\r\n    articles = Article.objects.all()\r\n    context = {\r\n        'articles': articles,\r\n    }\r\n    return render(request, 'articles/index.html', context)\r\n\r\n# Read Article Detail\r\n@require_safe\r\ndef detail(request, pk):\r\n    article = Article.objects.get(pk=pk)\r\n    context = {\r\n        'article': article,\r\n    }\r\n    return render(request, 'articles/detail.html', context)\r\n\r\n# Update an Article\r\n@require_http_methods(['GET','POST'])\r\ndef update(request, pk):\r\n    article = Article.objects.get(pk=pk)\r\n    if request.method == 'POST':        # Update an article\r\n        form = ArticleForm(request.POST, instance=article)\r\n        if form.is_Valid():\r\n            form.save()\r\n            return redirect('articles:detail', article.pk)\r\n    else:                               # Get the article form with data\r\n        form = ArticleFrom(instance=aritcle)\r\n    context = {\r\n        'form': form,\r\n    }\r\n    return render(request, 'articles/update.html', context)\r\n\r\n# Delete an Article\r\n@require_POST\r\ndef delete(request, pk):\r\n    article = Article.objects.get(pk=pk)\r\n    if reqeust.mehtod == ' POST':\r\n        article.delete()\r\n        return redirect('articles:index')\r\n    return redirect('articles:detial', artilce.pk)\n</code></pre>"}},"pageContext":{"pagePath":"posts/Django/03_Django_CRUD_ModelForm.md","id":"3dafc061-f18c-5e23-8739-27602c5ae127","parent":{"id":"22b3cd19-9eb5-5ee5-a2ce-946f4a1aca5e","name":"03_Django_CRUD_ModelForm","relativePath":"Django/03_Django_CRUD_ModelForm.md"}}},"staticQueryHashes":["1274812890","3935499650","82772122"],"slicesMap":{}}