{"componentChunkName":"component---src-templates-post-index-tsx","path":"/posts/Frontend/React/04_React_Recoil.md/","result":{"data":{"markdownRemark":{"id":"f73fa8ae-3339-5da1-a12d-d30493c1430f","html":"<blockquote>\n<p><a href=\"https://recoiljs.org/ko/docs/basic-tutorial/atoms\">Recoil 공식문서</a>의 내용을 정리했습니다.</p>\n</blockquote>\n<ul>\n<li><a href=\"#1-atoms\">1. Atoms</a>\n<ul>\n<li><a href=\"#11-atoms-%EC%83%9D%EC%84%B1\">1.1. Atoms 생성</a></li>\n<li><a href=\"#12-atoms-%EC%9D%BD%EA%B8%B0\">1.2. Atoms 읽기</a></li>\n<li><a href=\"#13-atoms-%EC%88%98%EC%A0%95\">1.3. Atoms 수정</a></li>\n</ul>\n</li>\n<li><a href=\"#2-selectors\">2. Selectors</a>\n<ul>\n<li><a href=\"#21-selectors-%EC%83%9D%EC%84%B1\">2.1. Selectors 생성</a></li>\n<li><a href=\"#21-selectors-%EC%9D%BD%EA%B8%B0\">2.1. Selectors 읽기</a></li>\n<li><a href=\"#22-selectors-%EC%88%98%EC%A0%95%ED%95%98%EA%B8%B0\">2.2. Selectors 수정하기</a></li>\n</ul>\n</li>\n<li><a href=\"#3-asynchronous\">3. Asynchronous</a></li>\n</ul>\n<hr>\n<h1 id=\"1-atoms\" style=\"position:relative;\"><a href=\"#1-atoms\" aria-label=\"1 atoms permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Atoms</h1>\n<p>Atom은 어플리케이션의 <a href=\"https://ko.wikipedia.org/wiki/%EB%8B%A8%EC%9D%BC_%EC%A7%84%EC%8B%A4_%EA%B3%B5%EA%B8%89%EC%9B%90\">단일 진실 공급원(source of truth)</a>이다. 즉, 아톰은 특정 데이터의 으뜸되는 하나의 공급원으로 작동하며, 다른 곳에서는 공급원을 참조해서 사용한다. 이 단일 진실 공급원이 갱신될 경우, 해당 데이터를 참조되는 어플리케이션의 모든 곳으로 갱신된 데이터가 전파된다. <del>어렵게 설명했는데 쉽게 말하면 그냥 전역 useState이다.</del></p>\n<h2 id=\"11-atoms-생성\" style=\"position:relative;\"><a href=\"#11-atoms-%EC%83%9D%EC%84%B1\" aria-label=\"11 atoms 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.1. Atoms 생성</h2>\n<p><code>atom()</code> 함수를 사용해서 atom을 생성할 수 있다.</p>\n<pre><code class=\"language-js\">import { atom } from 'recoil'\n\nexport default todoListState = atom({\n  key: 'TodoList',\n  default: [],\n})\n\nexport { todoListState }\n</code></pre>\n<ul>\n<li><strong>key</strong><br>\natoms를 식별하는 키로, 어플리케이션의 모든 atoms와 selectors에 대해서 유니크한 값이어야 한다.</li>\n<li><strong>default</strong><br>\natoms 생성 시 할당되는 기본값이다.</li>\n</ul>\n<h2 id=\"12-atoms-읽기\" style=\"position:relative;\"><a href=\"#12-atoms-%EC%9D%BD%EA%B8%B0\" aria-label=\"12 atoms 읽기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.2. Atoms 읽기</h2>\n<p>리액트 컴포넌트에서는 <code>useRecoilState()</code> 훅을 이용해서 atoms의 내용을 참조할 수 있다.</p>\n<pre><code class=\"language-js\">import { useRecoilState } from 'recoil'\nimport { todoListState } from './state/todoListState'\n\nfunction TodoList() {\n  const todoList = useRecoilValue(todoListState)\n\n  return (\n    &#x3C;>\n      {/* 아래 1.3.  Atoms 수정 항목에서 정의되는 컴포넌트이다. */}\n      &#x3C;TodoItemCreator />\n      {todoList.map((todoItem) => (\n        &#x3C;TodoItem key={todoItem.id} item={todoItem} />\n      ))}\n    &#x3C;/>\n  )\n}\n\nexport default TodoList\n</code></pre>\n<h2 id=\"13-atoms-수정\" style=\"position:relative;\"><a href=\"#13-atoms-%EC%88%98%EC%A0%95\" aria-label=\"13 atoms 수정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.3. Atoms 수정</h2>\n<p>리액트 컴포넌트에서는 <code>useSetRecoilState()</code> 훅을 이용해서 atoms의 내용을 수정하는 함수(setter)에 접근할 수 있다. <code>useState()</code>의 setter 함수와 마찬가지로, 갱신시키고자 하는 값을 인자로 넣어서 데이터를 수정할 수 있다. 또한 아래 예시처럼 updater 함수를 인자로 전달시킴으로써 이전 상태를 참조하며 갱신할 수도 있다.</p>\n<pre><code class=\"language-js\">import { useSetRecoilState } from 'recoil'\nimport { todoListState } from './state/todoListState'\n\nfunction TodoItemCreator() {\n  const [inputValue, setInputValue] = useState('')\n  const setTodoList = useSetRecoilState(todoListState)\n\n  const addItem = () => {\n    setTodoList((oldTodoList) => [\n      ...oldTodoList,\n      {\n        id: new Date(),\n        text: inputValue,\n        isComplete: false,\n      },\n    ])\n    setInputValue('')\n  }\n\n  const onChange = ({ target: { value } }) => {\n    setInputValue(value)\n  }\n\n  return (\n    &#x3C;div>\n      &#x3C;input type=\"text\" value={inputValue} onChange={onChange} />\n      &#x3C;button onClick={addItem}>Add&#x3C;/button>\n    &#x3C;/div>\n  )\n}\n\nexport default TodoItemCreator\n</code></pre>\n<p>리액트 컴포넌트에서는 <code>useRecoilState()</code> 훅을 이용하면, atoms의 값과 setter함수를 모두 참조할 수 있다.</p>\n<pre><code class=\"language-js\">import { useRecoilState } from 'recoil'\nimport { todoListState } from './state/todoListState'\n\nfunction TodoItem({ item }) {\n  const [todoList, setTodoList] = useRecoilState(todoListState)\n  const index = todoList.findIndex((listItem) => listItem === item)\n\n  const editItemText = ({ target: { value } }) => {\n    const newList = replaceItemAtIndex(todoList, index, {\n      ...item,\n      text: value,\n    })\n\n    setTodoList(newList)\n  }\n\n  const toggleItemCompletion = () => {\n    const newList = replaceItemAtIndex(todoList, index, {\n      ...item,\n      isComplete: !item.isComplete,\n    })\n\n    setTodoList(newList)\n  }\n\n  const deleteItem = () => {\n    const newList = removeItemAtIndex(todoList, index)\n\n    setTodoList(newList)\n  }\n\n  return (\n    &#x3C;div>\n      &#x3C;input type=\"text\" value={item.text} onChange={editItemText} />\n      &#x3C;input\n        type=\"checkbox\"\n        checked={item.isComplete}\n        onChange={toggleItemCompletion}\n      />\n      &#x3C;button onClick={deleteItem}>X&#x3C;/button>\n    &#x3C;/div>\n  )\n}\n\nfunction replaceItemAtIndex(arr, index, newValue) {\n  return [...arr.slice(0, index), newValue, ...arr.slice(index + 1)]\n}\n\nfunction removeItemAtIndex(arr, index) {\n  return [...arr.slice(0, index), ...arr.slice(index + 1)]\n}\n\nexport default TodoItem\n</code></pre>\n<h1 id=\"2-selectors\" style=\"position:relative;\"><a href=\"#2-selectors\" aria-label=\"2 selectors permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Selectors</h1>\n<p>selector는 순수함수를 통해 atom으로부터 파생된 값이다. 순수함수란 output이 input에만 종속적인 함수이다. 즉 selector의 값은 참조하는 atom의 값으로 결정된다.</p>\n<h2 id=\"21-selectors-생성\" style=\"position:relative;\"><a href=\"#21-selectors-%EC%83%9D%EC%84%B1\" aria-label=\"21 selectors 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.1. Selectors 생성</h2>\n<pre><code class=\"language-js\">import { atom } from 'recoil'\n\nconst todoListFilterState = atom({\n  key: 'TodoListFilter',\n  default: 'Show All',\n})\n\nconst todoListState = atom({\n  key: 'TodoList',\n  default: [],\n})\n\nexport { todoListFilterState, todoListState }\n</code></pre>\n<pre><code class=\"language-js\">import { useRecoilState } from 'recoil'\nimport { todoListFilterState, todoListState } from './state/todoListState'\n\nconst filteredTodoListState = selector({\n  key: 'FilteredTodoList',\n  get: ({ get }) => {\n    const filter = get(todoListFilterState)\n    const list = get(todoListState)\n\n    switch (filter) {\n      case 'Show Completed':\n        return list.filter((item) => item.isComplete)\n      case 'Show Uncompleted':\n        return list.filter((item) => !item.isComplete)\n      default:\n        return list\n    }\n  },\n})\n\nexport { filteredTodoListState }\n</code></pre>\n<p><a href=\"https://recoiljs.org/docs/api-reference/core/selector/\">Selector 세부 문서</a></p>\n<ul>\n<li><strong>get</strong><br>\nget 속성은 get 함수를 내부적으로 전달받으며, 전달 받은 get 함수를 통해 다른 <strong>atoms</strong>나 <strong>selectors</strong>를 구독할 수 있다.<br>\n위의 예시에서 filteredTodoListState 는 <code>todoListFilterState</code>와 <code>todoListState</code>를 구독하고 있다.</li>\n</ul>\n<h2 id=\"21-selectors-읽기\" style=\"position:relative;\"><a href=\"#21-selectors-%EC%9D%BD%EA%B8%B0\" aria-label=\"21 selectors 읽기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.1. Selectors 읽기</h2>\n<p>atoms와 동일하게 컴포넌트 단에서 <code>useRecoilValue</code>를 이용해서 값을 참조할 수 있다.</p>\n<p>말했던 것처럼 soure of truth는 atom이고, selector는 atom으로부터 파생된 값이다. 따라서 아래 예시에서 <code>TodoListFilters</code>컴포넌트에서 <code>filter</code> atom이 수정되면, <code>filter</code>를 구독하는 <code>filteredTodoListState</code>도 자동으로 수정된다.</p>\n<pre><code class=\"language-js\">import { useRecoilState } from 'recoil'\nimport filteredTodoListState from './selectors/filteredTodoListState'\nimport { filter } from './state/filteredTodoListState'\n\nfunction TodoList() {\n  // changed from todoListState to filteredTodoListState\n  const todoList = useRecoilValue(filteredTodoListState)\n\n  return (\n    &#x3C;>\n      &#x3C;TodoListFilters />\n      &#x3C;TodoItemCreator />\n\n      {todoList.map((todoItem) => (\n        &#x3C;TodoItem item={todoItem} key={todoItem.id} />\n      ))}\n    &#x3C;/>\n  )\n}\n\nfunction TodoListFilters() {\n  const [filter, setFilter] = useRecoilState(todoListFilterState)\n\n  const updateFilter = ({ target: { value } }) => {\n    setFilter(value)\n  }\n\n  return (\n    &#x3C;>\n      Filter:\n      &#x3C;select value={filter} onChange={updateFilter}>\n        &#x3C;option value=\"Show All\">All&#x3C;/option>\n        &#x3C;option value=\"Show Completed\">Completed&#x3C;/option>\n        &#x3C;option value=\"Show Uncompleted\">Uncompleted&#x3C;/option>\n      &#x3C;/select>\n    &#x3C;/>\n  )\n}\n</code></pre>\n<h2 id=\"22-selectors-수정하기\" style=\"position:relative;\"><a href=\"#22-selectors-%EC%88%98%EC%A0%95%ED%95%98%EA%B8%B0\" aria-label=\"22 selectors 수정하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.2. Selectors 수정하기</h2>\n<p><a href=\"https://recoiljs.org/docs/api-reference/core/selector/\">Selector가 set 속성을 가질 때만 수정할 수 있다.</a></p>\n<ol>\n<li>이미 선언된 아톰을 구독하고 있다가 함수를 실행</li>\n<li>서버와의 비동기적인 통신이 가능</li>\n</ol>\n<p>비동기 suspense, loadble 알아보기\nrecoil은 데이터를 캐싱함!!!</p>\n<ol>\n<li>\n<p>구독중인 state가 변경</p>\n</li>\n<li>\n<p>요청 파라미터가 새로운 값으로 바뀐경우 (파라미터를 하나 더 만들고</p>\n</li>\n<li>\n<p><a href=\"https://www.youtube.com/watch?v=7nwpEiSpPqY\">https://www.youtube.com/watch?v=7nwpEiSpPqY</a>)</p>\n</li>\n<li>\n<p>19:50</p>\n</li>\n<li>\n<p>내 이벤트는 명시적 업데이트</p>\n</li>\n<li>\n<p>아닌 것은 실시간/주기적 업데이트 : 시간 같은 것을 파라미터를 줌.</p>\n</li>\n</ol>\n<p>이제는 캐싱을 안하는 법이 나온 것 같음. 알아보기</p>\n<h1 id=\"3-asynchronous\" style=\"position:relative;\"><a href=\"#3-asynchronous\" aria-label=\"3 asynchronous permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Asynchronous</h1>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#1-atoms\">1. Atoms</a></p>\n<ul>\n<li><a href=\"#11-atoms-%EC%83%9D%EC%84%B1\">1.1. Atoms 생성</a></li>\n<li><a href=\"#12-atoms-%EC%9D%BD%EA%B8%B0\">1.2. Atoms 읽기</a></li>\n<li><a href=\"#13-atoms-%EC%88%98%EC%A0%95\">1.3. Atoms 수정</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#2-selectors\">2. Selectors</a></p>\n<ul>\n<li><a href=\"#21-selectors-%EC%83%9D%EC%84%B1\">2.1. Selectors 생성</a></li>\n<li><a href=\"#21-selectors-%EC%9D%BD%EA%B8%B0\">2.1. Selectors 읽기</a></li>\n<li><a href=\"#22-selectors-%EC%88%98%EC%A0%95%ED%95%98%EA%B8%B0\">2.2. Selectors 수정하기</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#3-asynchronous\">3. Asynchronous</a></p>\n</li>\n</ul>","frontmatter":{"title":"04. Recoil","createdAt":"2023-05-02","updatedAt":"2023-06-05","tags":null,"description":null,"reference":"Recoil 공식문서: https://recoiljs.org/ko/docs/basic-tutorial/atoms"}},"allMarkdownRemark":{"nodes":[{"id":"382f3b2f-64e8-5970-97fb-9f628586c322","parent":{"id":"70440247-761c-592e-be32-1a89ee3433e1","name":"00_React_Initial_Setting","relativePath":"Frontend/React/00_React_Initial_Setting.md"},"frontmatter":{"title":"00. React 초기 셋팅 정리","createdAt":"2023-04-23","updatedAt":"2023-04-28"},"excerpt":"추후 참고하기 위해, 반복되는 리액트 초기 셋팅 작업을 공식문서를 기반하여 정리한 문서입니다. 1. Create React App 2. eslint & prettier 2.1. eslint 2.2. prettier 3. React Router…"},{"id":"dc8842b1-870b-58e5-bf26-f2bfeb739a7f","parent":{"id":"3bb6320c-de7a-5fc6-98b2-3b2c10ea6b10","name":"02_React_Context_API","relativePath":"Frontend/React/02_React_Context_API.md"},"frontmatter":{"title":"02. React Context API","createdAt":"2023-05-02","updatedAt":"2023-05-08"},"excerpt":"1. Context 1.1. Props와 비교 1.2. 사용 예시 2. useReducer 1.1. 개념 1.2. 예시 (원시 타입) 1.3. 예시(참조타입) 1. Context…"},{"id":"ee1b12d6-a243-50d5-ae99-32f322ad757f","parent":{"id":"e2d2b32a-0399-59ef-8f65-f072379a23bd","name":"03_React_Redux_Toolkit","relativePath":"Frontend/React/03_React_Redux_Toolkit.md"},"frontmatter":{"title":"03. React & Redux Toolkit","createdAt":"2023-05-02","updatedAt":"2023-05-08"},"excerpt":"1. Redux Toolkit 기본 사용 2. Redux Toolkit 비동기 2.1. 목표 2.2. createAsyncThunk 실전 예제 1. Redux Toolkit 기본 사용 Slice 생성\nslice…"},{"id":"f73fa8ae-3339-5da1-a12d-d30493c1430f","parent":{"id":"ae8dbfd1-0853-5826-a7d9-8541fe6c026f","name":"04_React_Recoil","relativePath":"Frontend/React/04_React_Recoil.md"},"frontmatter":{"title":"04. Recoil","createdAt":"2023-05-02","updatedAt":"2023-06-05"},"excerpt":"Recoil 공식문서의 내용을 정리했습니다. 1. Atoms 1.1. Atoms 생성 1.2. Atoms 읽기 1.3. Atoms 수정 2. Selectors 2.1. Selectors 생성 2.1. Selectors 읽기 2.2. Selectors…"}]}},"pageContext":{"pagePath":"posts/Frontend/React/04_React_Recoil.md","regex":"/^(?!.*README).*Frontend\\/React.*$/","relativeDirectory":"React","id":"f73fa8ae-3339-5da1-a12d-d30493c1430f","parent":{"id":"ae8dbfd1-0853-5826-a7d9-8541fe6c026f","name":"04_React_Recoil","relativePath":"Frontend/React/04_React_Recoil.md"}}},"staticQueryHashes":["3300660363","3571427910"],"slicesMap":{}}