{"componentChunkName":"component---src-templates-post-index-tsx","path":"/posts/Frontend/React/00_React_Initial_Setting.md/","result":{"data":{"markdownRemark":{"id":"eaf76707-0a7a-546e-8fdc-cdf669d10d45","html":"<blockquote>\n<p>추후 참고하기 위해, 반복되는 리액트 초기 셋팅 작업을 공식문서를 기반하여 정리한 문서입니다.</p>\n</blockquote>\n<ul>\n<li><a href=\"#1-create-react-app\">1. Create React App</a></li>\n<li><a href=\"#2-eslint--prettier\">2. eslint &#x26; prettier</a>\n<ul>\n<li><a href=\"#21-eslint\">2.1. eslint</a></li>\n<li><a href=\"#22-prettier\">2.2. prettier</a></li>\n</ul>\n</li>\n<li><a href=\"#3-react-router\">3. React Router</a></li>\n<li><a href=\"#4-react-global-store\">4. React Global Store</a>\n<ul>\n<li><a href=\"#41-recoil\">4.1. Recoil</a></li>\n<li><a href=\"#42-redux-toolkit\">4.2. Redux Toolkit</a></li>\n</ul>\n</li>\n<li><a href=\"#5-axios\">5. Axios</a></li>\n<li><a href=\"#6-css-styling\">6. CSS styling</a>\n<ul>\n<li><a href=\"#61-sass\">6.1. Sass</a></li>\n<li><a href=\"#62-styled-component\">6.2. Styled Component</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1 id=\"1-create-react-app\" style=\"position:relative;\"><a href=\"#1-create-react-app\" aria-label=\"1 create react app permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Create React App</h1>\n<p><a href=\"https://create-react-app.dev/docs/getting-started\">Create React App</a>은 CSR방식의 리액트 Single Page Application을 쉽게 시작할 수 있도록 도와주는 오픈소스 도구이다. 초기 설정, 구성, 패키지 의존성 등을 자동으로 설정해주기 때문에 개발을 더 빠르게 쉽게 시작할 수 있다.</p>\n<pre><code class=\"language-bash\">npx create-react-app my-app --template typescript\n</code></pre>\n<ul>\n<li>\n<p><strong>npx</strong><br>\nnpm 패키지를 실행하기 위한 도구이다.<br>\n차이점은 npx는 로컬이나 글로벌에 설치되어 있지 않은 node 패키지도 실행할 수 있다. 또한 이 때, 해당 패키지를 설치하지 않기 때문에 항상 최신 버전의 node 패키지를 실행시킨다.<br>\n그러한 관점에서 create-react-app은 자주 업데이트 되는 모듈이기 때문에 npx를 통해 실행시키는 것이 적합하다. 공식문서에서도 만일 <code>npm install -g create-react-app</code>을 통해 global하게 create-react-app을 설치한 적이 있으면, 이를 uninstall하고 npx로 실행시키길 권장한다.</p>\n</li>\n<li>\n<p><strong>--template typescript</strong><br>\n해당 옵션을 이용해 typescript 버전의 리액트 템플릿을 제공받을 수 있다.</p>\n</li>\n</ul>\n<p><a href=\"https://create-react-app.dev/docs/importing-a-component/#absolute-imports\">CRA 공식문서</a>를 보면 <code>tsconfig.json</code>파일을 수정해서 프로젝트의 절대경로를 수정할 수 있다.</p>\n<pre><code class=\"language-json\">{\r\n  \"compilerOptions\": {\r\n    \"baseUrl\": \"src\"\r\n  },\r\n  \"include\": [\"src\"]\r\n}\n</code></pre>\n<h1 id=\"2-eslint--prettier\" style=\"position:relative;\"><a href=\"#2-eslint--prettier\" aria-label=\"2 eslint  prettier permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. eslint &#x26; prettier</h1>\n<p>협업 개발환경에서 개발자들간 코드 스타일링을 통일시키고, 코드의 품질을 높이기 위해서 eslint와 prettier을 사용한다.</p>\n<h2 id=\"21-eslint\" style=\"position:relative;\"><a href=\"#21-eslint\" aria-label=\"21 eslint permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.1. eslint</h2>\n<p><a href=\"https://eslint.org/docs/latest/use/getting-started\">eslint 공식문서</a>에 따라 설치를 진행한다.</p>\n<ol>\n<li>\n<p><strong>기본 명령어 실행</strong></p>\n<pre><code class=\"language-bash\">npm init @eslint/config\n</code></pre>\n<p>위 명령어를 실행할 경우, 프론트엔드 프레임워크, typescript 사용여부 등 다양한 사용자 선택 요청이 나타난다. 자신의 프로젝트에 맞게 선택하면 된다.</p>\n</li>\n<li>\n<p><strong>.eslintrc 확인</strong></p>\n<pre><code class=\"language-json\">{\r\n  \"extends\": \"eslint:recommended\",\r\n  \"rules\": {\r\n    \"semi\": [\"error\", \"always\"],\r\n    \"quotes\": [\"error\", \"double\"]\r\n  }\r\n}\n</code></pre>\n<p>명령어를 통해 eslint를 설치하면 .eslintrc라는 config파일이 생성된다.</p>\n<ul>\n<li>\n<p><strong>extends</strong>\r\n일종의 rules 패키지이다. 자주 사용되는 rule 설정을 하나의 이름으로 모아서 제공한다.</p>\n</li>\n<li>\n<p><strong>rules</strong><br>\n<a href=\"https://eslint.org/docs/latest/rules\">eslint rules</a>에 기재된 rule을 개별적으로 적용시킬 수 있기 때문에 extends 설정 이후 규칙을 미세조정하는 용도로 사용된다. rule의 강도는 다음과 같이 3가지로 구분된다.</p>\n<ul>\n<li>\"off\" or 0: 해당 rule을 적용시키지 않는다.</li>\n<li>\"warn\" or 1: 경고 문구만을 표시한다.</li>\n<li>\"error\" or 2 - 에러로 처리하고 프로젝트를 실행시키지 않는다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"22-prettier\" style=\"position:relative;\"><a href=\"#22-prettier\" aria-label=\"22 prettier permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.2. prettier</h2>\n<p>prettier는 eslint와 비슷하게 개발자들간의 코드 스타일링을 통일시키는데, 기능과 무관한 <strong>코드 스타일</strong>에 대해서만 작동한다. 보통 eslint와 prettier을 모두 사용하고, 둘 간의 충돌하는 부분에 대해서는 prettier에 설정한 값을 따르도록 한다.</p>\n<p>아래 내용은 <a href=\"https://prettier.io/docs/en/install.html\">prettier 공식문서</a>를 따라 작성하였다.</p>\n<ol>\n<li>\n<p><strong>prettier 설치</strong></p>\n<pre><code class=\"language-bash\">npm install --save-dev --save-exact prettier\n</code></pre>\n</li>\n<li>\n<p><strong>prettier 설정파일 생성</strong></p>\n<pre><code class=\"language-bash\">echo {}> .prettierrc.json\n</code></pre>\n<p>위 명령어로 프로젝트 루트 경로에 .prettierrc.json 파일을 생성한다. <a href=\"https://prettier.io/docs/en/options.html\">prettierrc 설정 옵션 문서</a>에서 설정가능한 옵션들을 확인할 수 있으며, <a href=\"https://prettier.io/docs/en/configuration.html\">기본설정</a>은 다음과 같다.</p>\n<pre><code class=\"language-json\">{\r\n  \"trailingComma\": \"es5\",\r\n  \"tabWidth\": 4,\r\n  \"semi\": false,\r\n  \"singleQuote\": true\r\n}\n</code></pre>\n</li>\n<li>\n<p><strong>.prettierignore 생성</strong><br>\n.prettierignore을 통해 prettier을 적용시키지 않을 문서를 설정할 수 있다.</p>\n<pre><code># Ignore artifacts:\r\nbuild\r\ncoverage\n</code></pre>\n</li>\n<li>\n<p><strong>prettier 포맷팅 실행</strong></p>\n<pre><code class=\"language-bash\">npx prettier --write .\r\n\r\n# 특정 파일 지정\r\nnpx prettier --write app/components/Button.js\n</code></pre>\n<p>위 명령어를 통해 모든 파일 혹은 특정 경로의 파일에 대해 prettier 포맷팅을 적용할 수 있다.</p>\n<pre><code class=\"language-bash\">npx prettier --check .\n</code></pre>\n<p>check 옵션은 prettier 포맷팅에 대해 검사만 하고, 코드를 실제 수정하지는 않는다.</p>\n</li>\n<li>\n<p><strong>prettier editor 적용</strong><br>\n사용하는 editor에 prettier을 적용해, 수정된 코드를 바로 바로 확인할 수도 있다. 각 에디터별 prettier 적용방법을 <a href=\"https://prettier.io/docs/en/editors.html\">여기</a>에서 확인할 수 있고, 대표적인 vsCode의 경우 <strong>Prettier - Code formatter</strong> 플러그인을 설치하면 된다.</p>\n</li>\n<li>\n<p><strong>eslint-config-prettier 적용</strong><br>\neslint와 prettier 간 충돌이 일어날 때, prettier의 규칙을 따르도록 eslint-config-prettier 패키지를 설치한다.</p>\n<pre><code class=\"language-bash\">npm install --save-dev eslint-config-prettier\n</code></pre>\n<p>패키지 설치 후, .eslintrc 파일을 다음과 같이 수정한다.</p>\n<pre><code class=\"language-json\">{\r\n  \"extends\": [\"some-other-config-you-use\", \"prettier\"]\r\n}\n</code></pre>\n</li>\n<li>\n<p><strong>Git hook 적용</strong><br>\n(최근 리액트 프로젝트에서 해당 내용은 적용하지 못했다. husky를 사용하기 위해서는 package.json과 .git이 동일 위치에 있어야 한다. 하지만 우리 프로젝트는 리액트 프로젝트가 .git위치에 비해 1개 depth 하단에 있다. 이에 대한 해결책이 <a href=\"https://typicode.github.io/husky/#/?id=custom-directory\">husky 공식문서</a>의 custom directory항목에 있었지만, 따라해도 해결되지 않았다.)</p>\n<p>코드 스타일링이 맞지 않으면 git merge시 불필요한 충돌이 일어난다. 따라서 git pre-commit hook에 <code>prettier --write</code>명령어를 실행함으로써 모든 커밋의 code 포맷을 맞출 수 있다.<a href=\"https://github.com/typicode/husky\">husky</a>와 <a href=\"https://github.com/okonet/lint-staged\">lint-staged</a>는 각각 Git hook과 Git에 등록된 파일을 관리하기 위한 도구이다.</p>\n<pre><code class=\"language-bash\"># --save-dev 옵션이 해당 패키지가\r\nnpm install --save-dev husky lint-staged\r\nnpx husky install\r\nnpm pkg set scripts.prepare=\"husky install\"\r\nnpx husky add .husky/pre-commit \"npx lint-staged\"\n</code></pre>\n<ul>\n<li><strong>--save-dev</strong><br>\n해당 패키지가 개발환경에만 쓰이는 것을 명시하는 옵션이다. 해당 옵션을 추가할 경우, pacakage.json의 <code>devDependencies</code>항목에 패키지가 추가된다. 반대의 경우에는 <code>dependencies</code>항목에 추가된다.</li>\n</ul>\n<pre><code class=\"language-json\">{\r\n  \"lint-staged\": {\r\n    \"**/*\": \"prettier --write --ignore-unknown\"\r\n    // \"**/*\": [\"eslint --fix\", \"prettier --write\"]\r\n  }\r\n}\n</code></pre>\n<p>위의 내용을 package.json에 추가한다. 만일 lint-staged에서 eslint관련 작업을 수행할 경우, eslint 작업이 prettier작업보다 선행되어야 한다.</p>\n</li>\n</ol>\n<h1 id=\"3-react-router\" style=\"position:relative;\"><a href=\"#3-react-router\" aria-label=\"3 react router permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. React Router</h1>\n<p>React 프로젝트에서 가장 보편적으로 쓰이는 라우팅 라이브러리이다. <a href=\"https://reactrouter.com/en/main/routers/create-browser-router\">React Router 공식문서</a>에 튜토리얼이 아주 장황하고 이상하게 설명되어 있다. 임의로 핵심만 골라 정리했다.</p>\n<ol>\n<li>\n<p><strong>react-router-dom 설치</strong></p>\n<pre><code class=\"language-bash\">npm install react-router-dom\n</code></pre>\n</li>\n<li>\n<p><strong>index.tsx 수정</strong><br>\n<a href=\"https://reactrouter.com/en/main/router-components/browser-router\">&#x3C;BrouserRouter></a>는 현재 브라우저의 url주소를 브라우저의 history stack에 저장한다.</p>\n<pre><code class=\"language-ts\">import React from 'react'\r\nimport ReactDOM from 'react-dom/client'\r\nimport { BrowserRouter } from 'react-router-dom'\r\nimport App from './App'\r\n\r\nconst root = ReactDOM.createRoot(\r\n  document.getElementById('root') as HTMLElement\r\n)\r\nroot.render(\r\n  &#x3C;React.StrictMode>\r\n    &#x3C;BrowserRouter>\r\n      &#x3C;App />\r\n    &#x3C;/BrowserRouter>\r\n  &#x3C;/React.StrictMode>\r\n)\n</code></pre>\n</li>\n<li>\n<p><strong>App.tsx 수정</strong><br>\n<a href=\"https://reactrouter.com/en/main/components/routes\">&#x3C;Rotues></a>는 history의 현재 location이 수정될 때마다 하위 <Route> 순회하며 UI에 렌더링할 컴포넌트를 찾는다.</p>\n<pre><code class=\"language-ts\">import React from 'react'\r\nimport { Routes, Route } from 'react-router-dom'\r\n\r\nfunction App() {\r\n  return (\r\n    &#x3C;Routes>\r\n      &#x3C;Route path=\"/\" element={&#x3C;Main />} />\r\n    &#x3C;/Routes>\r\n  )\r\n}\r\n\r\nexport default App\r\n\r\nfunction Main() {\r\n  return (\r\n    ...\r\n  )\r\n}\n</code></pre>\n</li>\n</ol>\n<h1 id=\"4-react-global-store\" style=\"position:relative;\"><a href=\"#4-react-global-store\" aria-label=\"4 react global store permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. React Global Store</h1>\n<p>Recoil과 Redux Toolkit은 리액트에서 잘 쓰이는 전역 저장소이다. 둘 중 프로젝트에 적합한 전역 저장소를 설치한다.</p>\n<h2 id=\"41-recoil\" style=\"position:relative;\"><a href=\"#41-recoil\" aria-label=\"41 recoil permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.1. Recoil</h2>\n<p><a href=\"https://recoiljs.org/ko/docs/introduction/getting-started\">Recoil 공식문서</a>에 따라 recoil을 설치한다.</p>\n<ol>\n<li>\n<p><strong>recoil 설치</strong></p>\n<pre><code class=\"language-bash\">npm install recoil\n</code></pre>\n</li>\n<li>\n<p><strong>App.tsx 수정</strong></p>\n<pre><code class=\"language-tsx\">import React from 'react'\r\nimport { RecoilRoot } from 'recoil'\r\n\r\nfunction App() {\r\n  return (\r\n    &#x3C;RecoilRoot>\r\n      &#x3C;children />\r\n    &#x3C;/RecoilRoot>\r\n  )\r\n}\n</code></pre>\n</li>\n<li>\n<p><strong>recoil-persist 설치</strong><br>\n새로고침 되었을 때도 recoil의 상태값을 유지하기 위해, recoil의 상태를 local storage에 동기화할 수 있다. 이를 위한 대표적인 라이브러리 중 하나가 <a href=\"https://www.npmjs.com/package/recoil-persist\">recoil-persist</a>이다.</p>\n<pre><code class=\"language-bash\">npm install recoil-persist\n</code></pre>\n<p>다음은 recoil-persist를 사용해 access token과 refresh token의 atoms를 설계한 예제이다.</p>\n<pre><code class=\"language-tsx\">import { atom } from 'recoil'\r\nimport { recoilPersist } from 'recoil-persist'\r\n\r\nconst { persistAtom } = recoilPersist({\r\n  key: 'recoil-persist', // this key is using to store data in local storage\r\n  storage: localStorage, // configurate which stroage will be used to store the data\r\n})\r\n\r\n// JWT 토큰 관련 설정\r\nconst ACCESS_TOKEN_KEY = 'AccessToken'\r\nconst REFRESH_TOKEN_KEY = 'RefreshToken'\r\n\r\n// Recoil atom 정의\r\nconst authTokenState = atom&#x3C;string>({\r\n  key: ACCESS_TOKEN_KEY,\r\n  default: localStorage.getItem(ACCESS_TOKEN_KEY) ?? '',\r\n  effects_UNSTABLE: [persistAtom],\r\n})\r\n\r\nconst refreshTokenState = atom&#x3C;string>({\r\n  key: REFRESH_TOKEN_KEY,\r\n  default: localStorage.getItem(REFRESH_TOKEN_KEY) ?? '',\r\n  effects_UNSTABLE: [persistAtom],\r\n})\r\n\r\nexport { authTokenState, refreshTokenState }\n</code></pre>\n</li>\n</ol>\n<h2 id=\"42-redux-toolkit\" style=\"position:relative;\"><a href=\"#42-redux-toolkit\" aria-label=\"42 redux toolkit permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.2. Redux Toolkit</h2>\n<h1 id=\"5-axios\" style=\"position:relative;\"><a href=\"#5-axios\" aria-label=\"5 axios permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. Axios</h1>\n<p>Single Page Application으로 동작하는 React 프로젝트에서 서버로 AJAX요청을 날리는 것은 거의 필수이다. Axios는 node.js에서 사용할 수 있는 Promise 기반 HTTP 클라이언트 라이브러리로, 클라이언트(브라우저)에서는 XMLHttpRequests를 생성한다.</p>\n<ol>\n<li>\n<p><strong>axios 설치</strong></p>\n<pre><code class=\"language-bash\">npm install axios\n</code></pre>\n</li>\n<li>\n<p><strong>axios instance 생성</strong></p>\n<p><a href=\"https://axios-http.com/docs/instance\">axios instance</a>를 생성할 경우, axios interceptor와 같은 편리한 기능을 사용할 수 있다.</p>\n<pre><code class=\"language-js\">// Create instance\r\nconst instance = axios.create({\r\n  baseURL: 'https://some-domain.com/api/',\r\n  timeout: 1000,\r\n  headers: { 'X-Custom-Header': 'foobar' },\r\n})\r\n\r\n// Add a request interceptor\r\ninstance.interceptors.request.use(\r\n  function (config) {\r\n    // Do something before request is sent\r\n    return config\r\n  },\r\n  function (error) {\r\n    // Do something with request error\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\n// Add a response interceptor\r\ninstance.interceptors.response.use(\r\n  function (response) {\r\n    // Any status code that lie within the range of 2xx cause this function to trigger\r\n    // Do something with response data\r\n    return response\r\n  },\r\n  function (error) {\r\n    // Any status codes that falls outside the range of 2xx cause this function to trigger\r\n    // Do something with response error\r\n    return Promise.reject(error)\r\n  }\r\n)\n</code></pre>\n</li>\n</ol>\n<h1 id=\"6-css-styling\" style=\"position:relative;\"><a href=\"#6-css-styling\" aria-label=\"6 css styling permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. CSS styling</h1>\n<p>CSS 스타일링 방법은 매우 다양하다. 자신의 프로젝트에 적합한 CSS 스타일링을 찾아 관련 라이브러리를 설치한다.</p>\n<h2 id=\"61-sass\" style=\"position:relative;\"><a href=\"#61-sass\" aria-label=\"61 sass permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6.1. Sass</h2>\n<p><a href=\"https://create-react-app.dev/docs/adding-a-sass-stylesheet\">Create React App 공식문서</a>에 Sass 관련 설정이 자세하게 나와있다.</p>\n<ol>\n<li>\n<p><strong>Sass 설치</strong></p>\n<pre><code class=\"language-bash\">npm uninstall node-sass\r\n npm install sass\n</code></pre>\n<p>node-sass 지원이 중단되었으므로 sass 패키지 사용을 권장하고 있다.</p>\n</li>\n<li>\n<p><strong>SASS_PATH 추가</strong></p>\n<p>프로젝트 루트 경로에 .env 파일을 만들고 참조하고자 하는 Sass 상대경로를 아래와 같이 추가한다.</p>\n<pre><code class=\"language-env\"># Linux\r\nSASS_PATH=path1:path2:path3\r\n\r\n# Window는 세미콜론(;)으로 경로를 구분한다\r\nSASS_PATH=path1;path2;path3\n</code></pre>\n</li>\n<li>\n<p><strong>CSS 초기화</strong></p>\n<p>index.css에 다음을 import함으로써 브라우저별 css를 초기화 할 수 있다.</p>\n<pre><code class=\"language-css\">@import-normalize; /* bring in normalize.css styles */\r\n\r\n/* rest of app styles */\n</code></pre>\n</li>\n</ol>\n<h2 id=\"62-styled-component\" style=\"position:relative;\"><a href=\"#62-styled-component\" aria-label=\"62 styled component permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6.2. Styled Component</h2>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#1-create-react-app\">1. Create React App</a></p>\n</li>\n<li>\n<p><a href=\"#2-eslint--prettier\">2. eslint &#x26; prettier</a></p>\n<ul>\n<li><a href=\"#21-eslint\">2.1. eslint</a></li>\n<li><a href=\"#22-prettier\">2.2. prettier</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#3-react-router\">3. React Router</a></p>\n</li>\n<li>\n<p><a href=\"#4-react-global-store\">4. React Global Store</a></p>\n<ul>\n<li><a href=\"#41-recoil\">4.1. Recoil</a></li>\n<li><a href=\"#42-redux-toolkit\">4.2. Redux Toolkit</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#5-axios\">5. Axios</a></p>\n</li>\n<li>\n<p><a href=\"#6-css-styling\">6. CSS styling</a></p>\n<ul>\n<li><a href=\"#61-sass\">6.1. Sass</a></li>\n<li><a href=\"#62-styled-component\">6.2. Styled Component</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"00. React 초기 셋팅 정리","createdAt":"2023-04-23","updatedAt":"2023-04-28","tags":null,"description":null,"reference":null}},"allMarkdownRemark":{"nodes":[{"id":"eaf76707-0a7a-546e-8fdc-cdf669d10d45","parent":{"id":"94c4a326-f9da-545f-b81a-95f4932b3e2b","name":"00_React_Initial_Setting","relativePath":"Frontend/React/00_React_Initial_Setting.md"},"frontmatter":{"title":"00. React 초기 셋팅 정리","createdAt":"2023-04-23","updatedAt":"2023-04-28"},"excerpt":"추후 참고하기 위해, 반복되는 리액트 초기 셋팅 작업을 공식문서를 기반하여 정리한 문서입니다. 1. Create React App 2. eslint & prettier 2.1. eslint 2.2. prettier 3. React Router…"},{"id":"6769b321-2147-5412-b2e8-d5432ed35701","parent":{"id":"532f5699-1bbf-5e76-b592-7704aa611653","name":"02_React_Context_API","relativePath":"Frontend/React/02_React_Context_API.md"},"frontmatter":{"title":"02. React Context API","createdAt":"2023-05-02","updatedAt":"2023-05-08"},"excerpt":"1. Context 1.1. Props와 비교 1.2. 사용 예시 2. useReducer 1.1. 개념 1.2. 예시 (원시 타입) 1.3. 예시(참조타입) 1. Context…"},{"id":"0a053b67-3e77-5b02-97c3-eb16427b9eef","parent":{"id":"e321b64d-f0c8-535b-a758-6b9ae12433a2","name":"03_React_Redux_Toolkit","relativePath":"Frontend/React/03_React_Redux_Toolkit.md"},"frontmatter":{"title":"03. React & Redux Toolkit","createdAt":"2023-05-02","updatedAt":"2023-05-08"},"excerpt":"1. Redux Toolkit 기본 사용 2. Redux Toolkit 비동기 2.1. 목표 2.2. createAsyncThunk 실전 예제 1. Redux Toolkit 기본 사용 Slice 생성\r\nslice…"},{"id":"f455ed8a-e5db-52e6-a937-6937d2c610ad","parent":{"id":"7fa8e978-d7b0-5781-b7a6-ef3e0e3d4df2","name":"04_React_Recoil","relativePath":"Frontend/React/04_React_Recoil.md"},"frontmatter":{"title":"04. Recoil","createdAt":"2023-05-02","updatedAt":"2023-06-05"},"excerpt":"Recoil 공식문서의 내용을 정리했습니다. 1. Atoms 1.1. Atoms 생성 1.2. Atoms 읽기 1.3. Atoms 수정 2. Selectors 2.1. Selectors 생성 2.1. Selectors 읽기 2.2. Selectors…"}]}},"pageContext":{"pagePath":"posts/Frontend/React/00_React_Initial_Setting.md","regex":"/^(?!.*README).*Frontend\\/React.*$/","relativeDirectory":"React","id":"eaf76707-0a7a-546e-8fdc-cdf669d10d45","parent":{"id":"94c4a326-f9da-545f-b81a-95f4932b3e2b","name":"00_React_Initial_Setting","relativePath":"Frontend/React/00_React_Initial_Setting.md"}}},"staticQueryHashes":["1484934524","2644037009","4059933791"],"slicesMap":{}}