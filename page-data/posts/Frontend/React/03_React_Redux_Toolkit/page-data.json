{"componentChunkName":"component---src-templates-post-index-tsx","path":"/posts/Frontend/React/03_React_Redux_Toolkit/","result":{"data":{"markdownRemark":{"id":"ee1b12d6-a243-50d5-ae99-32f322ad757f","html":"<ul>\n<li><a href=\"#1-redux-toolkit-%EA%B8%B0%EB%B3%B8-%EC%82%AC%EC%9A%A9\">1. Redux Toolkit 기본 사용</a></li>\n<li><a href=\"#2-redux-toolkit-%EB%B9%84%EB%8F%99%EA%B8%B0\">2. Redux Toolkit 비동기</a>\n<ul>\n<li><a href=\"#21-%EB%AA%A9%ED%91%9C\">2.1. 목표</a></li>\n<li><a href=\"#22-createasyncthunk\">2.2. createAsyncThunk</a></li>\n<li><a href=\"#%EC%8B%A4%EC%A0%84-%EC%98%88%EC%A0%9C\">실전 예제</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1 id=\"1-redux-toolkit-기본-사용\" style=\"position:relative;\"><a href=\"#1-redux-toolkit-%EA%B8%B0%EB%B3%B8-%EC%82%AC%EC%9A%A9\" aria-label=\"1 redux toolkit 기본 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Redux Toolkit 기본 사용</h1>\n<ul>\n<li>\n<p><strong>Slice 생성</strong>\nslice는 하나의 데이터에 대한 작은 저장소라고 생각할 수 있다.</p>\n<pre><code class=\"language-js\">import { createSlice } from '@reduxjs/toolkit'\n\n// useReducer와 비슷하게 초깃갓과, reducer을 전달\nconst counterSlice = createSlice({\n  name: 'cntSlice',\n  initialState: { value: 0 },\n  reducers: {\n    // 각가의 reducer가 하나의 type에 대응\n    up: (state, action) => {\n      // 1) 액션 크리에이터를 사용할 경우\n      state.value = state.value + action.payload\n      // 2) 액션 크리에이터를 사용하지 않을 경우\n      // state.value = state.value + action.step\n    },\n  },\n})\n\nexport default counterSlice\nexport const { up } = counterSlice.actions // action creator라고 부르며, 이를 통해 컴포넌트 단에서 더 간편한게 action을 생성할 수 있다.\n</code></pre>\n</li>\n<li>\n<p><strong>Store 생성</strong></p>\n<p>redux는 여러 개의 slice를 모아 단 하나의 store에서 관리한다.</p>\n<pre><code class=\"language-js\">import { configureStore } from '@reduxjs/toolkit'\nimport counterSlice from './counterSlice'\n\nconst store = configureStore({\n  reducer: {\n    // 왜 reducer를 넣어주는지는 잘모르겠음..\n    counter: counterSlice.reducer, // 왼쪽이름이 나중에 state를 읽을 때 사용된다\n  },\n})\n\nexport default store\n</code></pre>\n</li>\n<li>\n<p><strong>Provider 생성</strong></p>\n<p>store값을 읽고자 하는 컴포넌트의 최상윗단에 Provider로 공급한다.</p>\n<pre><code class=\"language-js\">import { Provider } from 'react-redux'\nimport store from './store'\n\nexport default function App() {\n  return (\n    &#x3C;Provider store={store}>\n      &#x3C;Counter />\n    &#x3C;/Provider>\n  )\n}\n</code></pre>\n</li>\n<li>\n<p><strong>컴포넌트 사용</strong></p>\n<pre><code class=\"language-js\">import { useSelector, useDispatch } from 'react-redux'\nimport counterSlice, { up } from './counterSlice'\n\nexport default function Counter() {\n  // store로부터 상태를 읽어온다.\n  const count = useSelector((state) => {\n    return state.counter.value\n  })\n\n  // reducer를 발동시킬 dispatch\n  const dispatch = useDispatch()\n\n  function countUp() {\n    // 1. 액션 직접 입력\n    // dispatch({ type: 'cntSlice/up', step: 1 }) // type에서 slice의 name을 사용한다.\n\n    // 2. 액션 크리에이터 사용\n    dispatch(couterSlice.actions.up(2)) // 인자는 자동으로 payload라는 값에 담겨서 감\n\n    // 3. 액션 크리에이터 사용\n    dispatch(up(2)) // 인자는 자동으로 payload라는 값에 담겨서 감\n  }\n\n  return (\n    &#x3C;div>\n      {count}\n      &#x3C;button onClick={countUp}>+&#x3C;/button>\n    &#x3C;/div>\n  )\n}\n</code></pre>\n</li>\n</ul>\n<h1 id=\"2-redux-toolkit-비동기\" style=\"position:relative;\"><a href=\"#2-redux-toolkit-%EB%B9%84%EB%8F%99%EA%B8%B0\" aria-label=\"2 redux toolkit 비동기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Redux Toolkit 비동기</h1>\n<p>리덕스 툴킷 안에 이미 Thunk라는 기능이 내장되어있어 비동기 reducer를 생성할 수 있다.</p>\n<h2 id=\"21-목표\" style=\"position:relative;\"><a href=\"#21-%EB%AA%A9%ED%91%9C\" aria-label=\"21 목표 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.1. 목표</h2>\n<p>동기적 reducer로도 아래처럼 비동기적인 state업데이트를 구현할 수능 있다.</p>\n<pre><code class=\"language-js\">const status = useSelector((state)=> {\n  return state.counter.status\n})\nconst value = useSelector((state)=> {\n  return state.counter.value\n})\n\n// 비동기 요청의 반환 값을 받은 뒤, state를 동기 reducer로 업데이트한다.\nasync function fetchValue() {\n  const res = await fetch('https://api/example')\n  const data = await res.json()\n  dispatch(set(data.value))\n}\n\nreturn (\n&#x3C;div>{count} | {status}&#x3C;/div>\n&#x3C;button onClick={fetchValue}>데이터 가져오기&#x3C;/button>\n)\n</code></pre>\n<p>하지만 코드의 불필요한 중복을 줄이고 유지 보수를 용이하게 하기 위해서, 아래처럼 비동기 로직을 reducer 자체에 포함시키고자 한다.</p>\n<pre><code class=\"language-js\">const status = useSelector((state)=> {\n  return state.counter.status\n})\nconst vlaue = useSelector((state)=> {\n  return state.counter.value\n})\n\nasync function fetchValue() {\n  dispatch(asyncFetchReducer()) // 비동기 reducer 호출\n}\n\nreturn (\n&#x3C;div>{count} | {status}&#x3C;/div>\n&#x3C;button onClick={fetchValue}>데이터 가져오기&#x3C;/button>\n)\n</code></pre>\n<h2 id=\"22-createasyncthunk\" style=\"position:relative;\"><a href=\"#22-createasyncthunk\" aria-label=\"22 createasyncthunk permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.2. createAsyncThunk</h2>\n<p>createAsyncThunk를 통해 비동기 함수를 처리하는 액션을 만들다. action creater**</p>\n<pre><code class=\"language-js\">const asyncUpFetch = createAsyncThunk(\n  'counterSlice/asyncUpFetch', // 타입 정의\n  async () => {\n    const resp = await fetch('https://api/example')\n    const data = await resp.json()\n    return data.value\n  }\n)\n</code></pre>\n<pre><code class=\"language-js\">const counterSlice = createSlice({\n  name: 'counterSlice',\n  initialState: {\n    value: 0,\n    status: 'Welcome',\n  },\n  // createAsyncThunk가 만들어주는 3가지 상태에 대한 리듀서를 정의\n  // 실제 reducer 함수는 두번째 인자로 넘겨준다.\n  extraReducers: (builder) => {\n    builder.addCase(asyncUpFetch.pending, (state, action) => {\n      state.status = 'Loading'\n    })\n    builder.addCase(asyncUpFetch.fullfilled, (state, action) => {\n      state.status = action.payload // payload라는 약속된 값으로 위의 코드의 리턴값이 전달됨(data.value)\n      state.status = 'complete'\n    })\n    builder.addCase(asyncUpFetch.pending, (state, action) => {\n      state.status = 'fail'\n    })\n  },\n})\n</code></pre>\n<p>동기와 비동기 reducers\n동기적인 작업은 reducers -> 툴킷이 액션 크리에이터를 자동으로 만들어줌\n비동기적인 작업은 extraReducers -> 툴킷이 액션 크리에이터를 자동으로 만들어주지 못함.</p>\n<pre><code class=\"language-js\">const counterSlice = createSlice({\n  name: 'cntSlice',\n  initialState: { value: 0, status: 'Welcome' },\n  reducers: {\n    up: (state, action) => {\n      //   state.value = state.value + action.step\n      state.value = state.value + action.payload\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(asyncUpFetch.fullfilled, (state, action) => {\n      state.value = state.value + action.payload // payload는 액션의 결과가 온다\n      state.status = 'complete'\n    })\n  },\n})\n</code></pre>\n<h2 id=\"실전-예제\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%EC%A0%84-%EC%98%88%EC%A0%9C\" aria-label=\"실전 예제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실전 예제</h2>\n<pre><code class=\"language-js\">// counterSlice\n\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\n\nconst asyncUpFetch = createAsyncThunk('counterSlice/asyncUpFetch', async () => {\n  const resp = await fetch('https://api/example')\n  const data = await resp.json()\n  return data.value\n})\n\nconst counterSlice = createSlice({\n  name: 'counterSlice',\n  initialState: {\n    value: 0,\n    status: 'Welcome',\n  },\n  reducers: {\n    up: (state, action) => {\n      state.value = state.value + action.payload\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(asyncUpFetch.pending, (state, action) => {\n      state.status = 'Loading'\n    })\n    builder.addCase(asyncUpFetch.fullfilled, (state, action) => {\n      state.status = action.payload // payload라는 약속된 값으로 위의 코드의 리턴값이 전달됨(data.value)\n      state.status = 'complete'\n    })\n    builder.addCase(asyncUpFetch.pending, (state, action) => {\n      state.status = 'fail'\n    })\n  },\n})\n</code></pre>\n<pre><code class=\"language-js\">// Counter.js\nimport React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { up, asyncUpFetch } from './counterSlice'\n\nfunction Counter() {\n  const dispatch = useDisptch()\n  const count = useSelector((state) => {\n    return state.counter.value\n  })\n  const status = useSelector((state) => {\n    return state.counter.status\n  })\n\n  return (\n    &#x3C;div>\n      &#x3C;div>\n        {' '}\n        {count} | {status}{' '}\n      &#x3C;/div>\n      &#x3C;button onClick={() => dispatch(up(2))}>count up&#x3C;/button>\n      &#x3C;button onClick={() => dispatch(asyncUpFetch(2))}>fetch count&#x3C;/button>\n    &#x3C;/div>\n  )\n}\n</code></pre>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#1-redux-toolkit-%EA%B8%B0%EB%B3%B8-%EC%82%AC%EC%9A%A9\">1. Redux Toolkit 기본 사용</a></p>\n</li>\n<li>\n<p><a href=\"#2-redux-toolkit-%EB%B9%84%EB%8F%99%EA%B8%B0\">2. Redux Toolkit 비동기</a></p>\n<ul>\n<li><a href=\"#21-%EB%AA%A9%ED%91%9C\">2.1. 목표</a></li>\n<li><a href=\"#22-createasyncthunk\">2.2. createAsyncThunk</a></li>\n<li><a href=\"#%EC%8B%A4%EC%A0%84-%EC%98%88%EC%A0%9C\">실전 예제</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"Redux Toolkit 기본 사용법","createdAt":"2023-05-02","updatedAt":"2023-05-08","tags":null,"description":null,"reference":null}},"allMarkdownRemark":{"nodes":[{"id":"686965c0-6280-5d37-9dc5-7f66341f4fdd","excerpt":"추후 참고하기 위해, 반복되는 CRA기반 리액트 초기 셋팅 작업을 공식문서들을 참고하여 정리한 문서입니다. 1. Create React App 2. eslint & prettier 2.1. eslint 2.2. prettier 3. React…","parent":{"id":"d9f9edaa-1b95-5100-bd47-d45bc63f29d5","name":"Create_React_App_Initial_Setting","relativePath":"Frontend/React/Create_React_App_Initial_Setting.md"},"frontmatter":{"title":"Create React App 초기 셋팅 정리","createdAt":"2023-04-23","updatedAt":"2023-04-28"},"fields":{"slug":"/posts/Frontend/React/Create_React_App_Initial_Setting/"}},{"id":"dc8842b1-870b-58e5-bf26-f2bfeb739a7f","excerpt":"1. Context 1.1. Props와 비교 1.2. 사용 예시 2. useReducer 1.1. 개념 1.2. 예시 (원시 타입) 1.3. 예시(참조타입) 1. Context…","parent":{"id":"3bb6320c-de7a-5fc6-98b2-3b2c10ea6b10","name":"02_React_Context_API","relativePath":"Frontend/React/02_React_Context_API.md"},"frontmatter":{"title":"React Context API 란?","createdAt":"2023-05-02","updatedAt":"2023-05-08"},"fields":{"slug":"/posts/Frontend/React/02_React_Context_API/"}},{"id":"ee1b12d6-a243-50d5-ae99-32f322ad757f","excerpt":"1. Redux Toolkit 기본 사용 2. Redux Toolkit 비동기 2.1. 목표 2.2. createAsyncThunk 실전 예제 1. Redux Toolkit 기본 사용 Slice 생성\nslice…","parent":{"id":"e2d2b32a-0399-59ef-8f65-f072379a23bd","name":"03_React_Redux_Toolkit","relativePath":"Frontend/React/03_React_Redux_Toolkit.md"},"frontmatter":{"title":"Redux Toolkit 기본 사용법","createdAt":"2023-05-02","updatedAt":"2023-05-08"},"fields":{"slug":"/posts/Frontend/React/03_React_Redux_Toolkit/"}},{"id":"340db7bc-71c4-530c-b15c-93ba0b54ff19","excerpt":"이 글에서는 responsive-loader를 적용하는 법을 중심적으로 다룬다. 원리에 대한 내용은 '정적 이미지를 로딩하는 가장 완벽한 방법' 포스팅에 정리했다. 1. responsive-loader 자바스크립트로 만들어진 웹팩 플러그인이다. npm…","parent":{"id":"33721eb9-f3db-5fff-9657-051d86646050","name":"responsive_loader","relativePath":"Frontend/React/responsive_loader.md"},"frontmatter":{"title":"React & Webpack 이미지 로딩 최적화","createdAt":"2023-10-16","updatedAt":"2023-10-16"},"fields":{"slug":"/posts/Frontend/React/responsive_loader/"}},{"id":"c919c895-9bcb-5e95-83ac-31a2a09d0a7c","excerpt":"1. useState란 무엇인가 리액트의 useState는 대표적으로 2가지 기능을 제공한다. 1. 컴포넌트가 리렌더링 되더라도 값을 유지하고,…","parent":{"id":"f9178901-27bc-5e53-b540-2c72031d0097","name":"react_form_data","relativePath":"Frontend/React/react_form_data.md"},"frontmatter":{"title":"React에서 formData 활용하기","createdAt":"2024-01-16","updatedAt":"2024-01-16"},"fields":{"slug":"/posts/Frontend/React/react_form_data/"}},{"id":"8ededc75-f496-552e-9613-bf6345e60b1e","excerpt":"1. Context 란? 나는 일종의 React 자체 전역 데이터 저장소라고 생각한다. 일반적으로 React에서 데이터를 하위 컴포넌트로 전달하기 위해서는 props…","parent":{"id":"0e3e2d0a-7c62-55f6-b715-320a846f81b0","name":"contextAPI_practice","relativePath":"Frontend/React/contextAPI_practice.md"},"frontmatter":{"title":"Radio에 React Context 활용하기","createdAt":"2024-03-06","updatedAt":"2024-03-06"},"fields":{"slug":"/posts/Frontend/React/contextAPI_practice/"}}]}},"pageContext":{"pagePath":"/posts/Frontend/React/03_React_Redux_Toolkit/","siblingPostsPathRegex":"/^(?!.*README).*Frontend\\/React\\/.*$/","relativeDirectory":"React","id":"ee1b12d6-a243-50d5-ae99-32f322ad757f","parent":{"id":"e2d2b32a-0399-59ef-8f65-f072379a23bd","name":"03_React_Redux_Toolkit","relativePath":"Frontend/React/03_React_Redux_Toolkit.md"},"fields":{"slug":"/posts/Frontend/React/03_React_Redux_Toolkit/"}}},"staticQueryHashes":["24302420","4059933791"],"slicesMap":{}}