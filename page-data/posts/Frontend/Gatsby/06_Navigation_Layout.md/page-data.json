{"componentChunkName":"component---src-templates-post-index-tsx","path":"/posts/Frontend/Gatsby/06_Navigation_Layout.md/","result":{"data":{"markdownRemark":{"id":"12d1047a-a62c-54a5-9993-20b820febbb5","html":"<h1 id=\"1-ssg-렌더링\" style=\"position:relative;\"><a href=\"#1-ssg-%EB%A0%8C%EB%8D%94%EB%A7%81\" aria-label=\"1 ssg 렌더링 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. SSG 렌더링</h1>\n<p>React에서는 Nested Route로 손 쉽게 레이아웃을 구현할 수 있다. <strong>그런데 Gatsby는 Single Page Application이 아니다!</strong> Gatsby는 정적 사이트 생성기(SSG)로 빌드 시에, 모든 url 경로에 대한 index.html을 작성하고 사용자가 요청하면 해당 index.html을 반환한다. 다시 말해서 <mark>클라이언트는 매 페이지(url)마다 독립된 index.html을 제공받는다.</mark></p>\n<p><a href=\"https://www.gatsbyjs.com/docs/how-to/routing/layout-components/\">Gatsby 공식문서</a>에서도 이를 명확하게 말하고 있다.</p>\n<blockquote>\n<p>As mentioned earlier, Gatsby does not, by default, automatically wrap pages in a layout component. The “top level” component is the page itself. As a result, when the “top level” component changes between pages, React will re-render all children. This means that shared components like navigations will unmount and remount.</p>\n</blockquote>\n<p>다행히 이어서 바로 해결방법도 제시한다. Browser API &#x26; SSR API의 <code>wrapPageElement</code>를 사용하면 된다고 한다.</p>\n<blockquote>\n<p>If you need to set a wrapper component around page components that won’t get unmounted on page changes, use the wrapPageElement browser API and the SSR equivalent.</p>\n</blockquote>\n<h1 id=\"11-navigation-layout\" style=\"position:relative;\"><a href=\"#11-navigation-layout\" aria-label=\"11 navigation layout permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.1. Navigation Layout</h1>\n<p>일단 먼저 Layout Component를 작성한다. 나늠 다음과 같이 작성했다.</p>\n<pre><code class=\"language-js\">import React from 'react'\r\nimport Footer from '@components/footer'\r\nimport Navigation from '@components/navigation'\r\n\r\ninterface Props {\r\n  children: React.ReactNode;\r\n}\r\n\r\nconst NavigationLayout: React.FC&#x3C;Props> = ({ children }) => {\r\n  return (\r\n    &#x3C;div>\r\n      &#x3C;Navigation />\r\n      {children}\r\n      &#x3C;Footer />\r\n    &#x3C;/div>\r\n  )\r\n}\r\n\r\nexport default NavigationLayout\n</code></pre>\n<h1 id=\"12-wrappageelement\" style=\"position:relative;\"><a href=\"#12-wrappageelement\" aria-label=\"12 wrappageelement permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.2. WrapPageElement</h1>\n<p>그리고 gatsby-browser파일에 다음처럼 코드를 작성하기만 하면 된다. 좀 특이했던 것은 jsx 문법을 사용해야하기 때문에</p>\n<ul>\n<li><code>import React from 'react</code> 구문을 넣고</li>\n<li>파일 이름을 <code>gatsby-browser.ts</code>에서 <code>gatsby-browser.tsx</code>로 바꿔야 했다.</li>\n</ul>\n<p>SSR APIs에도 동일한 <code>wrapPageElement</code>가 있기 때문에, 본인의 프로젝트가 SSR 렌더링을 사용한다면 gatsby-ssr에도 같은 코드를 입력하면 된다.</p>\n<pre><code class=\"language-js\">import React from 'react'\r\nimport NavigationLayout from '@layouts/navigation-layout'\r\n\r\nexport const wrapPageElement = ({ element, props }) => {\r\n  return &#x3C;NavigationLayout {...props}>{element}&#x3C;/NavigationLayout>\r\n}\n</code></pre>\n<p>이렇게 되면 해당 Layout Component가 항상 페이지를 감싸기 때문에 Page Component에서 따로 Layout과 관련된 코드를 넣지 않아도 된다.</p>\n<pre><code class=\"language-js\">import * as React from 'react'\r\n\r\nconst IndexPage: React.FC&#x3C;PageProps> = () => {\r\n  return &#x3C;div>Home Page&#x3C;/div>\r\n}\r\n\r\nexport default IndexPage\r\n\r\nexport const Head: HeadFC = () => &#x3C;title>Home Page&#x3C;/title>\n</code></pre>\n<h1 id=\"2-참조\" style=\"position:relative;\"><a href=\"#2-%EC%B0%B8%EC%A1%B0\" aria-label=\"2 참조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 참조</h1>\n<ul>\n<li><a href=\"https://www.gatsbyjs.com/docs/how-to/routing/layout-components/\">Gatsby Layout Components</a></li>\n<li><a href=\"https://www.gatsbyjs.com/docs/reference/config-files/gatsby-browser/\">Gatsby Browser APIs</a></li>\n</ul>","tableOfContents":"<ul>\n<li><a href=\"#1-ssg-%EB%A0%8C%EB%8D%94%EB%A7%81\">1. SSG 렌더링</a></li>\n<li><a href=\"#11-navigation-layout\">1.1. Navigation Layout</a></li>\n<li><a href=\"#12-wrappageelement\">1.2. WrapPageElement</a></li>\n<li><a href=\"#2-%EC%B0%B8%EC%A1%B0\">2. 참조</a></li>\n</ul>","frontmatter":{"title":"06. Gatsby 네비게이션 레이아웃 설정","createdAt":"2023-06-27","updatedAt":"2023-06-27","tags":["gatsby","layout","레이아웃","navigation","네비게이션"],"description":"SSG 기반 Gatsby 프로젝트에서 unmount되지 않는 네비게이션 레이아웃을 만든다.","reference":null}},"allMarkdownRemark":{"nodes":[{"id":"a4152c54-f7da-5476-960e-93beffcbe61d","parent":{"id":"617e7dca-97c8-5841-bfb2-0a162c4e1534","name":"01_Gatsby","relativePath":"Frontend/Gatsby/01_Gatsby.md"},"frontmatter":{"title":"01. Gatsby 렌더링 옵션과 프로젝트 구조","createdAt":"2023-06-16","updatedAt":"2023-06-16"},"excerpt":"시작하기 앞서... Gatsby로 Markdown기반의 블로그를 만들려고 한다면, Gatsby 공식문서를 보는 것을 추천한다. 맞춤형 강의라고 해도 믿을 만큼 잘 정리되어 있기 때문이다. 때문에 나는 앞으로 Gatsby…"},{"id":"c2ac2a36-17b9-561c-8b9d-d1ade64002a9","parent":{"id":"eae2e25b-741f-57a4-bd36-9d219fd297f8","name":"02_Github_Pages","relativePath":"Frontend/Gatsby/02_Github_Pages.md"},"frontmatter":{"title":"02. Gatsby 프로젝트 Github Pages 배포","createdAt":"2023-06-23","updatedAt":"2023-06-23"},"excerpt":"1. 프론트엔드 배포란? 프론트엔드 배포를 한 마디로 정리하면, 특정 url을 통한 GET요청에 대해 index.html…"},{"id":"ee0ec7c1-5aa3-5f79-86f7-bf4050e9b2fe","parent":{"id":"4e98b050-0fb9-58da-b407-5454dca4793b","name":"03_Import_Settings","relativePath":"Frontend/Gatsby/03_Import_Settings.md"},"frontmatter":{"title":"03. Gatsby 프로젝트(TypeScript) import 경로 설정","createdAt":"2023-06-24","updatedAt":"2023-06-24"},"excerpt":"1. import 경로 프로젝트를 진행하다 보면, import 절대경로를 설정하지 않을 수 없다.\r\n심지어 어쩌다가 한 번, IDE에서 자동 import…"},{"id":"2924ade8-6063-5aad-af2d-6b8c37f04de4","parent":{"id":"1ce14c47-ef8a-5617-b4e9-43af31d6bdae","name":"04_ESLint_Prettier","relativePath":"Frontend/Gatsby/04_ESLint_Prettier.md"},"frontmatter":{"title":"04. Gatsby 프로젝트 Prettier & ESLint & Husky 설정","createdAt":"2023-06-25","updatedAt":"2023-06-25"},"excerpt":"1. 개요 1.1. Prettier & ESLint란? Prettier와 ESLint는 각각 코드 포맷팅(Code Formatting)과 린팅(Linting…"},{"id":"6c8cb4f5-f8e7-54da-8c4b-f0d4da9fe1b7","parent":{"id":"2e2e604a-c7a8-5f50-a1e8-eec02db1c235","name":"05_Dark_Mode","relativePath":"Frontend/Gatsby/05_Dark_Mode.md"},"frontmatter":{"title":"05. Gatsby 다크모드 구현하기 (feat. Sass)","createdAt":"2023-06-26","updatedAt":"2023-06-26"},"excerpt":"아래 내용은 주관적인 의견이고, 카카오 FE 기술 블로그의 내용을 참조했습니다. 1. Sass 다크모드 한동안 다크모드를 공부한 적이 있다. Styled Component와 같은 CSS-in-JS…"},{"id":"12d1047a-a62c-54a5-9993-20b820febbb5","parent":{"id":"19443683-c1f6-52a6-80de-8132095ad59c","name":"06_Navigation_Layout","relativePath":"Frontend/Gatsby/06_Navigation_Layout.md"},"frontmatter":{"title":"06. Gatsby 네비게이션 레이아웃 설정","createdAt":"2023-06-27","updatedAt":"2023-06-27"},"excerpt":"1. SSG 렌더링 React에서는 Nested Route로 손 쉽게 레이아웃을 구현할 수 있다. 그런데 Gatsby는 Single Page Application이 아니다! Gatsby는 정적 사이트 생성기(SSG)로 빌드 시에, 모든 url…"},{"id":"90b5887d-f107-5b34-ac1b-8b151d77d4e8","parent":{"id":"3222bef0-1a2c-5872-9930-59de10d2aac1","name":"07_Custom_Pages","relativePath":"Frontend/Gatsby/07_Custom_Pages.md"},"frontmatter":{"title":"07. Gatsby 커스텀 페이지 생성","createdAt":"2023-06-27","updatedAt":"2023-06-27"},"excerpt":"1. 튜토리얼 방식의 한계 Gatsby 튜토리얼 Part6 를 보면 file system routes라고 해서 파일시스템에 있는 파일들에 대해서 동적으로 페이지를 생성하는 방법을 소개한다. 예를 들어 아래 그림처럼 src/pages/아래에 {mdx…"},{"id":"a4520d07-ae7e-562e-8c9a-fb3a67c299e6","parent":{"id":"f34ae9e0-d3ed-585b-b0d5-383585deba79","name":"08_Diretory_Based_Category","relativePath":"Frontend/Gatsby/08_Diretory_Based_Category.md"},"frontmatter":{"title":"08. 폴더 구조 기반 Gatsby 카테고리 바 생성","createdAt":"2023-06-28","updatedAt":"2023-06-28"},"excerpt":"1. GraphQL 아직 GraphQL을 파일시스템에 대해서 밖에 사용하지 않아, 정확히 GraphQL이 뭔지는 감이 안잡힌다. 하지만 그 제한된 경험으로도 GrqphQL이 기존 API…"},{"id":"ddcb7b45-3c2e-56b4-8f77-cb2467213bff","parent":{"id":"0975f17b-b05e-50dd-9556-7f7d55ab469d","name":"09_Markdown_Styling","relativePath":"Frontend/Gatsby/09_Markdown_Styling.md"},"frontmatter":{"title":"09. Gatsby 마크다운(md) 스타일링","createdAt":"2023-06-29","updatedAt":"2023-06-29"},"excerpt":"gatsby-transformer-remark플러그인을 통한 markdownRemark노드를 사용을 전제합니다. 1. 마크다운 스타일링 나는 분명 Gatsby 공식문서를 따라 gatsby-transformer-remark…"},{"id":"ee4c27f0-573f-5f35-88a1-6f255d2fde52","parent":{"id":"493f6067-e5fe-523f-ad92-cd3a75858da7","name":"10_Table_of_Contents","relativePath":"Frontend/Gatsby/10_Table_of_Contents.md"},"frontmatter":{"title":"10. Gatsby 스크롤 반응형 목차(TOC) 생성","createdAt":"2023-06-30","updatedAt":"2023-06-30"},"excerpt":"1. URL 프래그먼트 식별자(#) 일단 프래그먼트 식별자(a.k.a. #)이 어떻게 동작하는 알 필요가 있다. 나는 평소 너무 당연하게 써왔지만, 어떻게 동작하는지는 한 번도 생각해보지 않았다. 사용자가 URL…"},{"id":"a4ee6420-2828-5c97-ad61-3998c8c82cdb","parent":{"id":"ff8035d0-362c-5551-a0d3-23a7c4c3fda0","name":"11_utterances_giscus","relativePath":"Frontend/Gatsby/11_utterances_giscus.md"},"frontmatter":{"title":"11. Gatsby 댓글 및 좋아요 기능","createdAt":"2023-07-02","updatedAt":"2023-07-02"},"excerpt":"1. Utterances와 Giscus 따로 서버를 돌리지 않고서는 댓글/좋아요 기능을 구현할 수 없을 줄 알았다. 그런데 항상 개발자들은 신박한 방법을 찾아낸다. GitHub API…"}]}},"pageContext":{"pagePath":"posts/Frontend/Gatsby/06_Navigation_Layout.md","regex":"/^(?!.*README).*Frontend\\/Gatsby.*$/","relativeDirectory":"Gatsby","id":"12d1047a-a62c-54a5-9993-20b820febbb5","parent":{"id":"19443683-c1f6-52a6-80de-8132095ad59c","name":"06_Navigation_Layout","relativePath":"Frontend/Gatsby/06_Navigation_Layout.md"}}},"staticQueryHashes":["1484934524","2644037009","4059933791"],"slicesMap":{}}