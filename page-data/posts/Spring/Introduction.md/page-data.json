{"componentChunkName":"component---src-templates-post-tsx","path":"/posts/Spring/Introduction.md/","result":{"data":{"markdownRemark":{"id":"be94dac4-ed64-588c-8ad5-c8e72ec32348","html":"<h1>1. 구조</h1>\n<h1>1.1. Cotroller</h1>\n<blockquote>\n<p>클라이언트를 요청을 받고 처리한 뒤, 응답을 반환한다.</p>\n</blockquote>\n<p>사용자의 HTTP요청을 받아 Service로 전달하고, Service에서 반환된 결과를 사용자에게 반환한다. 요청의 유효성 검사, 데이터 변환 등의 역할을 수행하기도 한다.</p>\n<h1>1.2. Service</h1>\n<blockquote>\n<p>Controller로 부터 전달받은 요청을 처리하는, 데이터의 가공, 검증, 상태 변경 등의 비즈니스 규칙을 담는다.</p>\n</blockquote>\n<h1>1.3. Data</h1>\n<h2>1.3.1. DTO</h2>\n<blockquote>\n<p>사용자 요청과 Controller 사이에서 Data를 매핑하는 객체이다.</p>\n</blockquote>\n<h2>1.3.3. JPA</h2>\n<ul>\n<li>\n<p><strong>Repository</strong><br>\nDB의 데이터와 Java의 객체를 매핑해주는 함수를 가진다.<br>\nJPA로 구현되어 있으며, 실제 SQL 쿼리문으로 함수를 만들 수 있다.</p>\n</li>\n<li>\n<p><strong>Entity</strong></p>\n<blockquote>\n<p>DB 테이블과 1:1로 대응되는 객체이다. Service 로직과 DB사이에서 Data를 매핑하는 객체이다.</p>\n</blockquote>\n</li>\n</ul>\n<h2>1.3.4. MyBatis</h2>\n<ul>\n<li>\n<p><strong>DAO(Mapper)</strong></p>\n<blockquote>\n<p>xml 파일로 정의된 SQL 쿼리문과 1:1 매핑되어있는 함수를 통해, DB 테이블을 자바 객체로 변환한다.</p>\n</blockquote>\n</li>\n</ul>\n<h1>2. Annotation</h1>\n<h2>2.1. Getter</h2>\n<p>클래스 내부의 변수들에 대해서 getter함수를 자동적으로 생성해준다.\r\nget+변수이름</p>\n<h2>2.2. Setter</h2>\n<p>클래스 내부의 변수들에 대해서 setter함수를 자동적으로 생성해준다.\r\nset+변수이름</p>\n<h2>2.3. Bean &#x26; Component</h2>\n<ul>\n<li><strong>DI &#x26; IoC</strong><br>\n결국 자원을 효율적으로 이용하기 위한 기능들</li>\n</ul>\n<p>Bean과 Component는 각각 메소드와 클래스를 Spring의 Bean(IoC 컨테이너)에 등록한다.</p>\n<h2>2.3.1 Component</h2>\n<p>@Component는 클래스 단위로 사용되며, 개발자가 직접 컨트롤이 가능한 내부 클래스에 사용한다.</p>\n<p>@Service, @Repository, @Controller는 모두 @Component를 상속받는다.</p>\n<h2>2.3.2. Bean</h2>\n<p>@Bean은 메소드 단위로 사용되며, 외부 라이브러리 사용 시 사용한다.</p>\n<h2>2.3.3. RequiredArgsConstructor</h2>\n<p>스프링 IoC 컨테이너에서 필요한 인자를 가져와, 클래스 생성 시 필요한 인자를 자동으로 set해준다.</p>\n<pre><code class=\"language-java\">@RequiredArgsConstructor\r\npublic class MemberController {\r\n\r\n  private final MemberService memberService;\r\n  private final JWTService jwtService;\r\n  private final EncryptService encryptService;\r\n  private final EmailService emailService;\r\n  private final RedisService redisService;\r\n  private final CookieService cookieService;\r\n  private final AwsS3Service awsS3Service;\r\n  ...\r\n}\n</code></pre>\n<p>만일 @RequiredArgsConstructor 어노테이션이 없었다면, 위 객체들을 직접 생성해주거나 set하는 함수를 입력해야한다.</p>\n<h2>2.4. Builder</h2>\n<p>Builder Pattern을 통해 가독성 좋게 클래스에 대한 객체를 생성할 수 있다.</p>\n<h2>2.5. Generic</h2>\n<p>유연한 설계를 위해 타입을 인자로 전달해주는 용도</p>"}},"pageContext":{"pagePath":"posts/Spring/Introduction.md","id":"be94dac4-ed64-588c-8ad5-c8e72ec32348","parent":{"id":"142a5b6a-b9ff-507e-aded-28954ea1bc29","name":"Introduction","relativePath":"Spring/Introduction.md"}}},"staticQueryHashes":["1274812890","3935499650","82772122"],"slicesMap":{}}