{"version":3,"file":"component---src-pages-index-tsx-9ad3145d338b6c77d111.js","mappings":"0IAmDA,IAlC6BA,IAAiD,IAAhD,MAAEC,EAAK,YAAEC,EAAW,SAAEC,EAAQ,SAAEC,GAAU,EACtE,MACEH,MAAOI,EACPH,YAAaI,EAAkB,MAC/BC,EAAK,QACLC,IACEC,EAAAA,EAAAA,KAEEC,EAAe,CACnBT,MAAOA,GAASI,EAChBH,YAAaA,GAAeI,EAC5BC,MAAM,GAAIC,EAAUD,EACpBI,IAAI,GAAIH,GAAUL,GAAQ,KAG5B,OACES,EAAAA,cAAAA,EAAAA,SAAAA,KACEA,EAAAA,cAAAA,QAAAA,KAAQF,EAAIT,OACZW,EAAAA,cAAAA,OAAAA,CAAMC,KAAK,cAAcC,QAASJ,EAAIR,cACtCU,EAAAA,cAAAA,OAAAA,CAAMC,KAAK,QAAQC,QAASJ,EAAIH,QAChCK,EAAAA,cAAAA,OAAAA,CAAMG,SAAS,UAAUD,QAAQ,YACjCF,EAAAA,cAAAA,OAAAA,CAAMG,SAAS,SAASD,QAASJ,EAAIC,MACrCC,EAAAA,cAAAA,OAAAA,CAAMG,SAAS,WAAWD,QAASJ,EAAIT,QACvCW,EAAAA,cAAAA,OAAAA,CAAMG,SAAS,iBAAiBD,QAASJ,EAAIR,cAC7CU,EAAAA,cAAAA,OAAAA,CAAMG,SAAS,eAAeD,QAAST,IACvCO,EAAAA,cAAAA,OAAAA,CAAMG,SAAS,YAAYD,QAAQ,UACnCF,EAAAA,cAAAA,OAAAA,CAAMG,SAAS,WAAWD,QAASJ,EAAIH,QACvCK,EAAAA,cAAAA,OAAAA,CAAMG,SAAS,iBAAiBD,QAAQ,SACxCF,EAAAA,cAAAA,OAAAA,CAAMG,SAAS,kBAAkBD,QAAQ,QACxCV,EACA,C,sHChCP,MAX4BY,KAC1B,MAAM,MAAEC,IAAUC,EAAAA,EAAAA,YAAWC,EAAAA,IAC7B,OACEP,EAAAA,cAAAA,MAAAA,CAAKQ,UAAS,cAAgBH,GAC5BL,EAAAA,cAAAA,MAAAA,KAAK,SACLA,EAAAA,cAAAA,MAAAA,KAAK,KACLA,EAAAA,cAAAA,MAAAA,KAAK,WACD,E,UCkCV,MAxBsBS,KACPC,EAAAA,EAAAA,gBAAc,cAoBfC,aAAaC,MCF3B,MAjC6BC,KAC3B,MAAMC,EAAaL,IAEnBK,EAAWC,MAAK,IAAM,GAAMC,KAAKC,WACjC,MAAMC,EAAqBJ,EAAWK,MAAM,EANtB,IAoBtB,OACEnB,EAAAA,cAAAA,KAAAA,CACEQ,UAAU,cACVY,aAdsBC,IACTA,EAAEC,OACVC,UAAUC,IAAI,OAAO,EAa1BC,aATsBJ,IACTA,EAAEC,OACVC,UAAUG,OAAO,OAAO,GAS5BR,EAAmBS,KAAKC,GACvB5B,EAAAA,cAAAA,KAAAA,CAAIQ,UAAU,wBAAwBqB,IAAKD,EAASE,IAClD9B,EAAAA,cAAC+B,EAAAA,KAAI,CAACC,GAAE,UAAYJ,EAAS3B,MAAS2B,EAAS3B,SAGhD,E,UClBT,MAXuCgC,IAEnCjC,EAAAA,cAAAA,MAAAA,CAAKQ,UAAU,iBACbR,EAAAA,cAACI,EAAS,MACVJ,EAAAA,cAAAA,MAAAA,CAAKQ,UAAU,yBACbR,EAAAA,cAACa,EAAU,QAQZ,MAAMqB,EAAOA,IAAMlC,EAAAA,cAACmC,EAAAA,EAAG,CAAC9C,MAAM,a","sources":["webpack://byongho-s-til/./src/components/seo/index.tsx","webpack://byongho-s-til/./src/components/index-logo/index.tsx","webpack://byongho-s-til/./src/hooks/use-categories.tsx","webpack://byongho-s-til/./src/components/index-wheel/index.tsx","webpack://byongho-s-til/./src/pages/index.tsx"],"sourcesContent":["import React from 'react'\nimport { useSiteMetadata } from '@hooks/use-site-metadata'\n\ninterface Props {\n  title: string\n  description: string\n  pathname: string\n  children: React.ReactNode\n}\n\ntype SeoType = {\n  title: string\n  description: string\n  image: string\n  url: string\n}\n\nconst SEO: React.FC<Props> = ({ title, description, pathname, children }) => {\n  const {\n    title: defaultTitle,\n    description: defaultDescription,\n    image,\n    siteUrl,\n  } = useSiteMetadata()\n\n  const seo: SeoType = {\n    title: title || defaultTitle,\n    description: description || defaultDescription,\n    image: `${siteUrl}${image}`,\n    url: `${siteUrl}${pathname || ``}`,\n  }\n\n  return (\n    <>\n      <title>{seo.title}</title>\n      <meta name=\"description\" content={seo.description} />\n      <meta name=\"image\" content={seo.image} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta property=\"og:url\" content={seo.url} />\n      <meta property=\"og:title\" content={seo.title} />\n      <meta property=\"og:description\" content={seo.description} />\n      <meta property=\"og:site_name\" content={defaultTitle} />\n      <meta property=\"og:locale\" content=\"ko_KR\" />\n      <meta property=\"og:image\" content={seo.image} />\n      <meta property=\"og:image:width\" content=\"1200\" />\n      <meta property=\"og:image:height\" content=\"630\" />\n      {children}\n    </>\n  )\n}\n\nexport default SEO\n","import React, { useContext } from 'react'\nimport './style.scss'\nimport { ThemeContext } from '@contexts/theme-context'\n\nconst IndexLogo: React.FC = () => {\n  const { theme } = useContext(ThemeContext)\n  return (\n    <div className={`index-logo ${theme}`}>\n      <div>TODAY</div>\n      <div>I</div>\n      <div>LEARNED</div>\n    </div>\n  )\n}\n\nexport default IndexLogo\n","import { graphql, useStaticQuery } from 'gatsby'\n\n// 'posts' 폴더의 하위 디렉토리가 곧 카테고리임을 가정\n// 'posts' 폴더의 하위 디렉토리들을 리스트 형태로 반환하는 훅\n\n// 이미지 관련 폴더 제거 : name: { nin: [\"image\", \"images\", \"asset\", \"assets\"] }\n// 최상단 posts 폴더 제거 : relativePath: { ne: \"\" }\n\ntype DirectoryNode = {\n  id: string\n  name: string\n  relativeDirectory: string\n  relativePath: string\n}\n\ntype DataProps = {\n  allDirectory: {\n    nodes: DirectoryNode[]\n  }\n}\n\nconst useCategories = (): DirectoryNode[] => {\n  const data = useStaticQuery<DataProps>(graphql`\n    query CategoriesQuery {\n      allDirectory(\n        filter: {\n          sourceInstanceName: { eq: \"posts\" }\n          name: { nin: [\"image\", \"images\", \"asset\", \"assets\"] }\n          relativeDirectory: { nin: [\"VanillaWeb\"] }\n          relativePath: { ne: \"\" }\n        }\n      ) {\n        nodes {\n          id\n          name\n          relativeDirectory\n          relativePath\n        }\n      }\n    }\n  `)\n\n  return data.allDirectory.nodes\n}\n\nexport default useCategories\n","import React from 'react'\nimport './style.scss'\nimport { Link } from 'gatsby'\nimport useCategories from '@hooks/use-categories'\n\nconst NUMBER_OF_LISTS = 15 // 화면에 표시할 카테고리 갯수. CSS 파일의 숫자와 동일해야함\n\nconst IndexWheel: React.FC = () => {\n  const categories = useCategories()\n\n  categories.sort(() => 0.5 - Math.random()) // 데이터 섞기\n  const selectedCategories = categories.slice(0, NUMBER_OF_LISTS)\n\n  // 이벤트 발생 element에 styles.stop 클래스 추가\n  const handleMouseEnter = (e: React.MouseEvent<HTMLUListElement>) => {\n    const target = e.target as HTMLUListElement\n    target.classList.add('stop')\n  }\n\n  // 이벤트 발생 element에 styles.stop 클래스 추가\n  const handleMouseLeave = (e: React.MouseEvent<HTMLUListElement>) => {\n    const target = e.target as HTMLUListElement\n    target.classList.remove('stop')\n  }\n\n  return (\n    <ul\n      className=\"index-wheel\"\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n    >\n      {selectedCategories.map((category) => (\n        <li className=\"index-wheel__category\" key={category.id}>\n          <Link to={`/posts/${category.name}`}>{category.name}</Link>\n        </li>\n      ))}\n    </ul>\n  )\n}\n\nexport default IndexWheel\n","import * as React from 'react'\nimport './index.scss'\nimport IndexLogo from '@components/index-logo'\nimport IndexWheel from '@components/index-wheel'\nimport SEO from '@components/seo'\nimport type { PageProps } from 'gatsby'\n\nconst IndexPage: React.FC<PageProps> = () => {\n  return (\n    <div className=\"index--layout\">\n      <IndexLogo />\n      <div className=\"index__wheel-category\">\n        <IndexWheel />\n      </div>\n    </div>\n  )\n}\n\nexport default IndexPage\n\nexport const Head = () => <SEO title=\"Home Page\" />\n"],"names":["_ref","title","description","pathname","children","defaultTitle","defaultDescription","image","siteUrl","useSiteMetadata","seo","url","React","name","content","property","IndexLogo","theme","useContext","ThemeContext","className","useCategories","useStaticQuery","allDirectory","nodes","IndexWheel","categories","sort","Math","random","selectedCategories","slice","onMouseEnter","e","target","classList","add","onMouseLeave","remove","map","category","key","id","Link","to","IndexPage","Head","SEO"],"sourceRoot":""}